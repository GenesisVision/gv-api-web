/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import RatesModel from '../model/RatesModel';

/**
* Rate service.
* @module api/RateApi
* @version v1.0
*/
export default class RateApi {

    /**
    * Constructs a new RateApi. 
    * @alias module:api/RateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get rate
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    getRateWithHttpInfo(from, to) {
      let postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getRate");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getRate");
      }


      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/rate/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rate
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    getRate(from, to) {
      return this.getRateWithHttpInfo(from, to)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get rate
     * @param {String} exchange 
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    getRateExchangeWithHttpInfo(exchange, from, to) {
      let postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling getRateExchange");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getRateExchange");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getRateExchange");
      }


      let pathParams = {
        'exchange': exchange,
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/rate/{exchange}/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rate
     * @param {String} exchange 
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    getRateExchange(exchange, from, to) {
      return this.getRateExchangeWithHttpInfo(exchange, from, to)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get rates
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.from 
     * @param {Array.<String>} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RatesModel} and HTTP response
     */
    getRatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'from': this.apiClient.buildCollectionParam(opts['from'], 'multi'),
        'to': this.apiClient.buildCollectionParam(opts['to'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RatesModel;

      return this.apiClient.callApi(
        '/v1.0/rate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rates
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.from 
     * @param {Array.<String>} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RatesModel}
     */
    getRates(opts) {
      return this.getRatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
