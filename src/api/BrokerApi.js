/**
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokerInitData from '../model/BrokerInitData';
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ClosePeriodData from '../model/ClosePeriodData';
import ErrorViewModel from '../model/ErrorViewModel';
import InvestmentProgramAccrual from '../model/InvestmentProgramAccrual';
import LoginViewModel from '../model/LoginViewModel';
import ManagerAccountOnlineInfo from '../model/ManagerAccountOnlineInfo';
import ManagerHistoryIpfsHash from '../model/ManagerHistoryIpfsHash';
import NewManager from '../model/NewManager';
import NewOpenTradesEvent from '../model/NewOpenTradesEvent';
import NewTradeEvent from '../model/NewTradeEvent';
import StartValues from '../model/StartValues';

/**
* Broker service.
* @module api/BrokerApi
* @version v1
*/
export default class BrokerApi {

    /**
    * Constructs a new BrokerApi. 
    * @alias module:api/BrokerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/account/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAccountCreatePost(authorization, opts) {
      return this.apiBrokerAccountCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthChangePasswordPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerAuthChangePasswordPost(authorization, opts) {
      return this.apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthConfirmEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/confirmEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthConfirmEmailPost(opts) {
      return this.apiBrokerAuthConfirmEmailPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthSignInPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthSignInPost(opts) {
      return this.apiBrokerAuthSignInPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthUpdateTokenGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/updateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthUpdateTokenGet(authorization) {
      return this.apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broker initial data
     * @param {String} brokerTradeServerId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */
    apiBrokerInitDataGetWithHttpInfo(brokerTradeServerId, authorization) {
      let postBody = null;

      // verify the required parameter 'brokerTradeServerId' is set
      if (brokerTradeServerId === undefined || brokerTradeServerId === null) {
        throw new Error("Missing the required parameter 'brokerTradeServerId' when calling apiBrokerInitDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': brokerTradeServerId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerInitData;

      return this.apiClient.callApi(
        '/api/broker/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get broker initial data
     * @param {String} brokerTradeServerId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */
    apiBrokerInitDataGet(brokerTradeServerId, authorization) {
      return this.apiBrokerInitDataGetWithHttpInfo(brokerTradeServerId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerManagersAccountsOnlineInfoUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/managersAccounts/onlineInfo/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodAccrueProfitsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/accrueProfits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment period
     * @param {String} investmentProgramId 
     * @param {Number} currentBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodClosePostWithHttpInfo(investmentProgramId, currentBalance, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'currentBalance' is set
      if (currentBalance === undefined || currentBalance === null) {
        throw new Error("Missing the required parameter 'currentBalance' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'currentBalance': currentBalance
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment period
     * @param {String} investmentProgramId 
     * @param {Number} currentBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodClosePost(investmentProgramId, currentBalance, authorization) {
      return this.apiBrokerPeriodClosePostWithHttpInfo(investmentProgramId, currentBalance, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment program
     * @param {String} investmentProgramId 
     * @param {Number} managerBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(investmentProgramId, managerBalance, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'managerBalance' is set
      if (managerBalance === undefined || managerBalance === null) {
        throw new Error("Missing the required parameter 'managerBalance' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'managerBalance': managerBalance
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment program
     * @param {String} investmentProgramId 
     * @param {Number} managerBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodProcessClosingProgramPost(investmentProgramId, managerBalance, authorization) {
      return this.apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(investmentProgramId, managerBalance, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Process investment requests
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(investmentProgramId, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/period/processInvestmentRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Process investment requests
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerPeriodProcessInvestmentRequestsPost(investmentProgramId, authorization) {
      return this.apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(investmentProgramId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager token initial price/total supply after loss
     * @param {String} investmentProgramId 
     * @param {Number} investorLossShare 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(investmentProgramId, investorLossShare, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'investorLossShare' is set
      if (investorLossShare === undefined || investorLossShare === null) {
        throw new Error("Missing the required parameter 'investorLossShare' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'investorLossShare': investorLossShare
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/reevaluateManagerToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} investmentProgramId 
     * @param {Number} investorLossShare 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodReevaluateManagerTokenPost(investmentProgramId, investorLossShare, authorization) {
      return this.apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(investmentProgramId, investorLossShare, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodSetStartValuesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/setStartValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Terminate program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodTerminatePostWithHttpInfo(investmentProgramId, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodTerminatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodTerminatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Terminate program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodTerminatePost(investmentProgramId, authorization) {
      return this.apiBrokerPeriodTerminatePostWithHttpInfo(investmentProgramId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get data for closing investment period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */
    apiBrokerPeriodlosingDataGetWithHttpInfo(investmentProgramId, authorization) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodlosingDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodlosingDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClosePeriodData;

      return this.apiClient.callApi(
        '/api/broker/period/сlosingData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get data for closing investment period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */
    apiBrokerPeriodlosingDataGet(investmentProgramId, authorization) {
      return this.apiBrokerPeriodlosingDataGetWithHttpInfo(investmentProgramId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesIpfsHashUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/ipfsHash/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesNewPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * New open trades event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewOpenTradesEvent} opts.trades 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerTradesOpenTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['trades'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesOpenTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/openTrades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New open trades event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewOpenTradesEvent} opts.trades 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerTradesOpenTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesOpenTradesNewPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
