/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorViewModel', 'model/RatesModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorViewModel'), require('../model/RatesModel'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.RateApi = factory(root.CoreApiV10.ApiClient, root.CoreApiV10.ErrorViewModel, root.CoreApiV10.RatesModel);
  }
}(this, function(ApiClient, ErrorViewModel, RatesModel) {
  'use strict';

  /**
   * Rate service.
   * @module api/RateApi
   * @version v1.0
   */

  /**
   * Constructs a new RateApi. 
   * @alias module:api/RateApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get rate
     * @param {String} exchange 
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.v10RateByExchangeByFromByToGetWithHttpInfo = function(exchange, from, to) {
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling v10RateByExchangeByFromByToGet");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v10RateByExchangeByFromByToGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v10RateByExchangeByFromByToGet");
      }


      var pathParams = {
        'exchange': exchange,
        'from': from,
        'to': to
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/rate/{exchange}/{from}/{to}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rate
     * @param {String} exchange 
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.v10RateByExchangeByFromByToGet = function(exchange, from, to) {
      return this.v10RateByExchangeByFromByToGetWithHttpInfo(exchange, from, to)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get rate
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.v10RateByFromByToGetWithHttpInfo = function(from, to) {
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v10RateByFromByToGet");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v10RateByFromByToGet");
      }


      var pathParams = {
        'from': from,
        'to': to
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/rate/{from}/{to}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rate
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.v10RateByFromByToGet = function(from, to) {
      return this.v10RateByFromByToGetWithHttpInfo(from, to)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get rates
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.from 
     * @param {Array.<String>} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RatesModel} and HTTP response
     */
    this.v10RateGetWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'from': {
          value: opts['from'],
          collectionFormat: 'multi'
        },
        'to': {
          value: opts['to'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = RatesModel;

      return this.apiClient.callApi(
        '/v1.0/rate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get rates
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.from 
     * @param {Array.<String>} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RatesModel}
     */
    this.v10RateGet = function(opts) {
      return this.v10RateGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
