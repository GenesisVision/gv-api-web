/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokersInfoOld from '../model/BrokersInfoOld';
import BrokersProgramInfoOld from '../model/BrokersProgramInfoOld';
import ErrorViewModel from '../model/ErrorViewModel';

/**
* Brokers service.
* @class BrokersApi
* @version v1.0
*/
export default class BrokersApi {

    /**
    * Constructs a new BrokersApi. 
    * @function BrokersApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {BrokersApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      getBrokersWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokersInfoOld;

      return this.apiClient.callApi(
        '/v1.0/brokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all trade servers
     * @function BrokersApi#getBrokers
     * @return {CancelablePromise<BrokersInfoOld>} a Promise, with an object containing data of type BrokersInfoOld and HTTP response
     */
      getBrokers() {
      return this.getBrokersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getBrokersForProgramWithHttpInfo(programId) {
      let postBody = null;

      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getBrokersForProgram");
      }


      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokersProgramInfoOld;

      return this.apiClient.callApi(
        '/v1.0/brokers/{programId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get trade servers for program
     * @function BrokersApi#getBrokersForProgram
     * @param {String} programId 
     * @return {CancelablePromise<BrokersProgramInfoOld>} a Promise, with an object containing data of type BrokersProgramInfoOld and HTTP response
     */
      getBrokersForProgram(programId) {
      return this.getBrokersForProgramWithHttpInfo(programId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
