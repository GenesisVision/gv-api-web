/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/errorViewModel";
import { FundWithdrawInfo } from "../model/fundWithdrawInfo";
import { ItemsViewModelAssetInvestmentRequest } from "../model/itemsViewModelAssetInvestmentRequest";
import { ProgramWithdrawInfo } from "../model/programWithdrawInfo";

export class InvestmentsService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public cancelRequest(id: string, authorization: string): CancelablePromise<null>{
    return this.cancelRequestWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelRequestWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling cancelRequest");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelRequest");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/requests/{id}/cancel', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundWithdrawInfo(id: string, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<FundWithdrawInfo>{
    return this.getFundWithdrawInfoWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundWithdrawInfoWithHttpInfo(id: string, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundWithdrawInfo");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundWithdrawInfo;

    return this.apiClient.callApi<FundWithdrawInfo>(
      '/v2.0/investments/funds/{id}/withdraw/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramWithdrawInfo(id: string, authorization: string): CancelablePromise<ProgramWithdrawInfo>{
    return this.getProgramWithdrawInfoWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramWithdrawInfoWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramWithdrawInfo");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramWithdrawInfo;

    return this.apiClient.callApi<ProgramWithdrawInfo>(
      '/v2.0/investments/programs/{id}/withdraw/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRequests(skip: number, take: number, authorization: string): CancelablePromise<ItemsViewModelAssetInvestmentRequest>{
    return this.getRequestsWithHttpInfo(skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRequestsWithHttpInfo(skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getRequests");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getRequests");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getRequests");
    }

    let pathParams = { 
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelAssetInvestmentRequest;

    return this.apiClient.callApi<ItemsViewModelAssetInvestmentRequest>(
      '/v2.0/investments/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRequestsByProgram(id: string, skip: number, take: number, authorization: string): CancelablePromise<ItemsViewModelAssetInvestmentRequest>{
    return this.getRequestsByProgramWithHttpInfo(id, skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRequestsByProgramWithHttpInfo(id: string, skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getRequestsByProgram");
    }
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getRequestsByProgram");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getRequestsByProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getRequestsByProgram");
    }

    let pathParams = { 
      "id": id,
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelAssetInvestmentRequest;

    return this.apiClient.callApi<ItemsViewModelAssetInvestmentRequest>(
      '/v2.0/investments/requests/{id}/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoFund(id: string, authorization: string, opts?: { 
    amount?: number, 
    walletId?: string
  }): CancelablePromise<null>{
    return this.investIntoFundWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoFundWithHttpInfo(id: string, authorization: string, opts: { 
    amount?: number, 
    walletId?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoFund");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "amount": opts["amount"],
      "walletId": opts["walletId"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/funds/{id}/invest', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoProgram(id: string, authorization: string, opts?: { 
    amount?: number, 
    walletId?: string
  }): CancelablePromise<null>{
    return this.investIntoProgramWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoProgramWithHttpInfo(id: string, authorization: string, opts: { 
    amount?: number, 
    walletId?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoProgram");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "amount": opts["amount"],
      "walletId": opts["walletId"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/programs/{id}/invest', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchReinvestOff(id: string, authorization: string): CancelablePromise<null>{
    return this.switchReinvestOffWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchReinvestOffWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling switchReinvestOff");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchReinvestOff");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/programs/{id}/reinvest/off', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchReinvestOn(id: string, authorization: string): CancelablePromise<null>{
    return this.switchReinvestOnWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchReinvestOnWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling switchReinvestOn");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchReinvestOn");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/programs/{id}/reinvest/on', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromFund(id: string, authorization: string, opts?: { 
    percent?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.withdrawFromFundWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromFundWithHttpInfo(id: string, authorization: string, opts: { 
    percent?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromFund");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "percent": opts["percent"],
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/funds/{id}/withdraw', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromProgram(id: string, authorization: string, opts?: { 
    amount?: number, 
    withdrawAll?: boolean
  }): CancelablePromise<null>{
    return this.withdrawFromProgramWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromProgramWithHttpInfo(id: string, authorization: string, opts: { 
    amount?: number, 
    withdrawAll?: boolean
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromProgram");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "amount": opts["amount"],
      "withdrawAll": opts["withdrawAll"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/investments/programs/{id}/withdraw', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
