/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AmountWithCurrency from './AmountWithCurrency';





    /**
     *
     * @interface ProgramStatistic
     */
    
    /**
     *
     * @name ProgramStatistic#balanceBase
     * @type {AmountWithCurrency}
     */
    /**
     *
     * @name ProgramStatistic#balanceGVT
     * @type {AmountWithCurrency}
     */
    /**
     *
     * @name ProgramStatistic#balanceSecondary
     * @type {AmountWithCurrency}
     */
    /**
     *
     * @name ProgramStatistic#currentValue
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#profitPercent
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#profitValue
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#drawdownPercent
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#investorsCount
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#hasNotifications
     * @type {Boolean}
     */
    /**
     *
     * @name ProgramStatistic#startDate
     * @type {Date}
     */
    /**
     *
     * @name ProgramStatistic#startBalance
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#startCurrency
     * @type {("USD"|"USDT"|"ETH"|"Undefined"|"GVT"|"BTC"|"ADA"|"XRP"|"BCH"|"LTC"|"DOGE"|"BNB"|"EUR")}
     */
    /**
     *
     * @name ProgramStatistic#investedAmount
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#investedCurrency
     * @type {("USD"|"USDT"|"ETH"|"Undefined"|"GVT"|"BTC"|"ADA"|"XRP"|"BCH"|"LTC"|"DOGE"|"BNB"|"EUR")}
     */
    /**
     *
     * @name ProgramStatistic#tradesCount
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#tradesSuccessCount
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#profitFactorPercent
     * @type {Number}
     */
    /**
     *
     * @name ProgramStatistic#sharpeRatioPercent
     * @type {Number}
     */





export default class ProgramStatistic {

    constructor() {
        

        
        

        

        
    }

    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProgramStatistic();

            
            
            

            if (data.hasOwnProperty('balanceBase')) {
                obj['balanceBase'] = AmountWithCurrency.constructFromObject(data['balanceBase']);
            }
            if (data.hasOwnProperty('balanceGVT')) {
                obj['balanceGVT'] = AmountWithCurrency.constructFromObject(data['balanceGVT']);
            }
            if (data.hasOwnProperty('balanceSecondary')) {
                obj['balanceSecondary'] = AmountWithCurrency.constructFromObject(data['balanceSecondary']);
            }
            if (data.hasOwnProperty('currentValue')) {
                obj['currentValue'] = ApiClient.convertToType(data['currentValue'], 'Number');
            }
            if (data.hasOwnProperty('profitPercent')) {
                obj['profitPercent'] = ApiClient.convertToType(data['profitPercent'], 'Number');
            }
            if (data.hasOwnProperty('profitValue')) {
                obj['profitValue'] = ApiClient.convertToType(data['profitValue'], 'Number');
            }
            if (data.hasOwnProperty('drawdownPercent')) {
                obj['drawdownPercent'] = ApiClient.convertToType(data['drawdownPercent'], 'Number');
            }
            if (data.hasOwnProperty('investorsCount')) {
                obj['investorsCount'] = ApiClient.convertToType(data['investorsCount'], 'Number');
            }
            if (data.hasOwnProperty('hasNotifications')) {
                obj['hasNotifications'] = ApiClient.convertToType(data['hasNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('startBalance')) {
                obj['startBalance'] = ApiClient.convertToType(data['startBalance'], 'Number');
            }
            if (data.hasOwnProperty('startCurrency')) {
                obj['startCurrency'] = ApiClient.convertToType(data['startCurrency'], 'String');
            }
            if (data.hasOwnProperty('investedAmount')) {
                obj['investedAmount'] = ApiClient.convertToType(data['investedAmount'], 'Number');
            }
            if (data.hasOwnProperty('investedCurrency')) {
                obj['investedCurrency'] = ApiClient.convertToType(data['investedCurrency'], 'String');
            }
            if (data.hasOwnProperty('tradesCount')) {
                obj['tradesCount'] = ApiClient.convertToType(data['tradesCount'], 'Number');
            }
            if (data.hasOwnProperty('tradesSuccessCount')) {
                obj['tradesSuccessCount'] = ApiClient.convertToType(data['tradesSuccessCount'], 'Number');
            }
            if (data.hasOwnProperty('profitFactorPercent')) {
                obj['profitFactorPercent'] = ApiClient.convertToType(data['profitFactorPercent'], 'Number');
            }
            if (data.hasOwnProperty('sharpeRatioPercent')) {
                obj['sharpeRatioPercent'] = ApiClient.convertToType(data['sharpeRatioPercent'], 'Number');
            }
        }
        return obj;
    }

    balanceBase = undefined;
    balanceGVT = undefined;
    balanceSecondary = undefined;
    currentValue = undefined;
    profitPercent = undefined;
    profitValue = undefined;
    drawdownPercent = undefined;
    investorsCount = undefined;
    hasNotifications = undefined;
    startDate = undefined;
    startBalance = undefined;
    startCurrency = undefined;
    investedAmount = undefined;
    investedCurrency = undefined;
    tradesCount = undefined;
    tradesSuccessCount = undefined;
    profitFactorPercent = undefined;
    sharpeRatioPercent = undefined;






    static StartCurrencyEnum = {
    
        "USD": "USD",
    
        "USDT": "USDT",
    
        "ETH": "ETH",
    
        "Undefined": "Undefined",
    
        "GVT": "GVT",
    
        "BTC": "BTC",
    
        "ADA": "ADA",
    
        "XRP": "XRP",
    
        "BCH": "BCH",
    
        "LTC": "LTC",
    
        "DOGE": "DOGE",
    
        "BNB": "BNB",
    
        "EUR": "EUR"    
    };

    static InvestedCurrencyEnum = {
    
        "USD": "USD",
    
        "USDT": "USDT",
    
        "ETH": "ETH",
    
        "Undefined": "Undefined",
    
        "GVT": "GVT",
    
        "BTC": "BTC",
    
        "ADA": "ADA",
    
        "XRP": "XRP",
    
        "BCH": "BCH",
    
        "LTC": "LTC",
    
        "DOGE": "DOGE",
    
        "BNB": "BNB",
    
        "EUR": "EUR"    
    };



}


