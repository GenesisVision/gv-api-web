'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ChangePasswordViewModel = require('../model/ChangePasswordViewModel');

var _ChangePasswordViewModel2 = _interopRequireDefault(_ChangePasswordViewModel);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _ForgotPasswordViewModel = require('../model/ForgotPasswordViewModel');

var _ForgotPasswordViewModel2 = _interopRequireDefault(_ForgotPasswordViewModel);

var _Invest = require('../model/Invest');

var _Invest2 = _interopRequireDefault(_Invest);

var _InvestmentProgramBuyToken = require('../model/InvestmentProgramBuyToken');

var _InvestmentProgramBuyToken2 = _interopRequireDefault(_InvestmentProgramBuyToken);

var _InvestmentProgramRequests = require('../model/InvestmentProgramRequests');

var _InvestmentProgramRequests2 = _interopRequireDefault(_InvestmentProgramRequests);

var _InvestmentProgramRequestsFilter = require('../model/InvestmentProgramRequestsFilter');

var _InvestmentProgramRequestsFilter2 = _interopRequireDefault(_InvestmentProgramRequestsFilter);

var _InvestmentProgramViewModel = require('../model/InvestmentProgramViewModel');

var _InvestmentProgramViewModel2 = _interopRequireDefault(_InvestmentProgramViewModel);

var _InvestmentProgramsFilter = require('../model/InvestmentProgramsFilter');

var _InvestmentProgramsFilter2 = _interopRequireDefault(_InvestmentProgramsFilter);

var _InvestmentProgramsViewModel = require('../model/InvestmentProgramsViewModel');

var _InvestmentProgramsViewModel2 = _interopRequireDefault(_InvestmentProgramsViewModel);

var _InvestorDashboard = require('../model/InvestorDashboard');

var _InvestorDashboard2 = _interopRequireDefault(_InvestorDashboard);

var _LoginViewModel = require('../model/LoginViewModel');

var _LoginViewModel2 = _interopRequireDefault(_LoginViewModel);

var _OpenTradesViewModel = require('../model/OpenTradesViewModel');

var _OpenTradesViewModel2 = _interopRequireDefault(_OpenTradesViewModel);

var _PasswordModel = require('../model/PasswordModel');

var _PasswordModel2 = _interopRequireDefault(_PasswordModel);

var _ProfileFullViewModel = require('../model/ProfileFullViewModel');

var _ProfileFullViewModel2 = _interopRequireDefault(_ProfileFullViewModel);

var _ProfilePublicViewModel = require('../model/ProfilePublicViewModel');

var _ProfilePublicViewModel2 = _interopRequireDefault(_ProfilePublicViewModel);

var _RecoveryCodesViewModel = require('../model/RecoveryCodesViewModel');

var _RecoveryCodesViewModel2 = _interopRequireDefault(_RecoveryCodesViewModel);

var _RegisterInvestorViewModel = require('../model/RegisterInvestorViewModel');

var _RegisterInvestorViewModel2 = _interopRequireDefault(_RegisterInvestorViewModel);

var _ResetPasswordViewModel = require('../model/ResetPasswordViewModel');

var _ResetPasswordViewModel2 = _interopRequireDefault(_ResetPasswordViewModel);

var _TradesChartViewModel = require('../model/TradesChartViewModel');

var _TradesChartViewModel2 = _interopRequireDefault(_TradesChartViewModel);

var _TradesFilter = require('../model/TradesFilter');

var _TradesFilter2 = _interopRequireDefault(_TradesFilter);

var _TradesViewModel = require('../model/TradesViewModel');

var _TradesViewModel2 = _interopRequireDefault(_TradesViewModel);

var _TransactionsFilter = require('../model/TransactionsFilter');

var _TransactionsFilter2 = _interopRequireDefault(_TransactionsFilter);

var _TwoFactorAuthenticator = require('../model/TwoFactorAuthenticator');

var _TwoFactorAuthenticator2 = _interopRequireDefault(_TwoFactorAuthenticator);

var _TwoFactorAuthenticatorConfirm = require('../model/TwoFactorAuthenticatorConfirm');

var _TwoFactorAuthenticatorConfirm2 = _interopRequireDefault(_TwoFactorAuthenticatorConfirm);

var _TwoFactorStatus = require('../model/TwoFactorStatus');

var _TwoFactorStatus2 = _interopRequireDefault(_TwoFactorStatus);

var _UpdateProfileViewModel = require('../model/UpdateProfileViewModel');

var _UpdateProfileViewModel2 = _interopRequireDefault(_UpdateProfileViewModel);

var _WalletAddressViewModel = require('../model/WalletAddressViewModel');

var _WalletAddressViewModel2 = _interopRequireDefault(_WalletAddressViewModel);

var _WalletInvestmentPrograms = require('../model/WalletInvestmentPrograms');

var _WalletInvestmentPrograms2 = _interopRequireDefault(_WalletInvestmentPrograms);

var _WalletStatistic = require('../model/WalletStatistic');

var _WalletStatistic2 = _interopRequireDefault(_WalletStatistic);

var _WalletStatisticFilter = require('../model/WalletStatisticFilter');

var _WalletStatisticFilter2 = _interopRequireDefault(_WalletStatisticFilter);

var _WalletTransactionsViewModel = require('../model/WalletTransactionsViewModel');

var _WalletTransactionsViewModel2 = _interopRequireDefault(_WalletTransactionsViewModel);

var _WalletWithdrawRequestModel = require('../model/WalletWithdrawRequestModel');

var _WalletWithdrawRequestModel2 = _interopRequireDefault(_WalletWithdrawRequestModel);

var _WalletsViewModel = require('../model/WalletsViewModel');

var _WalletsViewModel2 = _interopRequireDefault(_WalletsViewModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Investor service.
* @module api/InvestorApi
* @version v1
*/
var InvestorApi = function () {

  /**
  * Constructs a new InvestorApi. 
  * @alias module:api/InvestorApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function InvestorApi(apiClient) {
    _classCallCheck(this, InvestorApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Callback function to receive the result of the apiInvestorAuth2faConfirmPost operation.
   * @callback module:api/InvestorApi~apiInvestorAuth2faConfirmPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * 2FA confirm
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
   * @param {module:api/InvestorApi~apiInvestorAuth2faConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/RecoveryCodesViewModel}
   */


  _createClass(InvestorApi, [{
    key: 'apiInvestorAuth2faConfirmPost',
    value: function apiInvestorAuth2faConfirmPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faConfirmPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/confirm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faCreatePost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorAuthenticator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorAuthenticator}
     */

  }, {
    key: 'apiInvestorAuth2faCreatePost',
    value: function apiInvestorAuth2faCreatePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorAuthenticator2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faDisablePost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorAuth2faDisablePost',
    value: function apiInvestorAuth2faDisablePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faDisablePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/2fa/disable', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faGet operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorAuth2faGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorStatus}
     */

  }, {
    key: 'apiInvestorAuth2faGet',
    value: function apiInvestorAuth2faGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorStatus2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faRecoveryCodesNewPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesNewPost',
    value: function apiInvestorAuth2faRecoveryCodesNewPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/recoveryCodes/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faRecoveryCodesPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesPost',
    value: function apiInvestorAuth2faRecoveryCodesPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/recoveryCodes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthChangePasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorAuthChangePasswordPost',
    value: function apiInvestorAuthChangePasswordPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthChangePasswordPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/changePassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthConfirmEmailPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthConfirmEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/InvestorApi~apiInvestorAuthConfirmEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthConfirmEmailPost',
    value: function apiInvestorAuthConfirmEmailPost(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/confirmEmail', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthForgotPasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password investor
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorAuthForgotPasswordPost',
    value: function apiInvestorAuthForgotPasswordPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/forgotPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthResetPasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthResetPasswordPost',
    value: function apiInvestorAuthResetPasswordPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/resetPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthSignInPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthSignInPost',
    value: function apiInvestorAuthSignInPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/signIn', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthSignUpPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthSignUpPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new investor
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterInvestorViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthSignUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorAuthSignUpPost',
    value: function apiInvestorAuthSignUpPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/signUp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthUpdateTokenGet operation.
     * @callback module:api/InvestorApi~apiInvestorAuthUpdateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorAuthUpdateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthUpdateTokenGet',
    value: function apiInvestorAuthUpdateTokenGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthUpdateTokenGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/updateToken', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorDashboardGet operation.
     * @callback module:api/InvestorApi~apiInvestorDashboardGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorDashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investor dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.equityChartLength 
     * @param {module:api/InvestorApi~apiInvestorDashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorDashboard}
     */

  }, {
    key: 'apiInvestorDashboardGet',
    value: function apiInvestorDashboardGet(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorDashboardGet");
      }

      var pathParams = {};
      var queryParams = {
        'Sorting': opts['sorting'],
        'EquityChartLength': opts['equityChartLength']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestorDashboard2.default;

      return this.apiClient.callApi('/api/investor/dashboard', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramBuyTokensGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramBuyTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramBuyToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramBuyTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramBuyToken}
     */

  }, {
    key: 'apiInvestorInvestmentProgramBuyTokensGet',
    value: function apiInvestorInvestmentProgramBuyTokensGet(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramBuyToken2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/buyTokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramEquityChartGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramEquityChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramEquityChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramEquityChartGet',
    value: function apiInvestorInvestmentProgramEquityChartGet(investmentProgramId, timeFrame, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramEquityChartGet");
      }

      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling apiInvestorInvestmentProgramEquityChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'timeFrame': timeFrame
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/equity/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramGet',
    value: function apiInvestorInvestmentProgramGet(investmentProgramId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramOpenTradesPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramOpenTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenTradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramOpenTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenTradesViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramOpenTradesPost',
    value: function apiInvestorInvestmentProgramOpenTradesPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramOpenTradesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _OpenTradesViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/openTrades', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramRequestsPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramRequests}
     */

  }, {
    key: 'apiInvestorInvestmentProgramRequestsPost',
    value: function apiInvestorInvestmentProgramRequestsPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramRequestsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramRequests2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramTradesChartGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramTradesChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramTradesChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesChartGet',
    value: function apiInvestorInvestmentProgramTradesChartGet(investmentProgramId, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramTradesChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'InvestmentProgramId': investmentProgramId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/trades/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramTradesPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesPost',
    value: function apiInvestorInvestmentProgramTradesPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/trades', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsCancelInvestmentRequestPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsCancelInvestmentRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsCancelInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsCancelInvestmentRequestPost',
    value: function apiInvestorInvestmentProgramsCancelInvestmentRequestPost(requestId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }

      var pathParams = {};
      var queryParams = {
        'requestId': requestId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/cancelInvestmentRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsFavoritesAddPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesAddPost',
    value: function apiInvestorInvestmentProgramsFavoritesAddPost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/favorites/add', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsFavoritesRemovePost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesRemovePost',
    value: function apiInvestorInvestmentProgramsFavoritesRemovePost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/favorites/remove', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsInvestPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsInvestPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invest in manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsInvestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsInvestPost',
    value: function apiInvestorInvestmentProgramsInvestPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsInvestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletsViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentPrograms/invest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramsViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsPost',
    value: function apiInvestorInvestmentProgramsPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramsViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentPrograms', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsWithdrawPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsWithdrawPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw from investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsWithdrawPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsWithdrawPost',
    value: function apiInvestorInvestmentProgramsWithdrawPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsWithdrawPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/withdraw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorProfileFullGet operation.
     * @callback module:api/InvestorApi~apiInvestorProfileFullGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileFullViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorProfileFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileFullViewModel}
     */

  }, {
    key: 'apiInvestorProfileFullGet',
    value: function apiInvestorProfileFullGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileFullGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfileFullViewModel2.default;

      return this.apiClient.callApi('/api/investor/profile/full', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorProfilePublicGet operation.
     * @callback module:api/InvestorApi~apiInvestorProfilePublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePublicViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public profile
     * @param {String} userId 
     * @param {module:api/InvestorApi~apiInvestorProfilePublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePublicViewModel}
     */

  }, {
    key: 'apiInvestorProfilePublicGet',
    value: function apiInvestorProfilePublicGet(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiInvestorProfilePublicGet");
      }

      var pathParams = {};
      var queryParams = {
        'userId': userId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfilePublicViewModel2.default;

      return this.apiClient.callApi('/api/investor/profile/public', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorProfileUpdatePost operation.
     * @callback module:api/InvestorApi~apiInvestorProfileUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorProfileUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorProfileUpdatePost',
    value: function apiInvestorProfileUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/profile/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletAddressGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletAddressViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorWalletAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletAddressViewModel}
     */

  }, {
    key: 'apiInvestorWalletAddressGet',
    value: function apiInvestorWalletAddressGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletAddressGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletAddressViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet/address', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorWalletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */

  }, {
    key: 'apiInvestorWalletGet',
    value: function apiInvestorWalletGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletsViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletStatisticPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletStatisticPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorWalletStatisticPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletStatistic}
     */

  }, {
    key: 'apiInvestorWalletStatisticPost',
    value: function apiInvestorWalletStatisticPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletStatisticPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletStatistic2.default;

      return this.apiClient.callApi('/api/investor/wallet/statistic', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletTransactionsInvestmentProgramsListGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletTransactionsInvestmentProgramsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @param {module:api/InvestorApi~apiInvestorWalletTransactionsInvestmentProgramsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletInvestmentPrograms}
     */

  }, {
    key: 'apiInvestorWalletTransactionsInvestmentProgramsListGet',
    value: function apiInvestorWalletTransactionsInvestmentProgramsListGet(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsInvestmentProgramsListGet");
      }

      var pathParams = {};
      var queryParams = {
        'mask': opts['mask']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletInvestmentPrograms2.default;

      return this.apiClient.callApi('/api/investor/wallet/transactions/investmentProgramsList', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletTransactionsPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorWalletTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionsViewModel}
     */

  }, {
    key: 'apiInvestorWalletTransactionsPost',
    value: function apiInvestorWalletTransactionsPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletTransactionsViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet/transactions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletWithdrawRequestPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletWithdrawRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @param {module:api/InvestorApi~apiInvestorWalletWithdrawRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiInvestorWalletWithdrawRequestPost',
    value: function apiInvestorWalletWithdrawRequestPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletWithdrawRequestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/wallet/withdrawRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
  }]);

  return InvestorApi;
}();

exports.default = InvestorApi;