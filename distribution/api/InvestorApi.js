'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
penAPI spec version: v1


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ChangePasswordViewModel = require('../model/ChangePasswordViewModel');

var _ChangePasswordViewModel2 = _interopRequireDefault(_ChangePasswordViewModel);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _ForgotPasswordViewModel = require('../model/ForgotPasswordViewModel');

var _ForgotPasswordViewModel2 = _interopRequireDefault(_ForgotPasswordViewModel);

var _Invest = require('../model/Invest');

var _Invest2 = _interopRequireDefault(_Invest);

var _InvestmentProgramBuyToken = require('../model/InvestmentProgramBuyToken');

var _InvestmentProgramBuyToken2 = _interopRequireDefault(_InvestmentProgramBuyToken);

var _InvestmentProgramRequests = require('../model/InvestmentProgramRequests');

var _InvestmentProgramRequests2 = _interopRequireDefault(_InvestmentProgramRequests);

var _InvestmentProgramRequestsFilter = require('../model/InvestmentProgramRequestsFilter');

var _InvestmentProgramRequestsFilter2 = _interopRequireDefault(_InvestmentProgramRequestsFilter);

var _InvestmentProgramViewModel = require('../model/InvestmentProgramViewModel');

var _InvestmentProgramViewModel2 = _interopRequireDefault(_InvestmentProgramViewModel);

var _InvestmentProgramsFilter = require('../model/InvestmentProgramsFilter');

var _InvestmentProgramsFilter2 = _interopRequireDefault(_InvestmentProgramsFilter);

var _InvestmentProgramsViewModel = require('../model/InvestmentProgramsViewModel');

var _InvestmentProgramsViewModel2 = _interopRequireDefault(_InvestmentProgramsViewModel);

var _InvestorDashboard = require('../model/InvestorDashboard');

var _InvestorDashboard2 = _interopRequireDefault(_InvestorDashboard);

var _LoginViewModel = require('../model/LoginViewModel');

var _LoginViewModel2 = _interopRequireDefault(_LoginViewModel);

var _OpenTradesViewModel = require('../model/OpenTradesViewModel');

var _OpenTradesViewModel2 = _interopRequireDefault(_OpenTradesViewModel);

var _PasswordModel = require('../model/PasswordModel');

var _PasswordModel2 = _interopRequireDefault(_PasswordModel);

var _ProfileFullViewModel = require('../model/ProfileFullViewModel');

var _ProfileFullViewModel2 = _interopRequireDefault(_ProfileFullViewModel);

var _ProfilePublicViewModel = require('../model/ProfilePublicViewModel');

var _ProfilePublicViewModel2 = _interopRequireDefault(_ProfilePublicViewModel);

var _RecoveryCodesViewModel = require('../model/RecoveryCodesViewModel');

var _RecoveryCodesViewModel2 = _interopRequireDefault(_RecoveryCodesViewModel);

var _RegisterInvestorViewModel = require('../model/RegisterInvestorViewModel');

var _RegisterInvestorViewModel2 = _interopRequireDefault(_RegisterInvestorViewModel);

var _ResetPasswordViewModel = require('../model/ResetPasswordViewModel');

var _ResetPasswordViewModel2 = _interopRequireDefault(_ResetPasswordViewModel);

var _TradesChartViewModel = require('../model/TradesChartViewModel');

var _TradesChartViewModel2 = _interopRequireDefault(_TradesChartViewModel);

var _TradesFilter = require('../model/TradesFilter');

var _TradesFilter2 = _interopRequireDefault(_TradesFilter);

var _TradesViewModel = require('../model/TradesViewModel');

var _TradesViewModel2 = _interopRequireDefault(_TradesViewModel);

var _TransactionsFilter = require('../model/TransactionsFilter');

var _TransactionsFilter2 = _interopRequireDefault(_TransactionsFilter);

var _TwoFactorAuthenticator = require('../model/TwoFactorAuthenticator');

var _TwoFactorAuthenticator2 = _interopRequireDefault(_TwoFactorAuthenticator);

var _TwoFactorAuthenticatorConfirm = require('../model/TwoFactorAuthenticatorConfirm');

var _TwoFactorAuthenticatorConfirm2 = _interopRequireDefault(_TwoFactorAuthenticatorConfirm);

var _TwoFactorStatus = require('../model/TwoFactorStatus');

var _TwoFactorStatus2 = _interopRequireDefault(_TwoFactorStatus);

var _UpdateProfileViewModel = require('../model/UpdateProfileViewModel');

var _UpdateProfileViewModel2 = _interopRequireDefault(_UpdateProfileViewModel);

var _WalletAddressViewModel = require('../model/WalletAddressViewModel');

var _WalletAddressViewModel2 = _interopRequireDefault(_WalletAddressViewModel);

var _WalletInvestmentPrograms = require('../model/WalletInvestmentPrograms');

var _WalletInvestmentPrograms2 = _interopRequireDefault(_WalletInvestmentPrograms);

var _WalletStatistic = require('../model/WalletStatistic');

var _WalletStatistic2 = _interopRequireDefault(_WalletStatistic);

var _WalletStatisticFilter = require('../model/WalletStatisticFilter');

var _WalletStatisticFilter2 = _interopRequireDefault(_WalletStatisticFilter);

var _WalletTransactionsViewModel = require('../model/WalletTransactionsViewModel');

var _WalletTransactionsViewModel2 = _interopRequireDefault(_WalletTransactionsViewModel);

var _WalletWithdrawRequestModel = require('../model/WalletWithdrawRequestModel');

var _WalletWithdrawRequestModel2 = _interopRequireDefault(_WalletWithdrawRequestModel);

var _WalletsViewModel = require('../model/WalletsViewModel');

var _WalletsViewModel2 = _interopRequireDefault(_WalletsViewModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Investor service.
* @module api/InvestorApi
* @version v1
*/
var InvestorApi = function () {

  /**
  * Constructs a new InvestorApi. 
  * @alias module:api/InvestorApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function InvestorApi(apiClient) {
    _classCallCheck(this, InvestorApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * 2FA confirm
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecoveryCodesViewModel} and HTTP response
   */


  _createClass(InvestorApi, [{
    key: 'apiInvestorAuth2faConfirmPostWithHttpInfo',
    value: function apiInvestorAuth2faConfirmPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faConfirmPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/confirm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA confirm
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiInvestorAuth2faConfirmPost',
    value: function apiInvestorAuth2faConfirmPost(authorization, opts) {
      return this.apiInvestorAuth2faConfirmPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TwoFactorAuthenticator} and HTTP response
     */

  }, {
    key: 'apiInvestorAuth2faCreatePostWithHttpInfo',
    value: function apiInvestorAuth2faCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorAuthenticator2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TwoFactorAuthenticator}
     */

  }, {
    key: 'apiInvestorAuth2faCreatePost',
    value: function apiInvestorAuth2faCreatePost(authorization, opts) {
      return this.apiInvestorAuth2faCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorAuth2faDisablePostWithHttpInfo',
    value: function apiInvestorAuth2faDisablePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faDisablePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/2fa/disable', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorAuth2faDisablePost',
    value: function apiInvestorAuth2faDisablePost(authorization, opts) {
      return this.apiInvestorAuth2faDisablePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TwoFactorStatus} and HTTP response
     */

  }, {
    key: 'apiInvestorAuth2faGetWithHttpInfo',
    value: function apiInvestorAuth2faGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorStatus2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TwoFactorStatus}
     */

  }, {
    key: 'apiInvestorAuth2faGet',
    value: function apiInvestorAuth2faGet(authorization) {
      return this.apiInvestorAuth2faGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecoveryCodesViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesNewPostWithHttpInfo',
    value: function apiInvestorAuth2faRecoveryCodesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/recoveryCodes/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesNewPost',
    value: function apiInvestorAuth2faRecoveryCodesNewPost(authorization, opts) {
      return this.apiInvestorAuth2faRecoveryCodesNewPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RecoveryCodesViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesPostWithHttpInfo',
    value: function apiInvestorAuth2faRecoveryCodesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/investor/auth/2fa/recoveryCodes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiInvestorAuth2faRecoveryCodesPost',
    value: function apiInvestorAuth2faRecoveryCodesPost(authorization, opts) {
      return this.apiInvestorAuth2faRecoveryCodesPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorAuthChangePasswordPostWithHttpInfo',
    value: function apiInvestorAuthChangePasswordPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthChangePasswordPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/changePassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorAuthChangePasswordPost',
    value: function apiInvestorAuthChangePasswordPost(authorization, opts) {
      return this.apiInvestorAuthChangePasswordPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiInvestorAuthConfirmEmailPostWithHttpInfo',
    value: function apiInvestorAuthConfirmEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/confirmEmail', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthConfirmEmailPost',
    value: function apiInvestorAuthConfirmEmailPost(opts) {
      return this.apiInvestorAuthConfirmEmailPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Forgot password investor
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorAuthForgotPasswordPostWithHttpInfo',
    value: function apiInvestorAuthForgotPasswordPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/forgotPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Forgot password investor
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorAuthForgotPasswordPost',
    value: function apiInvestorAuthForgotPasswordPost(opts) {
      return this.apiInvestorAuthForgotPasswordPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiInvestorAuthResetPasswordPostWithHttpInfo',
    value: function apiInvestorAuthResetPasswordPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/resetPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthResetPasswordPost',
    value: function apiInvestorAuthResetPasswordPost(opts) {
      return this.apiInvestorAuthResetPasswordPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiInvestorAuthSignInPostWithHttpInfo',
    value: function apiInvestorAuthSignInPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/signIn', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthSignInPost',
    value: function apiInvestorAuthSignInPost(opts) {
      return this.apiInvestorAuthSignInPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Register new investor
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterInvestorViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorAuthSignUpPostWithHttpInfo',
    value: function apiInvestorAuthSignUpPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/auth/signUp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Register new investor
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterInvestorViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorAuthSignUpPost',
    value: function apiInvestorAuthSignUpPost(opts) {
      return this.apiInvestorAuthSignUpPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiInvestorAuthUpdateTokenGetWithHttpInfo',
    value: function apiInvestorAuthUpdateTokenGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthUpdateTokenGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/investor/auth/updateToken', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiInvestorAuthUpdateTokenGet',
    value: function apiInvestorAuthUpdateTokenGet(authorization) {
      return this.apiInvestorAuthUpdateTokenGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investor dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.equityChartLength 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestorDashboard} and HTTP response
     */

  }, {
    key: 'apiInvestorDashboardGetWithHttpInfo',
    value: function apiInvestorDashboardGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorDashboardGet");
      }

      var pathParams = {};
      var queryParams = {
        'Sorting': opts['sorting'],
        'EquityChartLength': opts['equityChartLength']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestorDashboard2.default;

      return this.apiClient.callApi('/api/investor/dashboard', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investor dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.equityChartLength 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestorDashboard}
     */

  }, {
    key: 'apiInvestorDashboardGet',
    value: function apiInvestorDashboardGet(authorization, opts) {
      return this.apiInvestorDashboardGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentProgramBuyToken} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramBuyTokensGetWithHttpInfo',
    value: function apiInvestorInvestmentProgramBuyTokensGetWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramBuyToken2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/buyTokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestmentProgramBuyToken}
     */

  }, {
    key: 'apiInvestorInvestmentProgramBuyTokensGet',
    value: function apiInvestorInvestmentProgramBuyTokensGet(investmentProgramId, authorization) {
      return this.apiInvestorInvestmentProgramBuyTokensGetWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesChartViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramEquityChartGetWithHttpInfo',
    value: function apiInvestorInvestmentProgramEquityChartGetWithHttpInfo(investmentProgramId, timeFrame) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramEquityChartGet");
      }

      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling apiInvestorInvestmentProgramEquityChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'timeFrame': timeFrame
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/equity/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramEquityChartGet',
    value: function apiInvestorInvestmentProgramEquityChartGet(investmentProgramId, timeFrame) {
      return this.apiInvestorInvestmentProgramEquityChartGetWithHttpInfo(investmentProgramId, timeFrame).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentProgramViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramGetWithHttpInfo',
    value: function apiInvestorInvestmentProgramGetWithHttpInfo(investmentProgramId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestmentProgramViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramGet',
    value: function apiInvestorInvestmentProgramGet(investmentProgramId, opts) {
      return this.apiInvestorInvestmentProgramGetWithHttpInfo(investmentProgramId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get manager open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenTradesViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramOpenTradesPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramOpenTradesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramOpenTradesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _OpenTradesViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/openTrades', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get manager open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenTradesViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramOpenTradesPost',
    value: function apiInvestorInvestmentProgramOpenTradesPost(authorization, opts) {
      return this.apiInvestorInvestmentProgramOpenTradesPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentProgramRequests} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramRequestsPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramRequestsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramRequestsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramRequests2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestmentProgramRequests}
     */

  }, {
    key: 'apiInvestorInvestmentProgramRequestsPost',
    value: function apiInvestorInvestmentProgramRequestsPost(authorization, opts) {
      return this.apiInvestorInvestmentProgramRequestsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesChartViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesChartGetWithHttpInfo',
    value: function apiInvestorInvestmentProgramTradesChartGetWithHttpInfo(investmentProgramId) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramTradesChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'InvestmentProgramId': investmentProgramId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/trades/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesChartGet',
    value: function apiInvestorInvestmentProgramTradesChartGet(investmentProgramId) {
      return this.apiInvestorInvestmentProgramTradesChartGetWithHttpInfo(investmentProgramId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramTradesPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentProgram/trades', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramTradesPost',
    value: function apiInvestorInvestmentProgramTradesPost(opts) {
      return this.apiInvestorInvestmentProgramTradesPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsCancelInvestmentRequestPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsCancelInvestmentRequestPostWithHttpInfo(requestId, authorization) {
      var postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }

      var pathParams = {};
      var queryParams = {
        'requestId': requestId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/cancelInvestmentRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsCancelInvestmentRequestPost',
    value: function apiInvestorInvestmentProgramsCancelInvestmentRequestPost(requestId, authorization) {
      return this.apiInvestorInvestmentProgramsCancelInvestmentRequestPostWithHttpInfo(requestId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesAddPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsFavoritesAddPostWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/favorites/add', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesAddPost',
    value: function apiInvestorInvestmentProgramsFavoritesAddPost(investmentProgramId, authorization) {
      return this.apiInvestorInvestmentProgramsFavoritesAddPostWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesRemovePostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsFavoritesRemovePostWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/favorites/remove', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsFavoritesRemovePost',
    value: function apiInvestorInvestmentProgramsFavoritesRemovePost(investmentProgramId, authorization) {
      return this.apiInvestorInvestmentProgramsFavoritesRemovePostWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Invest in manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletsViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsInvestPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsInvestPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsInvestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletsViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentPrograms/invest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Invest in manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletsViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsInvestPost',
    value: function apiInvestorInvestmentProgramsInvestPost(authorization, opts) {
      return this.apiInvestorInvestmentProgramsInvestPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentProgramsViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramsViewModel2.default;

      return this.apiClient.callApi('/api/investor/investmentPrograms', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestmentProgramsViewModel}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsPost',
    value: function apiInvestorInvestmentProgramsPost(opts) {
      return this.apiInvestorInvestmentProgramsPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Withdraw from investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorInvestmentProgramsWithdrawPostWithHttpInfo',
    value: function apiInvestorInvestmentProgramsWithdrawPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsWithdrawPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/investmentPrograms/withdraw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw from investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorInvestmentProgramsWithdrawPost',
    value: function apiInvestorInvestmentProgramsWithdrawPost(authorization, opts) {
      return this.apiInvestorInvestmentProgramsWithdrawPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProfileFullViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorProfileFullGetWithHttpInfo',
    value: function apiInvestorProfileFullGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileFullGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfileFullViewModel2.default;

      return this.apiClient.callApi('/api/investor/profile/full', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProfileFullViewModel}
     */

  }, {
    key: 'apiInvestorProfileFullGet',
    value: function apiInvestorProfileFullGet(authorization) {
      return this.apiInvestorProfileFullGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get public profile
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProfilePublicViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorProfilePublicGetWithHttpInfo',
    value: function apiInvestorProfilePublicGetWithHttpInfo(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiInvestorProfilePublicGet");
      }

      var pathParams = {};
      var queryParams = {
        'userId': userId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfilePublicViewModel2.default;

      return this.apiClient.callApi('/api/investor/profile/public', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get public profile
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProfilePublicViewModel}
     */

  }, {
    key: 'apiInvestorProfilePublicGet',
    value: function apiInvestorProfilePublicGet(userId) {
      return this.apiInvestorProfilePublicGetWithHttpInfo(userId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorProfileUpdatePostWithHttpInfo',
    value: function apiInvestorProfileUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/profile/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorProfileUpdatePost',
    value: function apiInvestorProfileUpdatePost(authorization, opts) {
      return this.apiInvestorProfileUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletAddressViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorWalletAddressGetWithHttpInfo',
    value: function apiInvestorWalletAddressGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletAddressGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletAddressViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet/address', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletAddressViewModel}
     */

  }, {
    key: 'apiInvestorWalletAddressGet',
    value: function apiInvestorWalletAddressGet(authorization) {
      return this.apiInvestorWalletAddressGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletsViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorWalletGetWithHttpInfo',
    value: function apiInvestorWalletGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletsViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletsViewModel}
     */

  }, {
    key: 'apiInvestorWalletGet',
    value: function apiInvestorWalletGet(authorization) {
      return this.apiInvestorWalletGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletStatistic} and HTTP response
     */

  }, {
    key: 'apiInvestorWalletStatisticPostWithHttpInfo',
    value: function apiInvestorWalletStatisticPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletStatisticPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletStatistic2.default;

      return this.apiClient.callApi('/api/investor/wallet/statistic', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletStatistic}
     */

  }, {
    key: 'apiInvestorWalletStatisticPost',
    value: function apiInvestorWalletStatisticPost(authorization, opts) {
      return this.apiInvestorWalletStatisticPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInvestmentPrograms} and HTTP response
     */

  }, {
    key: 'apiInvestorWalletTransactionsInvestmentProgramsListGetWithHttpInfo',
    value: function apiInvestorWalletTransactionsInvestmentProgramsListGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsInvestmentProgramsListGet");
      }

      var pathParams = {};
      var queryParams = {
        'mask': opts['mask']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletInvestmentPrograms2.default;

      return this.apiClient.callApi('/api/investor/wallet/transactions/investmentProgramsList', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInvestmentPrograms}
     */

  }, {
    key: 'apiInvestorWalletTransactionsInvestmentProgramsListGet',
    value: function apiInvestorWalletTransactionsInvestmentProgramsListGet(authorization, opts) {
      return this.apiInvestorWalletTransactionsInvestmentProgramsListGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletTransactionsViewModel} and HTTP response
     */

  }, {
    key: 'apiInvestorWalletTransactionsPostWithHttpInfo',
    value: function apiInvestorWalletTransactionsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletTransactionsViewModel2.default;

      return this.apiClient.callApi('/api/investor/wallet/transactions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletTransactionsViewModel}
     */

  }, {
    key: 'apiInvestorWalletTransactionsPost',
    value: function apiInvestorWalletTransactionsPost(authorization, opts) {
      return this.apiInvestorWalletTransactionsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiInvestorWalletWithdrawRequestPostWithHttpInfo',
    value: function apiInvestorWalletWithdrawRequestPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletWithdrawRequestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/investor/wallet/withdrawRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiInvestorWalletWithdrawRequestPost',
    value: function apiInvestorWalletWithdrawRequestPost(authorization, opts) {
      return this.apiInvestorWalletWithdrawRequestPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return InvestorApi;
}();

exports.default = InvestorApi;