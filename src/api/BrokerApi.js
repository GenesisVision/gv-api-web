/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokerInitData from '../model/BrokerInitData';
import BrokerOefInitData from '../model/BrokerOefInitData';
import ClosePeriodData from '../model/ClosePeriodData';
import ErrorViewModel from '../model/ErrorViewModel';
import InvestmentProgramAccrual from '../model/InvestmentProgramAccrual';
import ManagerAccountOnlineInfo from '../model/ManagerAccountOnlineInfo';
import ManagerHistoryIpfsHash from '../model/ManagerHistoryIpfsHash';
import NewManager from '../model/NewManager';
import NewTradeEvent from '../model/NewTradeEvent';
import PlatformAssets from '../model/PlatformAssets';
import StartValues from '../model/StartValues';
import UsersRealAssets from '../model/UsersRealAssets';

/**
* Broker service.
* @module api/BrokerApi
* @version v1.0
*/
export default class BrokerApi {

    /**
    * Constructs a new BrokerApi. 
    * @alias module:api/BrokerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    v10BrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerAccountCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/broker/account/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    v10BrokerAccountCreatePost(authorization, opts) {
      return this.v10BrokerAccountCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    v10BrokerAccountOefCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerAccountOefCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'requestId': opts['requestId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/broker/account/oef/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    v10BrokerAccountOefCreatePost(authorization, opts) {
      return this.v10BrokerAccountOefCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    v10BrokerFreeaddressesGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerFreeaddressesGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/v1.0/broker/freeaddresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    v10BrokerFreeaddressesGet(authorization) {
      return this.v10BrokerFreeaddressesGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */
    v10BrokerInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerInitData;

      return this.apiClient.callApi(
        '/v1.0/broker/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */
    v10BrokerInitDataGet(authorization, opts) {
      return this.v10BrokerInitDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerManagersAccountsOnlineInfoUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/managersAccounts/onlineInfo/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.v10BrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all supported assets for OEFs
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlatformAssets} and HTTP response
     */
    v10BrokerOefAssetAllGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefAssetAllGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PlatformAssets;

      return this.apiClient.callApi(
        '/v1.0/broker/oef/asset/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all supported assets for OEFs
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlatformAssets}
     */
    v10BrokerOefAssetAllGet(authorization) {
      return this.v10BrokerOefAssetAllGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersRealAssets} and HTTP response
     */
    v10BrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefGetRealAssetsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UsersRealAssets;

      return this.apiClient.callApi(
        '/v1.0/broker/oef/getRealAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersRealAssets}
     */
    v10BrokerOefGetRealAssetsGet(authorization, opts) {
      return this.v10BrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerOefInitData} and HTTP response
     */
    v10BrokerOefInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerOefInitData;

      return this.apiClient.callApi(
        '/v1.0/broker/oef/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerOefInitData}
     */
    v10BrokerOefInitDataGet(authorization, opts) {
      return this.v10BrokerOefInitDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['assets'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefSetRealAssetsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/oef/setRealAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerOefSetRealAssetsPost(authorization, opts) {
      return this.v10BrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodAccrueProfitsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/accrueProfits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.v10BrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodClosePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'currentBalance': opts['currentBalance']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodClosePost(authorization, opts) {
      return this.v10BrokerPeriodClosePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefApplyAssetPartsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'assetsRequestId': opts['assetsRequestId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/oef/applyAssetParts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodOefApplyAssetPartsPost(authorization, opts) {
      return this.v10BrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/oef/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodOefProcessClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefProcessForceClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/oef/processForceClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodOefProcessForceClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodProcessClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    v10BrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodProcessInvestmentRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/broker/period/processInvestmentRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    v10BrokerPeriodProcessInvestmentRequestsPost(authorization, opts) {
      return this.v10BrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodReevaluateManagerTokenPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'investorLossShare': opts['investorLossShare']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/reevaluateManagerToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodReevaluateManagerTokenPost(authorization, opts) {
      return this.v10BrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodSetStartValuesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/setStartValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.v10BrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerPeriodTerminatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodTerminatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/period/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerPeriodTerminatePost(authorization, opts) {
      return this.v10BrokerPeriodTerminatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */
    v10BrokerPeriodlosingDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodlosingDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClosePeriodData;

      return this.apiClient.callApi(
        '/v1.0/broker/period/сlosingData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */
    v10BrokerPeriodlosingDataGet(authorization, opts) {
      return this.v10BrokerPeriodlosingDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    v10BrokerTradehistoryGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradehistoryGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/v1.0/broker/tradehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    v10BrokerTradehistoryGet(authorization, opts) {
      return this.v10BrokerTradehistoryGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradesIpfsHashUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/trades/ipfsHash/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.v10BrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10BrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/broker/trades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10BrokerTradesNewPost(authorization, opts) {
      return this.v10BrokerTradesNewPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
