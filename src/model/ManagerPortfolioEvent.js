/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.ManagerPortfolioEvent = factory(root.CoreApiV10.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ManagerPortfolioEvent model module.
   * @module model/ManagerPortfolioEvent
   * @version v1.0
   */

  /**
   * Constructs a new <code>ManagerPortfolioEvent</code>.
   * @alias module:model/ManagerPortfolioEvent
   * @class
   */
  var exports = function() {
    var _this = this;















  };

  /**
   * Constructs a <code>ManagerPortfolioEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ManagerPortfolioEvent} obj Optional instance to populate.
   * @return {module:model/ManagerPortfolioEvent} The populated <code>ManagerPortfolioEvent</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('assetId')) {
        obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'Number');
      }
      if (data.hasOwnProperty('feeValue')) {
        obj['feeValue'] = ApiClient.convertToType(data['feeValue'], 'Number');
      }
      if (data.hasOwnProperty('profitPercent')) {
        obj['profitPercent'] = ApiClient.convertToType(data['profitPercent'], 'Number');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('programType')) {
        obj['programType'] = ApiClient.convertToType(data['programType'], 'String');
      }
      if (data.hasOwnProperty('logo')) {
        obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
      }
      if (data.hasOwnProperty('color')) {
        obj['color'] = ApiClient.convertToType(data['color'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('periodNumber')) {
        obj['periodNumber'] = ApiClient.convertToType(data['periodNumber'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {String} assetId
   */
  exports.prototype['assetId'] = undefined;
  /**
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * @member {Number} value
   */
  exports.prototype['value'] = undefined;
  /**
   * @member {Number} feeValue
   */
  exports.prototype['feeValue'] = undefined;
  /**
   * @member {Number} profitPercent
   */
  exports.prototype['profitPercent'] = undefined;
  /**
   * @member {module:model/ManagerPortfolioEvent.CurrencyEnum} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * @member {module:model/ManagerPortfolioEvent.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/ManagerPortfolioEvent.ProgramTypeEnum} programType
   */
  exports.prototype['programType'] = undefined;
  /**
   * @member {String} logo
   */
  exports.prototype['logo'] = undefined;
  /**
   * @member {String} color
   */
  exports.prototype['color'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * @member {Number} periodNumber
   */
  exports.prototype['periodNumber'] = undefined;


  /**
   * Allowed values for the <code>currency</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CurrencyEnum = {
    /**
     * value: "BTC"
     * @const
     */
    "BTC": "BTC",
    /**
     * value: "ETH"
     * @const
     */
    "ETH": "ETH",
    /**
     * value: "USDT"
     * @const
     */
    "USDT": "USDT",
    /**
     * value: "GVT"
     * @const
     */
    "GVT": "GVT",
    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",
    /**
     * value: "ADA"
     * @const
     */
    "ADA": "ADA",
    /**
     * value: "XRP"
     * @const
     */
    "XRP": "XRP",
    /**
     * value: "BCH"
     * @const
     */
    "BCH": "BCH",
    /**
     * value: "LTC"
     * @const
     */
    "LTC": "LTC",
    /**
     * value: "DOGE"
     * @const
     */
    "DOGE": "DOGE",
    /**
     * value: "BNB"
     * @const
     */
    "BNB": "BNB",
    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",
    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "All"
     * @const
     */
    "All": "All",
    /**
     * value: "AssetStarted"
     * @const
     */
    "AssetStarted": "AssetStarted",
    /**
     * value: "ProgramPeriodStarts"
     * @const
     */
    "ProgramPeriodStarts": "ProgramPeriodStarts",
    /**
     * value: "ProgramPeriodEnds"
     * @const
     */
    "ProgramPeriodEnds": "ProgramPeriodEnds",
    /**
     * value: "InvestorInvest"
     * @const
     */
    "InvestorInvest": "InvestorInvest",
    /**
     * value: "InvestorWithdraw"
     * @const
     */
    "InvestorWithdraw": "InvestorWithdraw",
    /**
     * value: "ManagerInvest"
     * @const
     */
    "ManagerInvest": "ManagerInvest",
    /**
     * value: "ManagerWithdraw"
     * @const
     */
    "ManagerWithdraw": "ManagerWithdraw",
    /**
     * value: "AssetFinished"
     * @const
     */
    "AssetFinished": "AssetFinished",
    /**
     * value: "EntranceFee"
     * @const
     */
    "EntranceFee": "EntranceFee",
    /**
     * value: "ExitFee"
     * @const
     */
    "ExitFee": "ExitFee",
    /**
     * value: "ProgramStopOut"
     * @const
     */
    "ProgramStopOut": "ProgramStopOut",
    /**
     * value: "ProgramManagerTradingFeeAccrual"
     * @const
     */
    "ProgramManagerTradingFeeAccrual": "ProgramManagerTradingFeeAccrual",
    /**
     * value: "ProgramSignalSubscribe"
     * @const
     */
    "ProgramSignalSubscribe": "ProgramSignalSubscribe",
    /**
     * value: "ProgramBrokerChanged"
     * @const
     */
    "ProgramBrokerChanged": "ProgramBrokerChanged"  };

  /**
   * Allowed values for the <code>programType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProgramTypeEnum = {
    /**
     * value: "Program"
     * @const
     */
    "Program": "Program",
    /**
     * value: "Fund"
     * @const
     */
    "Fund": "Fund"  };


  return exports;
}));


