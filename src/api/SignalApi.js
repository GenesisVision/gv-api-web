/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttachToSignalProvider', 'model/AttachToSignalProviderInfo', 'model/CopyTradingAccountsList', 'model/DetachFromSignalProvider', 'model/ErrorViewModel', 'model/TradesSignalViewModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttachToSignalProvider'), require('../model/AttachToSignalProviderInfo'), require('../model/CopyTradingAccountsList'), require('../model/DetachFromSignalProvider'), require('../model/ErrorViewModel'), require('../model/TradesSignalViewModel'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.SignalApi = factory(root.CoreApiV10.ApiClient, root.CoreApiV10.AttachToSignalProvider, root.CoreApiV10.AttachToSignalProviderInfo, root.CoreApiV10.CopyTradingAccountsList, root.CoreApiV10.DetachFromSignalProvider, root.CoreApiV10.ErrorViewModel, root.CoreApiV10.TradesSignalViewModel);
  }
}(this, function(ApiClient, AttachToSignalProvider, AttachToSignalProviderInfo, CopyTradingAccountsList, DetachFromSignalProvider, ErrorViewModel, TradesSignalViewModel) {
  'use strict';

  /**
   * Signal service.
   * @module api/SignalApi
   * @version v1.0
   */

  /**
   * Constructs a new SignalApi. 
   * @alias module:api/SignalApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get copytrading accounts
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CopyTradingAccountsList} and HTTP response
     */
    this.v10SignalAccountsGetWithHttpInfo = function(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalAccountsGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = CopyTradingAccountsList;

      return this.apiClient.callApi(
        '/v1.0/signal/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get copytrading accounts
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CopyTradingAccountsList}
     */
    this.v10SignalAccountsGet = function(authorization) {
      return this.v10SignalAccountsGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get subscribe to programs signals info
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachToSignalProviderInfo} and HTTP response
     */
    this.v10SignalAttachByIdInfoGetWithHttpInfo = function(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalAttachByIdInfoGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalAttachByIdInfoGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = AttachToSignalProviderInfo;

      return this.apiClient.callApi(
        '/v1.0/signal/attach/{id}/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get subscribe to programs signals info
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachToSignalProviderInfo}
     */
    this.v10SignalAttachByIdInfoGet = function(id, authorization) {
      return this.v10SignalAttachByIdInfoGetWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribe to programs signals
     * @param {String} id Program Id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachToSignalProvider} opts.model Subscription settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10SignalAttachByIdPostWithHttpInfo = function(id, authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalAttachByIdPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalAttachByIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/attach/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribe to programs signals
     * @param {String} id Program Id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachToSignalProvider} opts.model Subscription settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10SignalAttachByIdPost = function(id, authorization, opts) {
      return this.v10SignalAttachByIdPostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update signal subscription settings
     * @param {String} id Program id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachToSignalProvider} opts.model Subscription settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10SignalByIdUpdatePostWithHttpInfo = function(id, authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalByIdUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalByIdUpdatePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/{id}/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update signal subscription settings
     * @param {String} id Program id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachToSignalProvider} opts.model Subscription settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10SignalByIdUpdatePost = function(id, authorization, opts) {
      return this.v10SignalByIdUpdatePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribe from program signals
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/DetachFromSignalProvider} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10SignalDetachByIdPostWithHttpInfo = function(id, authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalDetachByIdPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalDetachByIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/detach/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribe from program signals
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/DetachFromSignalProvider} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10SignalDetachByIdPost = function(id, authorization, opts) {
      return this.v10SignalDetachByIdPostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close signal trade
     * @param {String} id Trade id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.programId Provider program id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10SignalTradesByIdClosePostWithHttpInfo = function(id, authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalTradesByIdClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalTradesByIdClosePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'programId': opts['programId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/trades/{id}/close', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close signal trade
     * @param {String} id Trade id
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.programId Provider program id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10SignalTradesByIdClosePost = function(id, authorization, opts) {
      return this.v10SignalTradesByIdClosePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get investors signals trades history
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesSignalViewModel} and HTTP response
     */
    this.v10SignalTradesGetWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalTradesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'Symbol': opts['symbol'],
        'Sorting': opts['sorting'],
        'AccountId': opts['accountId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TradesSignalViewModel;

      return this.apiClient.callApi(
        '/v1.0/signal/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investors signals trades history
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesSignalViewModel}
     */
    this.v10SignalTradesGet = function(authorization, opts) {
      return this.v10SignalTradesGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get investors signals open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.symbol 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesSignalViewModel} and HTTP response
     */
    this.v10SignalTradesOpenGetWithHttpInfo = function(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalTradesOpenGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'Sorting': opts['sorting'],
        'Symbol': opts['symbol'],
        'AccountId': opts['accountId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TradesSignalViewModel;

      return this.apiClient.callApi(
        '/v1.0/signal/trades/open', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investors signals open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.symbol 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesSignalViewModel}
     */
    this.v10SignalTradesOpenGet = function(authorization, opts) {
      return this.v10SignalTradesOpenGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
