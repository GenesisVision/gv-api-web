/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { CommonPublicAssetsViewModel } from "../model/CommonPublicAssetsViewModel";
import { DashboardAssets } from "../model/DashboardAssets";
import { DashboardChart } from "../model/DashboardChart";
import { DashboardChartAssets } from "../model/DashboardChartAssets";
import { DashboardInvestingDetails } from "../model/DashboardInvestingDetails";
import { DashboardPortfolio } from "../model/DashboardPortfolio";
import { DashboardSummary } from "../model/DashboardSummary";
import { DashboardTradingDetails } from "../model/DashboardTradingDetails";
import { ErrorViewModel } from "../model/ErrorViewModel";
import { ItemsViewModelDashboardTradingAsset } from "../model/ItemsViewModelDashboardTradingAsset";
import { ItemsViewModelFundInvestingDetailsList } from "../model/ItemsViewModelFundInvestingDetailsList";
import { ItemsViewModelProgramInvestingDetailsList } from "../model/ItemsViewModelProgramInvestingDetailsList";

export class DashboardApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getChart(authorization: string, opts?: { 
    assets?: Array<string>, 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<DashboardChart>{
    return this.getChartWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getChartWithHttpInfo(authorization: string, opts: { 
    assets?: Array<string>, 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getChart");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Assets": this.apiClient.buildCollectionParam(opts["assets"], "multi"),
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "ShowIn": opts["showIn"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardChart;

    return this.apiClient.callApi<DashboardChart>(
      '/v2.0/dashboard/chart', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getChartAssets(authorization: string): CancelablePromise<DashboardChartAssets>{
    return this.getChartAssetsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getChartAssetsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getChartAssets");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardChartAssets;

    return this.apiClient.callApi<DashboardChartAssets>(
      '/v2.0/dashboard/chart/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getHoldings(authorization: string, opts?: { 
    topAssetsCount?: number
  }): CancelablePromise<DashboardAssets>{
    return this.getHoldingsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getHoldingsWithHttpInfo(authorization: string, opts: { 
    topAssetsCount?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getHoldings");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "topAssetsCount": opts["topAssetsCount"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardAssets;

    return this.apiClient.callApi<DashboardAssets>(
      '/v2.0/dashboard/holdings', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getInvestingDetails(authorization: string, opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    eventsTake?: number
  }): CancelablePromise<DashboardInvestingDetails>{
    return this.getInvestingDetailsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getInvestingDetailsWithHttpInfo(authorization: string, opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    eventsTake?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getInvestingDetails");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"],
      "eventsTake": opts["eventsTake"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardInvestingDetails;

    return this.apiClient.callApi<DashboardInvestingDetails>(
      '/v2.0/dashboard/investing', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getInvestingFunds(authorization: string, opts?: { 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'BySizeAsc' | 'BySizeDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelFundInvestingDetailsList>{
    return this.getInvestingFundsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getInvestingFundsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'BySizeAsc' | 'BySizeDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getInvestingFunds");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "ShowIn": opts["showIn"],
      "Status": opts["status"],
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "FacetId": opts["facetId"],
      "Mask": opts["mask"],
      "OwnerId": opts["ownerId"],
      "ShowFavorites": opts["showFavorites"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelFundInvestingDetailsList;

    return this.apiClient.callApi<ItemsViewModelFundInvestingDetailsList>(
      '/v2.0/dashboard/investing/funds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getInvestingPrograms(authorization: string, opts?: { 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'ByEquityAsc' | 'ByEquityDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByPeriodAsc' | 'ByPeriodDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByLevelProgressAsc' | 'ByLevelProgressDesc' | 'ByLevelAsc' | 'ByLevelDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelProgramInvestingDetailsList>{
    return this.getInvestingProgramsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getInvestingProgramsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'ByEquityAsc' | 'ByEquityDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByPeriodAsc' | 'ByPeriodDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByLevelProgressAsc' | 'ByLevelProgressDesc' | 'ByLevelAsc' | 'ByLevelDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getInvestingPrograms");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "ShowIn": opts["showIn"],
      "Status": opts["status"],
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "FacetId": opts["facetId"],
      "Mask": opts["mask"],
      "OwnerId": opts["ownerId"],
      "ShowFavorites": opts["showFavorites"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelProgramInvestingDetailsList;

    return this.apiClient.callApi<ItemsViewModelProgramInvestingDetailsList>(
      '/v2.0/dashboard/investing/programs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getMostProfitableAssets(authorization: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<ItemsViewModelDashboardTradingAsset>{
    return this.getMostProfitableAssetsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getMostProfitableAssetsWithHttpInfo(authorization: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getMostProfitableAssets");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "ShowIn": opts["showIn"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelDashboardTradingAsset;

    return this.apiClient.callApi<ItemsViewModelDashboardTradingAsset>(
      '/v2.0/dashboard/trading/mostprofitable', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPortfolio(authorization: string): CancelablePromise<DashboardPortfolio>{
    return this.getPortfolioWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPortfolioWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getPortfolio");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardPortfolio;

    return this.apiClient.callApi<DashboardPortfolio>(
      '/v2.0/dashboard/portfolio', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPrivateTradingAssets(authorization: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelDashboardTradingAsset>{
    return this.getPrivateTradingAssetsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPrivateTradingAssetsWithHttpInfo(authorization: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getPrivateTradingAssets");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "ShowIn": opts["showIn"],
      "Status": opts["status"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelDashboardTradingAsset;

    return this.apiClient.callApi<ItemsViewModelDashboardTradingAsset>(
      '/v2.0/dashboard/trading/private', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPublicTradingAssets(authorization: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelDashboardTradingAsset>{
    return this.getPublicTradingAssetsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPublicTradingAssetsWithHttpInfo(authorization: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    status?: 'All' | 'Active', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getPublicTradingAssets");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "ShowIn": opts["showIn"],
      "Status": opts["status"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelDashboardTradingAsset;

    return this.apiClient.callApi<ItemsViewModelDashboardTradingAsset>(
      '/v2.0/dashboard/trading/public', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRecommendations(authorization: string, opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    take?: number, 
    onlyFollows?: boolean
  }): CancelablePromise<CommonPublicAssetsViewModel>{
    return this.getRecommendationsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRecommendationsWithHttpInfo(authorization: string, opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    take?: number, 
    onlyFollows?: boolean
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getRecommendations");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"],
      "take": opts["take"],
      "onlyFollows": opts["onlyFollows"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = CommonPublicAssetsViewModel;

    return this.apiClient.callApi<CommonPublicAssetsViewModel>(
      '/v2.0/dashboard/recommendations', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSummary(authorization: string, opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<DashboardSummary>{
    return this.getSummaryWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSummaryWithHttpInfo(authorization: string, opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getSummary");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardSummary;

    return this.apiClient.callApi<DashboardSummary>(
      '/v2.0/dashboard/summary', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getTradingDetails(authorization: string, opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    eventsTake?: number
  }): CancelablePromise<DashboardTradingDetails>{
    return this.getTradingDetailsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getTradingDetailsWithHttpInfo(authorization: string, opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    eventsTake?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getTradingDetails");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"],
      "eventsTake": opts["eventsTake"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardTradingDetails;

    return this.apiClient.callApi<DashboardTradingDetails>(
      '/v2.0/dashboard/trading', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
