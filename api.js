/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import * as url from "url";
import * as portableFetch from "portable-fetch";
const BASE_PATH = "https://localhost/api".replace(/\/+$/, "");
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
export class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
;
export class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
const formatResponse = (response) => {
    return new Promise(async (resolve, reject) => {
        if (!response.ok) {
            const body = await response.json();
            return reject({
                statusCode: response.status,
                body
            });
        }
        const data = await response.text();
        try {
            resolve(JSON.parse(data));
        }
        catch (e) {
            resolve(data);
        }
    });
};
export const AuthApiFetchParamCreator = function (configuration) {
    return {
        v10Auth2faConfirmPost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faConfirmPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TwoFactorAuthenticatorConfirm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faCreatePost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faCreatePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faDisablePost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faDisablePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/disable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TwoFactorCodeModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faGet.');
            }
            const localVarPath = `/v1.0/auth/2fa`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faRecoverycodesNewPost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesNewPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faRecoverycodesPost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordChangePost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPasswordChangePost.');
            }
            const localVarPath = `/v1.0/auth/password/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChangePasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordForgotInvestorPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/password/forgot/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordForgotManagerPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/password/forgot/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordResetPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/password/reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ResetPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPhoneCodePost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPhoneCodePost.');
            }
            const localVarPath = `/v1.0/auth/phone/code`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPhoneVerifyPost(authorization, code, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPhoneVerifyPost.');
            }
            const localVarPath = `/v1.0/auth/phone/verify`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthResendconfirmationlinkPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/resendconfirmationlink`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ResendConfirmationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSigninInvestorPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/signin/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSigninManagerPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/signin/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupConfirmPost(userId, code, options = {}) {
            const localVarPath = `/v1.0/auth/signup/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupInvestorPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/signup/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterInvestorViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupManagerPost(model, options = {}) {
            const localVarPath = `/v1.0/auth/signup/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterManagerViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthTokenDevicesLogoutPost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthTokenDevicesLogoutPost.');
            }
            const localVarPath = `/v1.0/auth/token/devices/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthTokenUpdatePost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthTokenUpdatePost.');
            }
            const localVarPath = `/v1.0/auth/token/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const AuthApiFp = function (configuration) {
    return {
        v10Auth2faConfirmPost(authorization, model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faConfirmPost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10Auth2faCreatePost(authorization, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faCreatePost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10Auth2faDisablePost(authorization, model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faDisablePost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10Auth2faGet(authorization, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10Auth2faRecoverycodesNewPost(authorization, model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10Auth2faRecoverycodesPost(authorization, model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesPost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPasswordChangePost(authorization, model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordChangePost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPasswordForgotInvestorPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotInvestorPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPasswordForgotManagerPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotManagerPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPasswordResetPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordResetPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPhoneCodePost(authorization, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneCodePost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthPhoneVerifyPost(authorization, code, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneVerifyPost(authorization, code, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthResendconfirmationlinkPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthResendconfirmationlinkPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthSigninInvestorPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninInvestorPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthSigninManagerPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninManagerPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthSignupConfirmPost(userId, code, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupConfirmPost(userId, code, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthSignupInvestorPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupInvestorPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthSignupManagerPost(model, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupManagerPost(model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthTokenDevicesLogoutPost(authorization, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenDevicesLogoutPost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10AuthTokenUpdatePost(authorization, options) {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenUpdatePost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class AuthApi extends BaseAPI {
    v10Auth2faConfirmPost(authorization, options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10Auth2faConfirmPost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10Auth2faCreatePost(authorization, init) {
        return AuthApiFp(this.configuration).v10Auth2faCreatePost(authorization, init)(this.fetch, this.basePath);
    }
    v10Auth2faDisablePost(authorization, options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10Auth2faDisablePost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10Auth2faGet(authorization, init) {
        return AuthApiFp(this.configuration).v10Auth2faGet(authorization, init)(this.fetch, this.basePath);
    }
    v10Auth2faRecoverycodesNewPost(authorization, options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesNewPost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10Auth2faRecoverycodesPost(authorization, options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesPost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10AuthPasswordChangePost(authorization, options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordChangePost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10AuthPasswordForgotInvestorPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordForgotInvestorPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthPasswordForgotManagerPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordForgotManagerPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthPasswordResetPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordResetPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthPhoneCodePost(authorization, init) {
        return AuthApiFp(this.configuration).v10AuthPhoneCodePost(authorization, init)(this.fetch, this.basePath);
    }
    v10AuthPhoneVerifyPost(authorization, options = {}, init) {
        const { code } = options;
        return AuthApiFp(this.configuration).v10AuthPhoneVerifyPost(authorization, code, init)(this.fetch, this.basePath);
    }
    v10AuthResendconfirmationlinkPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthResendconfirmationlinkPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthSigninInvestorPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthSigninInvestorPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthSigninManagerPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthSigninManagerPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthSignupConfirmPost(options = {}, init) {
        const { userId, code } = options;
        return AuthApiFp(this.configuration).v10AuthSignupConfirmPost(userId, code, init)(this.fetch, this.basePath);
    }
    v10AuthSignupInvestorPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthSignupInvestorPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthSignupManagerPost(options = {}, init) {
        const { model } = options;
        return AuthApiFp(this.configuration).v10AuthSignupManagerPost(model, init)(this.fetch, this.basePath);
    }
    v10AuthTokenDevicesLogoutPost(authorization, init) {
        return AuthApiFp(this.configuration).v10AuthTokenDevicesLogoutPost(authorization, init)(this.fetch, this.basePath);
    }
    v10AuthTokenUpdatePost(authorization, init) {
        return AuthApiFp(this.configuration).v10AuthTokenUpdatePost(authorization, init)(this.fetch, this.basePath);
    }
}
export const BrokersApiFetchParamCreator = function (configuration) {
    return {
        v10BrokersByProgramIdGet(programId, options = {}) {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId', 'Required parameter programId was null or undefined when calling v10BrokersByProgramIdGet.');
            }
            const localVarPath = `/v1.0/brokers/{programId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10BrokersGet(options = {}) {
            const localVarPath = `/v1.0/brokers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const BrokersApiFp = function (configuration) {
    return {
        v10BrokersByProgramIdGet(programId, options) {
            const localVarFetchArgs = BrokersApiFetchParamCreator(configuration).v10BrokersByProgramIdGet(programId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10BrokersGet(options) {
            const localVarFetchArgs = BrokersApiFetchParamCreator(configuration).v10BrokersGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class BrokersApi extends BaseAPI {
    v10BrokersByProgramIdGet(programId, init) {
        return BrokersApiFp(this.configuration).v10BrokersByProgramIdGet(programId, init)(this.fetch, this.basePath);
    }
    v10BrokersGet(init) {
        return BrokersApiFp(this.configuration).v10BrokersGet(init)(this.fetch, this.basePath);
    }
}
export const FileApiFetchParamCreator = function (configuration) {
    return {
        v10FileByIdGet(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FileByIdGet.');
            }
            const localVarPath = `/v1.0/file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FileDocumentUploadPost(authorization, uploadedFile, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FileDocumentUploadPost.');
            }
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile', 'Required parameter uploadedFile was null or undefined when calling v10FileDocumentUploadPost.');
            }
            const localVarPath = `/v1.0/file/document/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FileUploadPost(uploadedFile, authorization, options = {}) {
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile', 'Required parameter uploadedFile was null or undefined when calling v10FileUploadPost.');
            }
            const localVarPath = `/v1.0/file/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const FileApiFp = function (configuration) {
    return {
        v10FileByIdGet(id, options) {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileByIdGet(id, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FileDocumentUploadPost(authorization, uploadedFile, options) {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FileUploadPost(uploadedFile, authorization, options) {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileUploadPost(uploadedFile, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class FileApi extends BaseAPI {
    v10FileByIdGet(id, init) {
        return FileApiFp(this.configuration).v10FileByIdGet(id, init)(this.fetch, this.basePath);
    }
    v10FileDocumentUploadPost(authorization, uploadedFile, init) {
        return FileApiFp(this.configuration).v10FileDocumentUploadPost(authorization, uploadedFile, init)(this.fetch, this.basePath);
    }
    v10FileUploadPost(uploadedFile, options = {}, init) {
        const { authorization } = options;
        return FileApiFp(this.configuration).v10FileUploadPost(uploadedFile, authorization, init)(this.fetch, this.basePath);
    }
}
export const FundsApiFetchParamCreator = function (configuration) {
    return {
        v10FundsAssetsGet(options = {}) {
            const localVarPath = `/v1.0/funds/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdAssetsGet(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdAssetsGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/assets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdFavoriteAddPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdFavoriteRemovePost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdGet(id, authorization, currencySecondary, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdGet.');
            }
            const localVarPath = `/v1.0/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdReallocationsGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/reallocations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options = {}) {
            const localVarPath = `/v1.0/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (assets) {
                localVarQueryParameter['Assets'] = assets;
            }
            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
            }
            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }
            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }
            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }
            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }
            if (hasInvestorsForAll !== undefined) {
                localVarQueryParameter['HasInvestorsForAll'] = hasInvestorsForAll;
            }
            if (hasInvestorsForClosed !== undefined) {
                localVarQueryParameter['HasInvestorsForClosed'] = hasInvestorsForClosed;
            }
            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }
            if (status) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsSetsGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsSetsGet.');
            }
            const localVarPath = `/v1.0/funds/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const FundsApiFp = function (configuration) {
    return {
        v10FundsAssetsGet(options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsAssetsGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdAssetsGet(id, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdAssetsGet(id, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdFavoriteAddPost(id, authorization, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdFavoriteRemovePost(id, authorization, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdGet(id, authorization, currencySecondary, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10FundsSetsGet(authorization, options) {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsSetsGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class FundsApi extends BaseAPI {
    v10FundsAssetsGet(init) {
        return FundsApiFp(this.configuration).v10FundsAssetsGet(init)(this.fetch, this.basePath);
    }
    v10FundsByIdAssetsGet(id, init) {
        return FundsApiFp(this.configuration).v10FundsByIdAssetsGet(id, init)(this.fetch, this.basePath);
    }
    v10FundsByIdChartsBalanceGet(id, options = {}, init) {
        const { dateFrom, dateTo, maxPointCount } = options;
        return FundsApiFp(this.configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }
    v10FundsByIdChartsProfitGet(id, options = {}, init) {
        const { dateFrom, dateTo, maxPointCount } = options;
        return FundsApiFp(this.configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }
    v10FundsByIdFavoriteAddPost(id, authorization, init) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteAddPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10FundsByIdFavoriteRemovePost(id, authorization, init) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteRemovePost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10FundsByIdGet(id, options = {}, init) {
        const { authorization, currencySecondary } = options;
        return FundsApiFp(this.configuration).v10FundsByIdGet(id, authorization, currencySecondary, init)(this.fetch, this.basePath);
    }
    v10FundsByIdReallocationsGet(id, options = {}, init) {
        const { dateFrom, dateTo, skip, take } = options;
        return FundsApiFp(this.configuration).v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, init)(this.fetch, this.basePath);
    }
    v10FundsGet(options = {}, init) {
        const { authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take } = options;
        return FundsApiFp(this.configuration).v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10FundsSetsGet(authorization, init) {
        return FundsApiFp(this.configuration).v10FundsSetsGet(authorization, init)(this.fetch, this.basePath);
    }
}
export const InvestorApiFetchParamCreator = function (configuration) {
    return {
        v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent', 'Required parameter percent was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsGet.');
            }
            const localVarPath = `/v1.0/investor/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }
            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorGet.');
            }
            const localVarPath = `/v1.0/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (chartCurrency !== undefined) {
                localVarQueryParameter['chartCurrency'] = chartCurrency;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }
            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }
            if (eventsTake !== undefined) {
                localVarQueryParameter['eventsTake'] = eventsTake;
            }
            if (requestsSkip !== undefined) {
                localVarQueryParameter['requestsSkip'] = requestsSkip;
            }
            if (requestsTake !== undefined) {
                localVarQueryParameter['requestsTake'] = requestsTake;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorPortfolioChartGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/chart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }
            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorPortfolioEventsGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdReinvestOffPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/off`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdReinvestOnPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/on`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/multi/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (withdrawAll !== undefined) {
                localVarQueryParameter['withdrawAll'] = withdrawAll;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/multi`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (withdrawAll !== undefined) {
                localVarQueryParameter['withdrawAll'] = withdrawAll;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsGet.');
            }
            const localVarPath = `/v1.0/investor/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }
            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/investor/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options = {}) {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorSignalsGet.');
            }
            const localVarPath = `/v1.0/investor/signals`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }
            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const InvestorApiFp = function (configuration) {
    return {
        v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdReinvestOffPost(id, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdReinvestOnPost(id, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options) {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class InvestorApi extends BaseAPI {
    v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options = {}, init) {
        const { currency } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options = {}, init) {
        const { currency } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorFundsGet(authorization, options = {}, init) {
        const { sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }
    v10InvestorGet(authorization, options = {}, init) {
        const { chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake } = options;
        return InvestorApiFp(this.configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, init)(this.fetch, this.basePath);
    }
    v10InvestorPortfolioChartGet(authorization, options = {}, init) {
        const { currency, from, to, balancePoints, programsPoints } = options;
        return InvestorApiFp(this.configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, init)(this.fetch, this.basePath);
    }
    v10InvestorPortfolioEventsGet(authorization, options = {}, init) {
        const { assetId, from, to, type, assetType, skip, take } = options;
        return InvestorApiFp(this.configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options = {}, init) {
        const { currency } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdReinvestOffPost(id, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdReinvestOnPost(id, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, options = {}, init) {
        const { withdrawAll } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, options = {}, init) {
        const { amount, withdrawAll } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsGet(authorization, options = {}, init) {
        const { sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }
    v10InvestorProgramsRequestsByIdCancelPost(id, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, init) {
        return InvestorApiFp(this.configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, init)(this.fetch, this.basePath);
    }
    v10InvestorSignalsGet(authorization, options = {}, init) {
        const { sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take } = options;
        return InvestorApiFp(this.configuration).v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }
}
export const ManagerApiFetchParamCreator = function (configuration) {
    return {
        v10ManagerAssetsGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerAssetsGet.');
            }
            const localVarPath = `/v1.0/manager/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerByIdDetailsGet(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerByIdDetailsGet.');
            }
            const localVarPath = `/v1.0/manager/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerByIdGet(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerByIdGet.');
            }
            const localVarPath = `/v1.0/manager/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerEventsGet.');
            }
            const localVarPath = `/v1.0/manager/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/assets/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("Array&lt;FundAssetPart&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(assets || {}) : (assets || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdUpdatePost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent', 'Required parameter percent was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsCreatePost(authorization, request, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("NewFundRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsGet.');
            }
            const localVarPath = `/v1.0/manager/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }
            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsInvestmentAmountGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/funds/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsRequestsByIdCancelPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/funds/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerGet.');
            }
            const localVarPath = `/v1.0/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerPrograms2faConfirmPost(authorization, programId, code, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerPrograms2faConfirmPost.');
            }
            const localVarPath = `/v1.0/manager/programs/2fa/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerPrograms2faGetGet(authorization, programId, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerPrograms2faGetGet.');
            }
            const localVarPath = `/v1.0/manager/programs/2fa/get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsBrokerChangeCancelPost.');
            }
            const localVarPath = `/v1.0/manager/programs/broker/change/cancel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsBrokerChangePost(authorization, request, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsBrokerChangePost.');
            }
            const localVarPath = `/v1.0/manager/programs/broker/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChangeBrokerProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdLevelsInfoGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdLevelsInfoGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdLevelsInfoGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/levels/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdPasswordChangePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPasswordChangePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/password/change`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ProgramPwdUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdPeriodClosePost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/period/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdUpdatePost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/multi/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsCreatePost(authorization, request, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("NewProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsGet.');
            }
            const localVarPath = `/v1.0/manager/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }
            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/programs/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (brokerTradingAccount !== undefined) {
                localVarQueryParameter['brokerTradingAccount'] = brokerTradingAccount;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, options = {}) {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetType !== undefined) {
                localVarQueryParameter['assetType'] = assetType;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerSignalCreatePost.');
            }
            const localVarPath = `/v1.0/manager/signal/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['ProgramId'] = programId;
            }
            if (volumeFee !== undefined) {
                localVarQueryParameter['VolumeFee'] = volumeFee;
            }
            if (successFee !== undefined) {
                localVarQueryParameter['SuccessFee'] = successFee;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerSignalEditPost.');
            }
            const localVarPath = `/v1.0/manager/signal/edit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['ProgramId'] = programId;
            }
            if (volumeFee !== undefined) {
                localVarQueryParameter['VolumeFee'] = volumeFee;
            }
            if (successFee !== undefined) {
                localVarQueryParameter['SuccessFee'] = successFee;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const ManagerApiFp = function (configuration) {
    return {
        v10ManagerAssetsGet(authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerAssetsGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerByIdDetailsGet(id, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdDetailsGet(id, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerByIdGet(id, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdGet(id, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdUpdatePost(id, authorization, model, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsCreatePost(authorization, request, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsCreatePost(authorization, request, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsInvestmentAmountGet(authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerFundsRequestsByIdCancelPost(id, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerPrograms2faConfirmPost(authorization, programId, code, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerPrograms2faConfirmPost(authorization, programId, code, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerPrograms2faGetGet(authorization, programId, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerPrograms2faGetGet(authorization, programId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsBrokerChangePost(authorization, request, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsBrokerChangePost(authorization, request, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdLevelsInfoGet(id, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdLevelsInfoGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdPeriodClosePost(id, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdUpdatePost(id, authorization, model, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsCreatePost(authorization, request, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsCreatePost(authorization, request, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, options) {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class ManagerApi extends BaseAPI {
    v10ManagerAssetsGet(authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerAssetsGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerByIdDetailsGet(id, init) {
        return ManagerApiFp(this.configuration).v10ManagerByIdDetailsGet(id, init)(this.fetch, this.basePath);
    }
    v10ManagerByIdGet(id, init) {
        return ManagerApiFp(this.configuration).v10ManagerByIdGet(id, init)(this.fetch, this.basePath);
    }
    v10ManagerEventsGet(authorization, options = {}, init) {
        const { assetId, from, to, type, assetType, skip, take } = options;
        return ManagerApiFp(this.configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdAssetsUpdatePost(id, authorization, options = {}, init) {
        const { assets } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdClosePost(id, authorization, options = {}, init) {
        const { twoFactorCode } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options = {}, init) {
        const { currency } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdUpdatePost(id, authorization, options = {}, init) {
        const { model } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options = {}, init) {
        const { currency } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsCreatePost(authorization, options = {}, init) {
        const { request } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsCreatePost(authorization, request, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsGet(authorization, options = {}, init) {
        const { sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsInvestmentAmountGet(authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerFundsInvestmentAmountGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerFundsRequestsByIdCancelPost(id, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerGet(authorization, options = {}, init) {
        const { assetId, from, to, type, assetType, skip, take } = options;
        return ManagerApiFp(this.configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }
    v10ManagerPrograms2faConfirmPost(authorization, options = {}, init) {
        const { programId, code } = options;
        return ManagerApiFp(this.configuration).v10ManagerPrograms2faConfirmPost(authorization, programId, code, init)(this.fetch, this.basePath);
    }
    v10ManagerPrograms2faGetGet(authorization, options = {}, init) {
        const { programId } = options;
        return ManagerApiFp(this.configuration).v10ManagerPrograms2faGetGet(authorization, programId, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsBrokerChangeCancelPost(authorization, options = {}, init) {
        const { programId } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsBrokerChangePost(authorization, options = {}, init) {
        const { request } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsBrokerChangePost(authorization, request, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdClosePost(id, authorization, options = {}, init) {
        const { twoFactorCode } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options = {}, init) {
        const { currency } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdLevelsInfoGet(id, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdLevelsInfoGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdPasswordChangePost(id, authorization, options = {}, init) {
        const { model } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdPeriodClosePost(id, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdUpdatePost(id, authorization, options = {}, init) {
        const { model } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsCreatePost(authorization, options = {}, init) {
        const { request } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsCreatePost(authorization, request, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsGet(authorization, options = {}, init) {
        const { sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsInvestmentAmountGet(authorization, options = {}, init) {
        const { brokerTradingAccount } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, init)(this.fetch, this.basePath);
    }
    v10ManagerProgramsRequestsByIdCancelPost(id, authorization, init) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options = {}, init) {
        const { assetType } = options;
        return ManagerApiFp(this.configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, init)(this.fetch, this.basePath);
    }
    v10ManagerSignalCreatePost(authorization, options = {}, init) {
        const { programId, volumeFee, successFee } = options;
        return ManagerApiFp(this.configuration).v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, init)(this.fetch, this.basePath);
    }
    v10ManagerSignalEditPost(authorization, options = {}, init) {
        const { programId, volumeFee, successFee } = options;
        return ManagerApiFp(this.configuration).v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, init)(this.fetch, this.basePath);
    }
}
export const NotificationsApiFetchParamCreator = function (configuration) {
    return {
        v10NotificationsByIdReadPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsByIdReadPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsByIdReadPost.');
            }
            const localVarPath = `/v1.0/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsGet(authorization, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsGet.');
            }
            const localVarPath = `/v1.0/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsNewGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsNewGet.');
            }
            const localVarPath = `/v1.0/notifications/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsAddPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (conditionType !== undefined) {
                localVarQueryParameter['ConditionType'] = conditionType;
            }
            if (conditionAmount !== undefined) {
                localVarQueryParameter['ConditionAmount'] = conditionAmount;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'enable' is not null or undefined
            if (enable === null || enable === undefined) {
                throw new RequiredError('enable', 'Required parameter enable was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            const localVarPath = `/v1.0/notifications/settings/{id}/{enable}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"enable"}}`, encodeURIComponent(String(enable)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsFundsByIdGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsGet.');
            }
            const localVarPath = `/v1.0/notifications/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsManagersByIdGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/managers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsProgramsByIdGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsRemoveByIdPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const NotificationsApiFp = function (configuration) {
    return {
        v10NotificationsByIdReadPost(id, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsByIdReadPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsGet(authorization, skip, take, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsGet(authorization, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsNewGet(authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsNewGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsFundsByIdGet(id, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsGet(authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsManagersByIdGet(id, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsProgramsByIdGet(id, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10NotificationsSettingsRemoveByIdPost(id, authorization, options) {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class NotificationsApi extends BaseAPI {
    v10NotificationsByIdReadPost(id, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsByIdReadPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsGet(authorization, options = {}, init) {
        const { skip, take } = options;
        return NotificationsApiFp(this.configuration).v10NotificationsGet(authorization, skip, take, init)(this.fetch, this.basePath);
    }
    v10NotificationsNewGet(authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsNewGet(authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsAddPost(authorization, options = {}, init) {
        const { assetId, managerId, type, conditionType, conditionAmount } = options;
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsFundsByIdGet(id, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsGet(authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsGet(authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsManagersByIdGet(id, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsProgramsByIdGet(id, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10NotificationsSettingsRemoveByIdPost(id, authorization, init) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, init)(this.fetch, this.basePath);
    }
}
export const PlatformApiFetchParamCreator = function (configuration) {
    return {
        v10PlatformDatePost(options = {}) {
            const localVarPath = `/v1.0/platform/date`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformInfoGet(options = {}) {
            const localVarPath = `/v1.0/platform/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformLevelsGet(currency, options = {}) {
            const localVarPath = `/v1.0/platform/levels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformLevelsParametersGet(currency, options = {}) {
            const localVarPath = `/v1.0/platform/levels/parameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformRiskcontrolGet(route, client, version, options = {}) {
            // verify required parameter 'route' is not null or undefined
            if (route === null || route === undefined) {
                throw new RequiredError('route', 'Required parameter route was null or undefined when calling v10PlatformRiskcontrolGet.');
            }
            const localVarPath = `/v1.0/platform/riskcontrol`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (route !== undefined) {
                localVarQueryParameter['Route'] = route;
            }
            if (client !== undefined) {
                localVarQueryParameter['Client'] = client;
            }
            if (version !== undefined) {
                localVarQueryParameter['Version'] = version;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformStatisticGet(options = {}) {
            const localVarPath = `/v1.0/platform/statistic`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const PlatformApiFp = function (configuration) {
    return {
        v10PlatformDatePost(options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformDatePost(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10PlatformInfoGet(options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformInfoGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10PlatformLevelsGet(currency, options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformLevelsGet(currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10PlatformLevelsParametersGet(currency, options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformLevelsParametersGet(currency, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10PlatformRiskcontrolGet(route, client, version, options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformRiskcontrolGet(route, client, version, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10PlatformStatisticGet(options) {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformStatisticGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class PlatformApi extends BaseAPI {
    v10PlatformDatePost(init) {
        return PlatformApiFp(this.configuration).v10PlatformDatePost(init)(this.fetch, this.basePath);
    }
    v10PlatformInfoGet(init) {
        return PlatformApiFp(this.configuration).v10PlatformInfoGet(init)(this.fetch, this.basePath);
    }
    v10PlatformLevelsGet(options = {}, init) {
        const { currency } = options;
        return PlatformApiFp(this.configuration).v10PlatformLevelsGet(currency, init)(this.fetch, this.basePath);
    }
    v10PlatformLevelsParametersGet(options = {}, init) {
        const { currency } = options;
        return PlatformApiFp(this.configuration).v10PlatformLevelsParametersGet(currency, init)(this.fetch, this.basePath);
    }
    v10PlatformRiskcontrolGet(route, options = {}, init) {
        const { client, version } = options;
        return PlatformApiFp(this.configuration).v10PlatformRiskcontrolGet(route, client, version, init)(this.fetch, this.basePath);
    }
    v10PlatformStatisticGet(init) {
        return PlatformApiFp(this.configuration).v10PlatformStatisticGet(init)(this.fetch, this.basePath);
    }
}
export const ProfileApiFetchParamCreator = function (configuration) {
    return {
        v10ProfileAvatarRemovePost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileAvatarRemovePost.');
            }
            const localVarPath = `/v1.0/profile/avatar/remove`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options = {}) {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            const localVarPath = `/v1.0/profile/avatar/update/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileGet.');
            }
            const localVarPath = `/v1.0/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileHeaderGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileHeaderGet.');
            }
            const localVarPath = `/v1.0/profile/header`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfilePersonalUpdatePost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfilePersonalUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/personal/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdatePersonalDetailViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfilePushTokenPost(authorization, token, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfilePushTokenPost.');
            }
            const localVarPath = `/v1.0/profile/push/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("FcmTokenViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(token || {}) : (token || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileSociallinksGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileSociallinksGet.');
            }
            const localVarPath = `/v1.0/profile/sociallinks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileSociallinksUpdatePost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileSociallinksUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/sociallinks/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateSocialLinkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileUpdatePost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateProfileViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileVerificationTokenPost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileVerificationTokenPost.');
            }
            const localVarPath = `/v1.0/profile/verification/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const ProfileApiFp = function (configuration) {
    return {
        v10ProfileAvatarRemovePost(authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarRemovePost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileGet(authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileHeaderGet(authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileHeaderGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfilePersonalUpdatePost(authorization, model, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfilePersonalUpdatePost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfilePushTokenPost(authorization, token, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfilePushTokenPost(authorization, token, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileSociallinksGet(authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileSociallinksGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileSociallinksUpdatePost(authorization, model, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileSociallinksUpdatePost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileUpdatePost(authorization, model, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileUpdatePost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProfileVerificationTokenPost(authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileVerificationTokenPost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class ProfileApi extends BaseAPI {
    v10ProfileAvatarRemovePost(authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarRemovePost(authorization, init)(this.fetch, this.basePath);
    }
    v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, init)(this.fetch, this.basePath);
    }
    v10ProfileGet(authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ProfileHeaderGet(authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileHeaderGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ProfilePersonalUpdatePost(authorization, options = {}, init) {
        const { model } = options;
        return ProfileApiFp(this.configuration).v10ProfilePersonalUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10ProfilePushTokenPost(authorization, options = {}, init) {
        const { token } = options;
        return ProfileApiFp(this.configuration).v10ProfilePushTokenPost(authorization, token, init)(this.fetch, this.basePath);
    }
    v10ProfileSociallinksGet(authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileSociallinksGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ProfileSociallinksUpdatePost(authorization, options = {}, init) {
        const { model } = options;
        return ProfileApiFp(this.configuration).v10ProfileSociallinksUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10ProfileUpdatePost(authorization, options = {}, init) {
        const { model } = options;
        return ProfileApiFp(this.configuration).v10ProfileUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10ProfileVerificationTokenPost(authorization, init) {
        return ProfileApiFp(this.configuration).v10ProfileVerificationTokenPost(authorization, init)(this.fetch, this.basePath);
    }
}
export const ProgramsApiFetchParamCreator = function (configuration) {
    return {
        v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdFavoriteAddPost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdFavoriteRemovePost(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdGet(id, authorization, currencySecondary, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsExportGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }
            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsExportStatisticGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdPeriodsExportStatisticGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods/export/statistic`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }
            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }
            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdSubscribersGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdSubscribersGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/subscribers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdTradesGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }
            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdTradesOpenGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades/open`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }
            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }
            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByProgramIdTradesExportGet(programId, start, end, options = {}) {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId', 'Required parameter programId was null or undefined when calling v10ProgramsByProgramIdTradesExportGet.');
            }
            const localVarPath = `/v1.0/programs/{programId}/trades/export`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options = {}) {
            const localVarPath = `/v1.0/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (levelMin !== undefined) {
                localVarQueryParameter['LevelMin'] = levelMin;
            }
            if (levelMax !== undefined) {
                localVarQueryParameter['LevelMax'] = levelMax;
            }
            if (levelsSet) {
                localVarQueryParameter['LevelsSet'] = levelsSet;
            }
            if (profitAvgMin !== undefined) {
                localVarQueryParameter['ProfitAvgMin'] = profitAvgMin;
            }
            if (profitAvgMax !== undefined) {
                localVarQueryParameter['ProfitAvgMax'] = profitAvgMax;
            }
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (programCurrency !== undefined) {
                localVarQueryParameter['ProgramCurrency'] = programCurrency;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (levelUpFrom !== undefined) {
                localVarQueryParameter['LevelUpFrom'] = levelUpFrom;
            }
            if (tags) {
                localVarQueryParameter['Tags'] = tags;
            }
            if (isSignal !== undefined) {
                localVarQueryParameter['IsSignal'] = isSignal;
            }
            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
            }
            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }
            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }
            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }
            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }
            if (hasInvestorsForAll !== undefined) {
                localVarQueryParameter['HasInvestorsForAll'] = hasInvestorsForAll;
            }
            if (hasInvestorsForClosed !== undefined) {
                localVarQueryParameter['HasInvestorsForClosed'] = hasInvestorsForClosed;
            }
            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }
            if (status) {
                localVarQueryParameter['Status'] = status;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsLevelupSummaryGet(authorization, options = {}) {
            const localVarPath = `/v1.0/programs/levelup/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsSetsGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsSetsGet.');
            }
            const localVarPath = `/v1.0/programs/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const ProgramsApiFp = function (configuration) {
    return {
        v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdFavoriteAddPost(id, authorization, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdFavoriteRemovePost(id, authorization, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdGet(id, authorization, currencySecondary, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsByProgramIdTradesExportGet(programId, start, end, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByProgramIdTradesExportGet(programId, start, end, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsLevelupSummaryGet(authorization, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsLevelupSummaryGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10ProgramsSetsGet(authorization, options) {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsSetsGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class ProgramsApi extends BaseAPI {
    v10ProgramsByIdChartsBalanceGet(id, options = {}, init) {
        const { dateFrom, dateTo, maxPointCount } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdChartsProfitGet(id, options = {}, init) {
        const { dateFrom, dateTo, maxPointCount } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdFavoriteAddPost(id, authorization, init) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdFavoriteRemovePost(id, authorization, init) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdGet(id, options = {}, init) {
        const { authorization, currencySecondary } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdPeriodsExportGet(id, options = {}, init) {
        const { dateFrom, dateTo, numberMin, numberMax, status, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, options = {}, init) {
        const { dateFrom, dateTo, numberMin, numberMax, status, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdPeriodsGet(id, options = {}, init) {
        const { authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdSubscribersGet(id, authorization, options = {}, init) {
        const { status, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdTradesGet(id, options = {}, init) {
        const { dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByIdTradesOpenGet(id, options = {}, init) {
        const { sorting, symbol, accountId, accountCurrency, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsByProgramIdTradesExportGet(programId, options = {}, init) {
        const { start, end } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByProgramIdTradesExportGet(programId, start, end, init)(this.fetch, this.basePath);
    }
    v10ProgramsGet(options = {}, init) {
        const { authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, init)(this.fetch, this.basePath);
    }
    v10ProgramsLevelupSummaryGet(options = {}, init) {
        const { authorization } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsLevelupSummaryGet(authorization, init)(this.fetch, this.basePath);
    }
    v10ProgramsSetsGet(authorization, init) {
        return ProgramsApiFp(this.configuration).v10ProgramsSetsGet(authorization, init)(this.fetch, this.basePath);
    }
}
export const RateApiFetchParamCreator = function (configuration) {
    return {
        v10RateByExchangeByFromByToGet(exchange, from, to, options = {}) {
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange', 'Required parameter exchange was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from', 'Required parameter from was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to', 'Required parameter to was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{exchange}/{from}/{to}`
                .replace(`{${"exchange"}}`, encodeURIComponent(String(exchange)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10RateByFromByToGet(from, to, options = {}) {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from', 'Required parameter from was null or undefined when calling v10RateByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to', 'Required parameter to was null or undefined when calling v10RateByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{from}/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10RateGet(from, to, options = {}) {
            const localVarPath = `/v1.0/rate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (from) {
                localVarQueryParameter['from'] = from;
            }
            if (to) {
                localVarQueryParameter['to'] = to;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const RateApiFp = function (configuration) {
    return {
        v10RateByExchangeByFromByToGet(exchange, from, to, options) {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10RateByFromByToGet(from, to, options) {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByFromByToGet(from, to, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10RateGet(from, to, options) {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateGet(from, to, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class RateApi extends BaseAPI {
    v10RateByExchangeByFromByToGet(exchange, from, to, init) {
        return RateApiFp(this.configuration).v10RateByExchangeByFromByToGet(exchange, from, to, init)(this.fetch, this.basePath);
    }
    v10RateByFromByToGet(from, to, init) {
        return RateApiFp(this.configuration).v10RateByFromByToGet(from, to, init)(this.fetch, this.basePath);
    }
    v10RateGet(options = {}, init) {
        const { from, to } = options;
        return RateApiFp(this.configuration).v10RateGet(from, to, init)(this.fetch, this.basePath);
    }
}
export const SearchApiFetchParamCreator = function (configuration) {
    return {
        v10SearchGet(authorization, mask, take, options = {}) {
            const localVarPath = `/v1.0/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (mask !== undefined) {
                localVarQueryParameter['mask'] = mask;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const SearchApiFp = function (configuration) {
    return {
        v10SearchGet(authorization, mask, take, options) {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).v10SearchGet(authorization, mask, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class SearchApi extends BaseAPI {
    v10SearchGet(options = {}, init) {
        const { authorization, mask, take } = options;
        return SearchApiFp(this.configuration).v10SearchGet(authorization, mask, take, init)(this.fetch, this.basePath);
    }
}
export const SignalApiFetchParamCreator = function (configuration) {
    return {
        v10SignalAccountsGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalAccountsGet.');
            }
            const localVarPath = `/v1.0/signal/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalAttachByIdInfoGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10SignalAttachByIdInfoGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalAttachByIdInfoGet.');
            }
            const localVarPath = `/v1.0/signal/attach/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalAttachByIdPost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10SignalAttachByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalAttachByIdPost.');
            }
            const localVarPath = `/v1.0/signal/attach/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AttachToSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalByIdUpdatePost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10SignalByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/signal/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AttachToSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalDetachByIdPost(id, authorization, model, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10SignalDetachByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalDetachByIdPost.');
            }
            const localVarPath = `/v1.0/signal/detach/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DetachFromSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesByIdClosePost(id, authorization, programId, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10SignalTradesByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalTradesByIdClosePost.');
            }
            const localVarPath = `/v1.0/signal/trades/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalTradesGet.');
            }
            const localVarPath = `/v1.0/signal/trades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }
            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalTradesLogGet.');
            }
            const localVarPath = `/v1.0/signal/trades/log`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }
            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10SignalTradesOpenGet.');
            }
            const localVarPath = `/v1.0/signal/trades/open`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }
            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }
            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const SignalApiFp = function (configuration) {
    return {
        v10SignalAccountsGet(authorization, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAccountsGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalAttachByIdInfoGet(id, authorization, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAttachByIdInfoGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalAttachByIdPost(id, authorization, model, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAttachByIdPost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalByIdUpdatePost(id, authorization, model, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalByIdUpdatePost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalDetachByIdPost(id, authorization, model, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalDetachByIdPost(id, authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalTradesByIdClosePost(id, authorization, programId, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesByIdClosePost(id, authorization, programId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, options) {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class SignalApi extends BaseAPI {
    v10SignalAccountsGet(authorization, init) {
        return SignalApiFp(this.configuration).v10SignalAccountsGet(authorization, init)(this.fetch, this.basePath);
    }
    v10SignalAttachByIdInfoGet(id, authorization, init) {
        return SignalApiFp(this.configuration).v10SignalAttachByIdInfoGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10SignalAttachByIdPost(id, authorization, options = {}, init) {
        const { model } = options;
        return SignalApiFp(this.configuration).v10SignalAttachByIdPost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10SignalByIdUpdatePost(id, authorization, options = {}, init) {
        const { model } = options;
        return SignalApiFp(this.configuration).v10SignalByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10SignalDetachByIdPost(id, authorization, options = {}, init) {
        const { model } = options;
        return SignalApiFp(this.configuration).v10SignalDetachByIdPost(id, authorization, model, init)(this.fetch, this.basePath);
    }
    v10SignalTradesByIdClosePost(id, authorization, options = {}, init) {
        const { programId } = options;
        return SignalApiFp(this.configuration).v10SignalTradesByIdClosePost(id, authorization, programId, init)(this.fetch, this.basePath);
    }
    v10SignalTradesGet(authorization, options = {}, init) {
        const { dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take } = options;
        return SignalApiFp(this.configuration).v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }
    v10SignalTradesLogGet(authorization, options = {}, init) {
        const { accountId, accountCurrency, skip, take } = options;
        return SignalApiFp(this.configuration).v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }
    v10SignalTradesOpenGet(authorization, options = {}, init) {
        const { sorting, symbol, accountId, accountCurrency, skip, take } = options;
        return SignalApiFp(this.configuration).v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }
}
export const WalletApiFetchParamCreator = function (configuration) {
    return {
        v10WalletAddressesByCurrencyGet(currency, authorization, options = {}) {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10WalletAddressesByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletAddressesByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/addresses/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletAddressesGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletAddressesGet.');
            }
            const localVarPath = `/v1.0/wallet/addresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletByCurrencyGet(currency, authorization, options = {}) {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10WalletByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletFeeGvtholdingGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletFeeGvtholdingGet.');
            }
            const localVarPath = `/v1.0/wallet/fee/gvtholding`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiByCurrencyAvailableGet(currency, authorization, options = {}) {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10WalletMultiByCurrencyAvailableGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletMultiByCurrencyAvailableGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/{currency}/available`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiByCurrencyGet(currency, authorization, options = {}) {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10WalletMultiByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletMultiByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletMultiTransactionsExternalGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/transactions/external`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (currency !== undefined) {
                localVarQueryParameter['Currency'] = currency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletMultiTransactionsGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (currency !== undefined) {
                localVarQueryParameter['Currency'] = currency;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletPaygvtfeeOffPost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletPaygvtfeeOffPost.');
            }
            const localVarPath = `/v1.0/wallet/paygvtfee/off`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletPaygvtfeeOnPost(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletPaygvtfeeOnPost.');
            }
            const localVarPath = `/v1.0/wallet/paygvtfee/on`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransactionByIdGet(id, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10WalletTransactionByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletTransactionByIdGet.');
            }
            const localVarPath = `/v1.0/wallet/transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletTransactionsGet.');
            }
            const localVarPath = `/v1.0/wallet/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (txAction !== undefined) {
                localVarQueryParameter['TxAction'] = txAction;
            }
            if (wallet !== undefined) {
                localVarQueryParameter['Wallet'] = wallet;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransferPost(authorization, request, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletTransferPost.');
            }
            const localVarPath = `/v1.0/wallet/transfer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("InternalTransferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawInfoGet(authorization, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawInfoGet.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options = {}) {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId', 'Required parameter txId was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/cancel/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestConfirmPost(requestId, code, options = {}) {
            const localVarPath = `/v1.0/wallet/withdraw/request/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestNewPost(authorization, model, options = {}) {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestNewPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateWithdrawalRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options = {}) {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId', 'Required parameter txId was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/resend/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
export const WalletApiFp = function (configuration) {
    return {
        v10WalletAddressesByCurrencyGet(currency, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletAddressesByCurrencyGet(currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletAddressesGet(authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletAddressesGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletByCurrencyGet(currency, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletByCurrencyGet(currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletFeeGvtholdingGet(authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletFeeGvtholdingGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletMultiByCurrencyAvailableGet(currency, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiByCurrencyAvailableGet(currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletMultiByCurrencyGet(currency, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiByCurrencyGet(currency, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletPaygvtfeeOffPost(authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletPaygvtfeeOffPost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletPaygvtfeeOnPost(authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletPaygvtfeeOnPost(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletTransactionByIdGet(id, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionByIdGet(id, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletTransferPost(authorization, request, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransferPost(authorization, request, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletWithdrawInfoGet(authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawInfoGet(authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletWithdrawRequestConfirmPost(requestId, code, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletWithdrawRequestNewPost(authorization, model, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
        v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options) {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse(response));
            };
        },
    };
};
export class WalletApi extends BaseAPI {
    v10WalletAddressesByCurrencyGet(currency, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletAddressesByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletAddressesGet(authorization, init) {
        return WalletApiFp(this.configuration).v10WalletAddressesGet(authorization, init)(this.fetch, this.basePath);
    }
    v10WalletByCurrencyGet(currency, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletFeeGvtholdingGet(authorization, init) {
        return WalletApiFp(this.configuration).v10WalletFeeGvtholdingGet(authorization, init)(this.fetch, this.basePath);
    }
    v10WalletMultiByCurrencyAvailableGet(currency, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletMultiByCurrencyAvailableGet(currency, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletMultiByCurrencyGet(currency, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletMultiByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletMultiTransactionsExternalGet(authorization, options = {}, init) {
        const { from, to, type, currency, skip, take } = options;
        return WalletApiFp(this.configuration).v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, init)(this.fetch, this.basePath);
    }
    v10WalletMultiTransactionsGet(authorization, options = {}, init) {
        const { from, to, type, currency, skip, take } = options;
        return WalletApiFp(this.configuration).v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, init)(this.fetch, this.basePath);
    }
    v10WalletPaygvtfeeOffPost(authorization, init) {
        return WalletApiFp(this.configuration).v10WalletPaygvtfeeOffPost(authorization, init)(this.fetch, this.basePath);
    }
    v10WalletPaygvtfeeOnPost(authorization, init) {
        return WalletApiFp(this.configuration).v10WalletPaygvtfeeOnPost(authorization, init)(this.fetch, this.basePath);
    }
    v10WalletTransactionByIdGet(id, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletTransactionByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletTransactionsGet(authorization, options = {}, init) {
        const { assetId, from, to, assetType, txAction, wallet, skip, take } = options;
        return WalletApiFp(this.configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, init)(this.fetch, this.basePath);
    }
    v10WalletTransferPost(authorization, options = {}, init) {
        const { request } = options;
        return WalletApiFp(this.configuration).v10WalletTransferPost(authorization, request, init)(this.fetch, this.basePath);
    }
    v10WalletWithdrawInfoGet(authorization, init) {
        return WalletApiFp(this.configuration).v10WalletWithdrawInfoGet(authorization, init)(this.fetch, this.basePath);
    }
    v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, init)(this.fetch, this.basePath);
    }
    v10WalletWithdrawRequestConfirmPost(options = {}, init) {
        const { requestId, code } = options;
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, init)(this.fetch, this.basePath);
    }
    v10WalletWithdrawRequestNewPost(authorization, options = {}, init) {
        const { model } = options;
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestNewPost(authorization, model, init)(this.fetch, this.basePath);
    }
    v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, init) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, init)(this.fetch, this.basePath);
    }
}
