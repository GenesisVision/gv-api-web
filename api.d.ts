/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AmountWithCurrency
 */
export interface AmountWithCurrency {
    /**
     *
     * @type {number}
     * @memberof AmountWithCurrency
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof AmountWithCurrency
     */
    currency?: AmountWithCurrency.CurrencyEnum;
}
/**
 * @export
 * @namespace AmountWithCurrency
 */
export declare namespace AmountWithCurrency {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface AndroidAppVersion
 */
export interface AndroidAppVersion {
    /**
     *
     * @type {AndroidVersion}
     * @memberof AndroidAppVersion
     */
    minVersion?: AndroidVersion;
    /**
     *
     * @type {AndroidVersion}
     * @memberof AndroidAppVersion
     */
    lastVersion?: AndroidVersion;
}
/**
 *
 * @export
 * @interface AndroidVersion
 */
export interface AndroidVersion {
    /**
     *
     * @type {string}
     * @memberof AndroidVersion
     */
    versionCode?: string;
    /**
     *
     * @type {string}
     * @memberof AndroidVersion
     */
    versionName?: string;
}
/**
 *
 * @export
 * @interface AssetSelection
 */
export interface AssetSelection {
    /**
     *
     * @type {string}
     * @memberof AssetSelection
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSelection
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSelection
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSelection
     */
    type?: AssetSelection.TypeEnum;
}
/**
 * @export
 * @namespace AssetSelection
 */
export declare namespace AssetSelection {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Program = 0,
        Fund = 1
    }
}
/**
 *
 * @export
 * @interface AssetsValue
 */
export interface AssetsValue {
    /**
     *
     * @type {string}
     * @memberof AssetsValue
     */
    type?: AssetsValue.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof AssetsValue
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AssetsValue
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof AssetsValue
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof AssetsValue
     */
    color?: string;
    /**
     *
     * @type {number}
     * @memberof AssetsValue
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof AssetsValue
     */
    changePercent?: number;
    /**
     *
     * @type {number}
     * @memberof AssetsValue
     */
    changeValue?: number;
}
/**
 * @export
 * @namespace AssetsValue
 */
export declare namespace AssetsValue {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        All = 0,
        Program = 1,
        Fund = 2
    }
}
/**
 *
 * @export
 * @interface BalanceChartElement
 */
export interface BalanceChartElement {
    /**
     *
     * @type {Date}
     * @memberof BalanceChartElement
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof BalanceChartElement
     */
    managerFunds?: number;
    /**
     *
     * @type {number}
     * @memberof BalanceChartElement
     */
    investorsFunds?: number;
}
/**
 *
 * @export
 * @interface BlockchainInfo
 */
export interface BlockchainInfo {
    /**
     *
     * @type {string}
     * @memberof BlockchainInfo
     */
    hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockchainInfo
     */
    status?: BlockchainInfo.StatusEnum;
}
/**
 * @export
 * @namespace BlockchainInfo
 */
export declare namespace BlockchainInfo {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        Undefined = 0,
        New = 1,
        Pending = 2,
        ConfirmedByGate = 3,
        ConfirmedAndValidated = 4,
        PendingAddInWallet = 5,
        Error = 6,
        Cancelled = 7
    }
}
/**
 *
 * @export
 * @interface Broker
 */
export interface Broker {
    /**
     *
     * @type {string}
     * @memberof Broker
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Broker
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Broker
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Broker
     */
    terms?: string;
    /**
     *
     * @type {string}
     * @memberof Broker
     */
    assets?: string;
    /**
     *
     * @type {number}
     * @memberof Broker
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof Broker
     */
    leverageMin?: number;
    /**
     *
     * @type {number}
     * @memberof Broker
     */
    leverageMax?: number;
    /**
     *
     * @type {Array<BrokerAccountType>}
     * @memberof Broker
     */
    accountTypes?: Array<BrokerAccountType>;
}
/**
 *
 * @export
 * @interface BrokerAccountType
 */
export interface BrokerAccountType {
    /**
     *
     * @type {string}
     * @memberof BrokerAccountType
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BrokerAccountType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BrokerAccountType
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof BrokerAccountType
     */
    type?: BrokerAccountType.TypeEnum;
    /**
     *
     * @type {Array<number>}
     * @memberof BrokerAccountType
     */
    leverages?: Array<number>;
    /**
     *
     * @type {Array<string>}
     * @memberof BrokerAccountType
     */
    currencies?: Array<string>;
}
/**
 * @export
 * @namespace BrokerAccountType
 */
export declare namespace BrokerAccountType {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Undefined = 0,
        MetaTrader4 = 1,
        MetaTrader5 = 2,
        NinjaTrader = 3,
        CTrader = 4,
        Rumus = 5,
        Metastock = 6,
        IDEX = 7
    }
}
/**
 *
 * @export
 * @interface BrokersInfo
 */
export interface BrokersInfo {
    /**
     *
     * @type {Array<Broker>}
     * @memberof BrokersInfo
     */
    brokers?: Array<Broker>;
}
/**
 *
 * @export
 * @interface ChangePasswordViewModel
 */
export interface ChangePasswordViewModel {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    oldPassword: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    confirmPassword?: string;
}
/**
 *
 * @export
 * @interface ChartSimple
 */
export interface ChartSimple {
    /**
     *
     * @type {number}
     * @memberof ChartSimple
     */
    value?: number;
    /**
     *
     * @type {Date}
     * @memberof ChartSimple
     */
    date?: Date;
}
/**
 *
 * @export
 * @interface CreateWithdrawalRequestModel
 */
export interface CreateWithdrawalRequestModel {
    /**
     *
     * @type {number}
     * @memberof CreateWithdrawalRequestModel
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    currency?: CreateWithdrawalRequestModel.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    twoFactorCode?: string;
}
/**
 * @export
 * @namespace CreateWithdrawalRequestModel
 */
export declare namespace CreateWithdrawalRequestModel {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface DashboardChartValue
 */
export interface DashboardChartValue {
    /**
     *
     * @type {Array<ValueChartBar>}
     * @memberof DashboardChartValue
     */
    investedProgramsInfo?: Array<ValueChartBar>;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof DashboardChartValue
     */
    balanceChart?: Array<ChartSimple>;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    valueCurrency?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    changePercent?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    changeValue?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    changeValueCurrency?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardChartValue
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface DashboardPortfolioEvent
 */
export interface DashboardPortfolioEvent {
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    assetId?: string;
    /**
     *
     * @type {Date}
     * @memberof DashboardPortfolioEvent
     */
    date?: Date;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof DashboardPortfolioEvent
     */
    value?: number;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    currency?: DashboardPortfolioEvent.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    type?: DashboardPortfolioEvent.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    assetType?: DashboardPortfolioEvent.AssetTypeEnum;
}
/**
 * @export
 * @namespace DashboardPortfolioEvent
 */
export declare namespace DashboardPortfolioEvent {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        All = 0,
        Invest = 1,
        Withdraw = 2,
        Profit = 3,
        Loss = 4,
        Reinvest = 5,
        Cancelled = 6,
        Ended = 7
    }
    /**
     * @export
     * @enum {string}
     */
    enum AssetTypeEnum {
        Program = 0,
        Fund = 1
    }
}
/**
 *
 * @export
 * @interface DashboardPortfolioEvents
 */
export interface DashboardPortfolioEvents {
    /**
     *
     * @type {Array<DashboardPortfolioEvent>}
     * @memberof DashboardPortfolioEvents
     */
    events?: Array<DashboardPortfolioEvent>;
    /**
     *
     * @type {number}
     * @memberof DashboardPortfolioEvents
     */
    total?: number;
}
/**
 *
 * @export
 * @interface DashboardProgramDetails
 */
export interface DashboardProgramDetails {
    /**
     *
     * @type {number}
     * @memberof DashboardProgramDetails
     */
    share?: number;
}
/**
 *
 * @export
 * @interface DashboardSummary
 */
export interface DashboardSummary {
    /**
     *
     * @type {DashboardChartValue}
     * @memberof DashboardSummary
     */
    chart?: DashboardChartValue;
    /**
     *
     * @type {DashboardPortfolioEvents}
     * @memberof DashboardSummary
     */
    events?: DashboardPortfolioEvents;
    /**
     *
     * @type {ProfileHeaderViewModel}
     * @memberof DashboardSummary
     */
    profileHeader?: ProfileHeaderViewModel;
    /**
     *
     * @type {number}
     * @memberof DashboardSummary
     */
    programsCount?: number;
    /**
     *
     * @type {number}
     * @memberof DashboardSummary
     */
    fundsCount?: number;
    /**
     *
     * @type {ProgramRequests}
     * @memberof DashboardSummary
     */
    requests?: ProgramRequests;
}
/**
 *
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    property?: string;
}
/**
 *
 * @export
 * @interface ErrorViewModel
 */
export interface ErrorViewModel {
    /**
     *
     * @type {Array<ErrorMessage>}
     * @memberof ErrorViewModel
     */
    errors?: Array<ErrorMessage>;
    /**
     *
     * @type {string}
     * @memberof ErrorViewModel
     */
    code?: ErrorViewModel.CodeEnum;
}
/**
 * @export
 * @namespace ErrorViewModel
 */
export declare namespace ErrorViewModel {
    /**
     * @export
     * @enum {string}
     */
    enum CodeEnum {
        InternalServerError = 0,
        ValidationError = 1,
        RequiresTwoFactor = 2
    }
}
/**
 *
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    sortType?: Facet.SortTypeEnum;
}
/**
 * @export
 * @namespace Facet
 */
export declare namespace Facet {
    /**
     * @export
     * @enum {string}
     */
    enum SortTypeEnum {
        New = 0,
        Top = 1,
        WeeklyTop = 2,
        Popular = 3,
        ToLevelUp = 4
    }
}
/**
 *
 * @export
 * @interface ForgotPasswordViewModel
 */
export interface ForgotPasswordViewModel {
    /**
     *
     * @type {string}
     * @memberof ForgotPasswordViewModel
     */
    email: string;
}
/**
 *
 * @export
 * @interface FundAssetInfo
 */
export interface FundAssetInfo {
    /**
     *
     * @type {string}
     * @memberof FundAssetInfo
     */
    asset?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetInfo
     */
    symbol?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetInfo
     */
    icon?: string;
    /**
     *
     * @type {number}
     * @memberof FundAssetInfo
     */
    target?: number;
    /**
     *
     * @type {number}
     * @memberof FundAssetInfo
     */
    current?: number;
}
/**
 *
 * @export
 * @interface FundAssetPart
 */
export interface FundAssetPart {
    /**
     *
     * @type {string}
     * @memberof FundAssetPart
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof FundAssetPart
     */
    percent?: number;
}
/**
 *
 * @export
 * @interface FundAssetPartWithIcon
 */
export interface FundAssetPartWithIcon {
    /**
     *
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    icon?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    asset?: string;
    /**
     *
     * @type {number}
     * @memberof FundAssetPartWithIcon
     */
    percent?: number;
}
/**
 *
 * @export
 * @interface FundAssetPercent
 */
export interface FundAssetPercent {
    /**
     *
     * @type {string}
     * @memberof FundAssetPercent
     */
    asset?: string;
    /**
     *
     * @type {string}
     * @memberof FundAssetPercent
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof FundAssetPercent
     */
    percent?: number;
    /**
     *
     * @type {string}
     * @memberof FundAssetPercent
     */
    icon?: string;
}
/**
 *
 * @export
 * @interface FundAssetsListInfo
 */
export interface FundAssetsListInfo {
    /**
     *
     * @type {Array<FundAssetInfo>}
     * @memberof FundAssetsListInfo
     */
    assets?: Array<FundAssetInfo>;
}
/**
 *
 * @export
 * @interface FundBalanceChart
 */
export interface FundBalanceChart {
    /**
     *
     * @type {number}
     * @memberof FundBalanceChart
     */
    usdBalance?: number;
    /**
     *
     * @type {Array<BalanceChartElement>}
     * @memberof FundBalanceChart
     */
    balanceChart?: Array<BalanceChartElement>;
    /**
     *
     * @type {number}
     * @memberof FundBalanceChart
     */
    gvtBalance?: number;
}
/**
 *
 * @export
 * @interface FundDetails
 */
export interface FundDetails {
    /**
     *
     * @type {number}
     * @memberof FundDetails
     */
    totalAssetsCount?: number;
    /**
     *
     * @type {Array<FundAssetPercent>}
     * @memberof FundDetails
     */
    topFundAssets?: Array<FundAssetPercent>;
    /**
     *
     * @type {FundDetailsListStatistic}
     * @memberof FundDetails
     */
    statistic?: FundDetailsListStatistic;
    /**
     * Fields for authorized user
     * @type {PersonalFundDetailsFull}
     * @memberof FundDetails
     */
    personalDetails?: PersonalFundDetailsFull;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetails
     */
    status?: FundDetails.StatusEnum;
    /**
     *
     * @type {ProfilePublic}
     * @memberof FundDetails
     */
    manager?: ProfilePublic;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof FundDetails
     */
    chart?: Array<ChartSimple>;
    /**
     * Fields for dashboard
     * @type {DashboardProgramDetails}
     * @memberof FundDetails
     */
    dashboardAssetsDetails?: DashboardProgramDetails;
}
/**
 * @export
 * @namespace FundDetails
 */
export declare namespace FundDetails {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        None = 0,
        Pending = 1,
        ErrorCreating = 2,
        Active = 3,
        Closed = 4,
        Archived = 5,
        ClosedDueToInactivity = 6
    }
}
/**
 *
 * @export
 * @interface FundDetailsFull
 */
export interface FundDetailsFull {
    /**
     *
     * @type {number}
     * @memberof FundDetailsFull
     */
    entryFee?: number;
    /**
     *
     * @type {number}
     * @memberof FundDetailsFull
     */
    exitFee?: number;
    /**
     *
     * @type {number}
     * @memberof FundDetailsFull
     */
    managementFee?: number;
    /**
     *
     * @type {Array<FundAssetPartWithIcon>}
     * @memberof FundDetailsFull
     */
    currentAssets?: Array<FundAssetPartWithIcon>;
    /**
     *
     * @type {FundStatistic}
     * @memberof FundDetailsFull
     */
    statistic?: FundStatistic;
    /**
     * Fields for authorized user
     * @type {PersonalFundDetailsFull}
     * @memberof FundDetailsFull
     */
    personalFundDetails?: PersonalFundDetailsFull;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    ipfsHash?: string;
    /**
     *
     * @type {string}
     * @memberof FundDetailsFull
     */
    status?: FundDetailsFull.StatusEnum;
    /**
     *
     * @type {ProfilePublic}
     * @memberof FundDetailsFull
     */
    manager?: ProfilePublic;
}
/**
 * @export
 * @namespace FundDetailsFull
 */
export declare namespace FundDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        None = 0,
        Pending = 1,
        ErrorCreating = 2,
        Active = 3,
        Closed = 4,
        Archived = 5,
        ClosedDueToInactivity = 6
    }
}
/**
 *
 * @export
 * @interface FundDetailsListStatistic
 */
export interface FundDetailsListStatistic {
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof FundDetailsListStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof FundDetailsListStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     *
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    profitPercent?: number;
    /**
     *
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    drawdownPercent?: number;
    /**
     *
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    investorsCount?: number;
}
/**
 *
 * @export
 * @interface FundInvestInfo
 */
export interface FundInvestInfo {
    /**
     *
     * @type {string}
     * @memberof FundInvestInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof FundInvestInfo
     */
    availableInWallet?: number;
    /**
     *
     * @type {number}
     * @memberof FundInvestInfo
     */
    minInvestmentAmount?: number;
    /**
     *
     * @type {number}
     * @memberof FundInvestInfo
     */
    entryFee?: number;
    /**
     *
     * @type {number}
     * @memberof FundInvestInfo
     */
    gvCommission?: number;
    /**
     *
     * @type {number}
     * @memberof FundInvestInfo
     */
    rate?: number;
    /**
     *
     * @type {boolean}
     * @memberof FundInvestInfo
     */
    isOwnProgram?: boolean;
}
/**
 *
 * @export
 * @interface FundNotificationSettingList
 */
export interface FundNotificationSettingList {
    /**
     *
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    assetId?: string;
    /**
     *
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    logo?: string;
    /**
     *
     * @type {Array<NotificationSettingViewModel>}
     * @memberof FundNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}
/**
 *
 * @export
 * @interface FundProfitChart
 */
export interface FundProfitChart {
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    totalUsdProfit?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    timeframeUsdProfit?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    rebalances?: number;
    /**
     *
     * @type {Date}
     * @memberof FundProfitChart
     */
    creationDate?: Date;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    profitPercent?: number;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof FundProfitChart
     */
    equityChart?: Array<ChartSimple>;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    balance?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    investors?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    profitChangePercent?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    sharpeRatio?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    sortinoRatio?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    calmarRatio?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    maxDrawdown?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    totalGvtProfit?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    timeframeGvtProfit?: number;
    /**
     *
     * @type {number}
     * @memberof FundProfitChart
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface FundStatistic
 */
export interface FundStatistic {
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof FundStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof FundStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    profitPercent?: number;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    drawdownPercent?: number;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    investorsCount?: number;
    /**
     *
     * @type {Date}
     * @memberof FundStatistic
     */
    startDate?: Date;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    startBalance?: number;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    investedAmount?: number;
    /**
     *
     * @type {number}
     * @memberof FundStatistic
     */
    rebalancingCount?: number;
}
/**
 *
 * @export
 * @interface FundWithdrawInfo
 */
export interface FundWithdrawInfo {
    /**
     *
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    exitFee?: number;
    /**
     *
     * @type {string}
     * @memberof FundWithdrawInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     *
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface FundsList
 */
export interface FundsList {
    /**
     *
     * @type {Array<FundDetails>}
     * @memberof FundsList
     */
    funds?: Array<FundDetails>;
    /**
     *
     * @type {number}
     * @memberof FundsList
     */
    total?: number;
}
/**
 *
 * @export
 * @interface IOsAppVersion
 */
export interface IOsAppVersion {
    /**
     *
     * @type {string}
     * @memberof IOsAppVersion
     */
    minVersion?: string;
    /**
     *
     * @type {string}
     * @memberof IOsAppVersion
     */
    lastVersion?: string;
}
/**
 *
 * @export
 * @interface KycCallback
 */
export interface KycCallback {
    /**
     *
     * @type {string}
     * @memberof KycCallback
     */
    applicantId?: string;
    /**
     *
     * @type {string}
     * @memberof KycCallback
     */
    inspectionId?: string;
    /**
     *
     * @type {string}
     * @memberof KycCallback
     */
    correlationId?: string;
    /**
     *
     * @type {string}
     * @memberof KycCallback
     */
    externalUserId?: string;
    /**
     *
     * @type {boolean}
     * @memberof KycCallback
     */
    success?: boolean;
    /**
     *
     * @type {any}
     * @memberof KycCallback
     */
    details?: any;
    /**
     *
     * @type {string}
     * @memberof KycCallback
     */
    type?: string;
    /**
     *
     * @type {Review}
     * @memberof KycCallback
     */
    review?: Review;
}
/**
 *
 * @export
 * @interface LevelInfo
 */
export interface LevelInfo {
    /**
     *
     * @type {number}
     * @memberof LevelInfo
     */
    level?: number;
    /**
     *
     * @type {number}
     * @memberof LevelInfo
     */
    investmentLimit?: number;
}
/**
 *
 * @export
 * @interface LevelUpData
 */
export interface LevelUpData {
    /**
     *
     * @type {number}
     * @memberof LevelUpData
     */
    level?: number;
    /**
     *
     * @type {number}
     * @memberof LevelUpData
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof LevelUpData
     */
    totalOwn?: number;
    /**
     *
     * @type {number}
     * @memberof LevelUpData
     */
    quota?: number;
    /**
     *
     * @type {number}
     * @memberof LevelUpData
     */
    targetProfit?: number;
}
/**
 *
 * @export
 * @interface LevelUpSummary
 */
export interface LevelUpSummary {
    /**
     *
     * @type {Array<LevelUpData>}
     * @memberof LevelUpSummary
     */
    levelData?: Array<LevelUpData>;
}
/**
 *
 * @export
 * @interface LoginViewModel
 */
export interface LoginViewModel {
    /**
     *
     * @type {string}
     * @memberof LoginViewModel
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof LoginViewModel
     */
    password: string;
    /**
     *
     * @type {boolean}
     * @memberof LoginViewModel
     */
    rememberMe?: boolean;
    /**
     *
     * @type {string}
     * @memberof LoginViewModel
     */
    twoFactorCode?: string;
    /**
     *
     * @type {string}
     * @memberof LoginViewModel
     */
    recoveryCode?: string;
    /**
     *
     * @type {string}
     * @memberof LoginViewModel
     */
    client?: string;
}
/**
 *
 * @export
 * @interface ManagerAssets
 */
export interface ManagerAssets {
    /**
     *
     * @type {Array<ManagerSimpleProgram>}
     * @memberof ManagerAssets
     */
    programs?: Array<ManagerSimpleProgram>;
    /**
     *
     * @type {Array<ManagerSimpleFund>}
     * @memberof ManagerAssets
     */
    funds?: Array<ManagerSimpleFund>;
}
/**
 *
 * @export
 * @interface ManagerDashboard
 */
export interface ManagerDashboard {
    /**
     *
     * @type {ManagerProfileDetails}
     * @memberof ManagerDashboard
     */
    profile?: ManagerProfileDetails;
    /**
     *
     * @type {ProgramRequest}
     * @memberof ManagerDashboard
     */
    requests?: ProgramRequest;
    /**
     *
     * @type {ManagerPortfolioEvents}
     * @memberof ManagerDashboard
     */
    events?: ManagerPortfolioEvents;
    /**
     *
     * @type {Array<AssetSelection>}
     * @memberof ManagerDashboard
     */
    allAssets?: Array<AssetSelection>;
    /**
     * One of the charts will be null
     * @type {ProgramProfitChart}
     * @memberof ManagerDashboard
     */
    programChart?: ProgramProfitChart;
    /**
     *
     * @type {FundProfitChart}
     * @memberof ManagerDashboard
     */
    fundChart?: FundProfitChart;
}
/**
 *
 * @export
 * @interface ManagerFundWithdrawInfo
 */
export interface ManagerFundWithdrawInfo {
    /**
     *
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    withheldInvestment?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    exitFee?: number;
    /**
     *
     * @type {string}
     * @memberof ManagerFundWithdrawInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface ManagerNotificationSettingList
 */
export interface ManagerNotificationSettingList {
    /**
     *
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    managerId?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    about?: string;
    /**
     *
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ManagerNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}
/**
 *
 * @export
 * @interface ManagerOverview
 */
export interface ManagerOverview {
}
/**
 *
 * @export
 * @interface ManagerPortfolioEvent
 */
export interface ManagerPortfolioEvent {
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    assetId?: string;
    /**
     *
     * @type {Date}
     * @memberof ManagerPortfolioEvent
     */
    date?: Date;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    feeValue?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    profitPercent?: number;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    currency?: ManagerPortfolioEvent.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    type?: ManagerPortfolioEvent.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    programType?: ManagerPortfolioEvent.ProgramTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    periodNumber?: number;
}
/**
 * @export
 * @namespace ManagerPortfolioEvent
 */
export declare namespace ManagerPortfolioEvent {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        All = 0,
        AssetStarted = 1,
        ProgramPeriodStats = 2,
        ProgramPeriodEnds = 3,
        InvestorInvest = 4,
        InvestorWithdraw = 5,
        ManagerInvest = 6,
        ManagerWithdraw = 7,
        AssetFinished = 8,
        EntranceFee = 9,
        ExitFee = 10
    }
    /**
     * @export
     * @enum {string}
     */
    enum ProgramTypeEnum {
        Program = 0,
        Fund = 1
    }
}
/**
 *
 * @export
 * @interface ManagerPortfolioEvents
 */
export interface ManagerPortfolioEvents {
    /**
     *
     * @type {Array<ManagerPortfolioEvent>}
     * @memberof ManagerPortfolioEvents
     */
    events?: Array<ManagerPortfolioEvent>;
    /**
     *
     * @type {number}
     * @memberof ManagerPortfolioEvents
     */
    total?: number;
}
/**
 *
 * @export
 * @interface ManagerProfile
 */
export interface ManagerProfile {
    /**
     *
     * @type {string}
     * @memberof ManagerProfile
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerProfile
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerProfile
     */
    about?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerProfile
     */
    avatar?: string;
    /**
     *
     * @type {Date}
     * @memberof ManagerProfile
     */
    regDate?: Date;
    /**
     *
     * @type {Array<string>}
     * @memberof ManagerProfile
     */
    assets?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ManagerProfile
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ManagerProfileDetails
 */
export interface ManagerProfileDetails {
    /**
     *
     * @type {ManagerProfile}
     * @memberof ManagerProfileDetails
     */
    managerProfile?: ManagerProfile;
    /**
     *
     * @type {ManagerOverview}
     * @memberof ManagerProfileDetails
     */
    overview?: ManagerOverview;
    /**
     *
     * @type {number}
     * @memberof ManagerProfileDetails
     */
    programsCount?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerProfileDetails
     */
    fundsCount?: number;
}
/**
 *
 * @export
 * @interface ManagerProgramWithdrawInfo
 */
export interface ManagerProgramWithdrawInfo {
    /**
     *
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    withheldInvestment?: number;
    /**
     *
     * @type {Date}
     * @memberof ManagerProgramWithdrawInfo
     */
    periodEnds?: Date;
    /**
     *
     * @type {string}
     * @memberof ManagerProgramWithdrawInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     *
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface ManagerSimpleFund
 */
export interface ManagerSimpleFund {
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ManagerSimpleProgram
 */
export interface ManagerSimpleProgram {
    /**
     *
     * @type {number}
     * @memberof ManagerSimpleProgram
     */
    level?: number;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ManagersList
 */
export interface ManagersList {
    /**
     *
     * @type {Array<ManagerProfile>}
     * @memberof ManagersList
     */
    managers?: Array<ManagerProfile>;
    /**
     *
     * @type {number}
     * @memberof ManagersList
     */
    total?: number;
}
/**
 *
 * @export
 * @interface NewFundRequest
 */
export interface NewFundRequest {
    /**
     *
     * @type {number}
     * @memberof NewFundRequest
     */
    exitFee?: number;
    /**
     *
     * @type {number}
     * @memberof NewFundRequest
     */
    managementFee?: number;
    /**
     *
     * @type {Array<FundAssetPart>}
     * @memberof NewFundRequest
     */
    assets?: Array<FundAssetPart>;
    /**
     *
     * @type {string}
     * @memberof NewFundRequest
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof NewFundRequest
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof NewFundRequest
     */
    logo?: string;
    /**
     *
     * @type {number}
     * @memberof NewFundRequest
     */
    entryFee?: number;
}
/**
 *
 * @export
 * @interface NewProgramRequest
 */
export interface NewProgramRequest {
    /**
     *
     * @type {string}
     * @memberof NewProgramRequest
     */
    currency?: NewProgramRequest.CurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof NewProgramRequest
     */
    periodLength?: number;
    /**
     *
     * @type {number}
     * @memberof NewProgramRequest
     */
    successFee?: number;
    /**
     *
     * @type {number}
     * @memberof NewProgramRequest
     */
    stopOutLevel?: number;
    /**
     *
     * @type {number}
     * @memberof NewProgramRequest
     */
    leverage?: number;
    /**
     *
     * @type {string}
     * @memberof NewProgramRequest
     */
    brokerAccountTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof NewProgramRequest
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof NewProgramRequest
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof NewProgramRequest
     */
    logo?: string;
    /**
     *
     * @type {number}
     * @memberof NewProgramRequest
     */
    entryFee?: number;
}
/**
 * @export
 * @namespace NewProgramRequest
 */
export declare namespace NewProgramRequest {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface NotificationList
 */
export interface NotificationList {
    /**
     *
     * @type {Array<NotificationViewModel>}
     * @memberof NotificationList
     */
    notifications?: Array<NotificationViewModel>;
    /**
     *
     * @type {number}
     * @memberof NotificationList
     */
    total?: number;
}
/**
 *
 * @export
 * @interface NotificationSettingList
 */
export interface NotificationSettingList {
    /**
     *
     * @type {Array<NotificationSettingViewModel>}
     * @memberof NotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
    /**
     *
     * @type {Array<ProgramNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsProgram?: Array<ProgramNotificationSettingList>;
    /**
     *
     * @type {Array<FundNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsFund?: Array<FundNotificationSettingList>;
    /**
     *
     * @type {Array<ManagerNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsManager?: Array<ManagerNotificationSettingList>;
}
/**
 *
 * @export
 * @interface NotificationSettingViewModel
 */
export interface NotificationSettingViewModel {
    /**
     *
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof NotificationSettingViewModel
     */
    isEnabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    assetId?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    managerId?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    type?: NotificationSettingViewModel.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    conditionType?: NotificationSettingViewModel.ConditionTypeEnum;
    /**
     *
     * @type {number}
     * @memberof NotificationSettingViewModel
     */
    conditionAmount?: number;
}
/**
 * @export
 * @namespace NotificationSettingViewModel
 */
export declare namespace NotificationSettingViewModel {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        PlatformNewsAndUpdates = 0,
        PlatformEmergency = 1,
        PlatformOther = 2,
        ProfileUpdated = 3,
        ProfilePwdUpdated = 4,
        ProfileVerification = 5,
        Profile2FA = 6,
        ProfileSecurity = 7,
        ProgramNewsAndUpdates = 8,
        ProgramEndOfPeriod = 9,
        ProgramCondition = 10,
        FundNewsAndUpdates = 11,
        FundEndOfPeriod = 12,
        FundRebalancing = 13,
        ManagerNewProgram = 14
    }
    /**
     * @export
     * @enum {string}
     */
    enum ConditionTypeEnum {
        Empty = 0,
        Profit = 1,
        Level = 2
    }
}
/**
 *
 * @export
 * @interface NotificationViewModel
 */
export interface NotificationViewModel {
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    text?: string;
    /**
     *
     * @type {Date}
     * @memberof NotificationViewModel
     */
    date?: Date;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    type?: NotificationViewModel.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    assetId?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    managerId?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    url?: string;
    /**
     *
     * @type {boolean}
     * @memberof NotificationViewModel
     */
    isUnread?: boolean;
    /**
     *
     * @type {string}
     * @memberof NotificationViewModel
     */
    assetType?: NotificationViewModel.AssetTypeEnum;
}
/**
 * @export
 * @namespace NotificationViewModel
 */
export declare namespace NotificationViewModel {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        PlatformNewsAndUpdates = 0,
        PlatformEmergency = 1,
        PlatformOther = 2,
        ProfileUpdated = 3,
        ProfilePwdUpdated = 4,
        ProfileVerification = 5,
        Profile2FA = 6,
        ProfileSecurity = 7,
        ProgramNewsAndUpdates = 8,
        ProgramEndOfPeriod = 9,
        ProgramCondition = 10,
        FundNewsAndUpdates = 11,
        FundEndOfPeriod = 12,
        FundRebalancing = 13,
        ManagerNewProgram = 14
    }
    /**
     * @export
     * @enum {string}
     */
    enum AssetTypeEnum {
        Program = 0,
        Fund = 1
    }
}
/**
 *
 * @export
 * @interface OrderModel
 */
export interface OrderModel {
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    ticket?: string;
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    symbol?: string;
    /**
     *
     * @type {number}
     * @memberof OrderModel
     */
    volume?: number;
    /**
     *
     * @type {number}
     * @memberof OrderModel
     */
    profit?: number;
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    direction?: OrderModel.DirectionEnum;
    /**
     *
     * @type {Date}
     * @memberof OrderModel
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof OrderModel
     */
    price?: number;
    /**
     *
     * @type {string}
     * @memberof OrderModel
     */
    entry?: OrderModel.EntryEnum;
}
/**
 * @export
 * @namespace OrderModel
 */
export declare namespace OrderModel {
    /**
     * @export
     * @enum {string}
     */
    enum DirectionEnum {
        Buy = 0,
        Sell = 1,
        Balance = 2,
        Credit = 3,
        Undefined = 4
    }
    /**
     * @export
     * @enum {string}
     */
    enum EntryEnum {
        In = 0,
        Out = 1,
        InOut = 2,
        OutBy = 3
    }
}
/**
 *
 * @export
 * @interface OtherAssetsValue
 */
export interface OtherAssetsValue {
    /**
     *
     * @type {number}
     * @memberof OtherAssetsValue
     */
    amount?: number;
    /**
     *
     * @type {number}
     * @memberof OtherAssetsValue
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof OtherAssetsValue
     */
    changePercent?: number;
    /**
     *
     * @type {number}
     * @memberof OtherAssetsValue
     */
    changeValue?: number;
}
/**
 *
 * @export
 * @interface PasswordModel
 */
export interface PasswordModel {
    /**
     *
     * @type {string}
     * @memberof PasswordModel
     */
    password: string;
}
/**
 *
 * @export
 * @interface PeriodDate
 */
export interface PeriodDate {
    /**
     *
     * @type {Date}
     * @memberof PeriodDate
     */
    dateFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof PeriodDate
     */
    dateTo?: Date;
}
/**
 *
 * @export
 * @interface PersonalFundDetailsFull
 */
export interface PersonalFundDetailsFull {
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    withdrawPercent?: number;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canReallocate?: boolean;
    /**
     *
     * @type {Date}
     * @memberof PersonalFundDetailsFull
     */
    possibleReallocationTime?: Date;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isFavorite?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isInvested?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isOwnProgram?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canCloseProgram?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isFinishing?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canInvest?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canWithdraw?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canClosePeriod?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    hasNotifications?: boolean;
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    profit?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    invested?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    pendingInput?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    pendingOutput?: number;
    /**
     *
     * @type {string}
     * @memberof PersonalFundDetailsFull
     */
    status?: PersonalFundDetailsFull.StatusEnum;
}
/**
 * @export
 * @namespace PersonalFundDetailsFull
 */
export declare namespace PersonalFundDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        Pending = 0,
        Active = 1,
        Investing = 2,
        Withdrawing = 3,
        Ended = 4
    }
}
/**
 *
 * @export
 * @interface PersonalProgramDetailsFull
 */
export interface PersonalProgramDetailsFull {
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isReinvest?: boolean;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    gvtValue?: number;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isFavorite?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isInvested?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isOwnProgram?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canCloseProgram?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isFinishing?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canInvest?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canWithdraw?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canClosePeriod?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    hasNotifications?: boolean;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    profit?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    invested?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    pendingInput?: number;
    /**
     *
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    pendingOutput?: number;
    /**
     *
     * @type {string}
     * @memberof PersonalProgramDetailsFull
     */
    status?: PersonalProgramDetailsFull.StatusEnum;
}
/**
 * @export
 * @namespace PersonalProgramDetailsFull
 */
export declare namespace PersonalProgramDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        Pending = 0,
        Active = 1,
        Investing = 2,
        Withdrawing = 3,
        Ended = 4
    }
}
/**
 *
 * @export
 * @interface PlatformAsset
 */
export interface PlatformAsset {
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    asset?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    icon?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformAsset
     */
    color?: string;
}
/**
 *
 * @export
 * @interface PlatformAssets
 */
export interface PlatformAssets {
    /**
     *
     * @type {Array<PlatformAsset>}
     * @memberof PlatformAssets
     */
    assets?: Array<PlatformAsset>;
}
/**
 *
 * @export
 * @interface PlatformCurrency
 */
export interface PlatformCurrency {
    /**
     *
     * @type {string}
     * @memberof PlatformCurrency
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof PlatformCurrency
     */
    rateToGvt?: number;
}
/**
 *
 * @export
 * @interface PlatformInfo
 */
export interface PlatformInfo {
    /**
     *
     * @type {IOsAppVersion}
     * @memberof PlatformInfo
     */
    iOSVersion?: IOsAppVersion;
    /**
     *
     * @type {AndroidAppVersion}
     * @memberof PlatformInfo
     */
    androidVersion?: AndroidAppVersion;
    /**
     *
     * @type {Array<Facet>}
     * @memberof PlatformInfo
     */
    programsFacets?: Array<Facet>;
    /**
     *
     * @type {Array<Facet>}
     * @memberof PlatformInfo
     */
    fundsFacets?: Array<Facet>;
    /**
     *
     * @type {ProgramsInfo}
     * @memberof PlatformInfo
     */
    programsInfo?: ProgramsInfo;
    /**
     *
     * @type {Array<string>}
     * @memberof PlatformInfo
     */
    currencies?: Array<string>;
    /**
     *
     * @type {Array<PlatformCurrency>}
     * @memberof PlatformInfo
     */
    platformCurrencies?: Array<PlatformCurrency>;
}
/**
 *
 * @export
 * @interface PlatformStatistic
 */
export interface PlatformStatistic {
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    managers?: number;
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    investors?: number;
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    profitWeek?: number;
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    investmentAmount?: number;
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    totalInvestorsProfit?: number;
    /**
     *
     * @type {number}
     * @memberof PlatformStatistic
     */
    totalProfit?: number;
}
/**
 *
 * @export
 * @interface ProfileFullViewModel
 */
export interface ProfileFullViewModel {
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    middleName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    phone?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProfileFullViewModel
     */
    phoneNumberConfirmed?: boolean;
    /**
     *
     * @type {Date}
     * @memberof ProfileFullViewModel
     */
    birthday?: Date;
    /**
     *
     * @type {boolean}
     * @memberof ProfileFullViewModel
     */
    gender?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    about?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    index?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    citizenship?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    refUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    verificationStatus?: ProfileFullViewModel.VerificationStatusEnum;
}
/**
 * @export
 * @namespace ProfileFullViewModel
 */
export declare namespace ProfileFullViewModel {
    /**
     * @export
     * @enum {string}
     */
    enum VerificationStatusEnum {
        NotVerified = 0,
        Verified = 1,
        UnderReview = 2,
        Rejected = 3
    }
}
/**
 *
 * @export
 * @interface ProfileHeaderViewModel
 */
export interface ProfileHeaderViewModel {
    /**
     *
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    avatar?: string;
    /**
     *
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    notificationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    favoritesCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    totalBalanceGvt?: number;
    /**
     *
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    investedGvt?: number;
    /**
     *
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    availableGvt?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    kycConfirmed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    isTwoFactorEnabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    isNewUser?: boolean;
}
/**
 *
 * @export
 * @interface ProfilePublic
 */
export interface ProfilePublic {
    /**
     *
     * @type {string}
     * @memberof ProfilePublic
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProfilePublic
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof ProfilePublic
     */
    avatar?: string;
    /**
     *
     * @type {Date}
     * @memberof ProfilePublic
     */
    registrationDate?: Date;
    /**
     *
     * @type {string}
     * @memberof ProfilePublic
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ProgramBalanceChart
 */
export interface ProgramBalanceChart {
    /**
     *
     * @type {number}
     * @memberof ProgramBalanceChart
     */
    programCurrencyBalance?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramBalanceChart
     */
    programCurrency?: ProgramBalanceChart.ProgramCurrencyEnum;
    /**
     *
     * @type {Array<ProgramBalanceChartElement>}
     * @memberof ProgramBalanceChart
     */
    balanceChart?: Array<ProgramBalanceChartElement>;
    /**
     *
     * @type {number}
     * @memberof ProgramBalanceChart
     */
    gvtBalance?: number;
}
/**
 * @export
 * @namespace ProgramBalanceChart
 */
export declare namespace ProgramBalanceChart {
    /**
     * @export
     * @enum {string}
     */
    enum ProgramCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface ProgramBalanceChartElement
 */
export interface ProgramBalanceChartElement {
    /**
     *
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    profit?: number;
    /**
     *
     * @type {Date}
     * @memberof ProgramBalanceChartElement
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    managerFunds?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    investorsFunds?: number;
}
/**
 *
 * @export
 * @interface ProgramDetails
 */
export interface ProgramDetails {
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    currency?: ProgramDetails.CurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof ProgramDetails
     */
    level?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetails
     */
    periodDuration?: number;
    /**
     *
     * @type {Date}
     * @memberof ProgramDetails
     */
    periodStarts?: Date;
    /**
     *
     * @type {Date}
     * @memberof ProgramDetails
     */
    periodEnds?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramDetails
     */
    availableInvestment?: number;
    /**
     *
     * @type {ProgramDetailsListStatistic}
     * @memberof ProgramDetails
     */
    statistic?: ProgramDetailsListStatistic;
    /**
     *
     * @type {ProgramDetailsRating}
     * @memberof ProgramDetails
     */
    rating?: ProgramDetailsRating;
    /**
     * Fields for authorized user
     * @type {PersonalProgramDetailsFull}
     * @memberof ProgramDetails
     */
    personalDetails?: PersonalProgramDetailsFull;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetails
     */
    status?: ProgramDetails.StatusEnum;
    /**
     *
     * @type {ProfilePublic}
     * @memberof ProgramDetails
     */
    manager?: ProfilePublic;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof ProgramDetails
     */
    chart?: Array<ChartSimple>;
    /**
     * Fields for dashboard
     * @type {DashboardProgramDetails}
     * @memberof ProgramDetails
     */
    dashboardAssetsDetails?: DashboardProgramDetails;
}
/**
 * @export
 * @namespace ProgramDetails
 */
export declare namespace ProgramDetails {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        None = 0,
        Pending = 1,
        ErrorCreating = 2,
        Active = 3,
        Closed = 4,
        Archived = 5,
        ClosedDueToInactivity = 6
    }
}
/**
 *
 * @export
 * @interface ProgramDetailsFull
 */
export interface ProgramDetailsFull {
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    currency?: ProgramDetailsFull.CurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    level?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    periodDuration?: number;
    /**
     *
     * @type {Date}
     * @memberof ProgramDetailsFull
     */
    periodStarts?: Date;
    /**
     *
     * @type {Date}
     * @memberof ProgramDetailsFull
     */
    periodEnds?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    entryFee?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    successFee?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramDetailsFull
     */
    isReinvesting?: boolean;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    availableInvestment?: number;
    /**
     *
     * @type {ProgramStatistic}
     * @memberof ProgramDetailsFull
     */
    statistic?: ProgramStatistic;
    /**
     *
     * @type {ProgramDetailsRating}
     * @memberof ProgramDetailsFull
     */
    rating?: ProgramDetailsRating;
    /**
     * Fields for authorized user
     * @type {PersonalProgramDetailsFull}
     * @memberof ProgramDetailsFull
     */
    personalProgramDetails?: PersonalProgramDetailsFull;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    color?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    ipfsHash?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    status?: ProgramDetailsFull.StatusEnum;
    /**
     *
     * @type {ProfilePublic}
     * @memberof ProgramDetailsFull
     */
    manager?: ProfilePublic;
}
/**
 * @export
 * @namespace ProgramDetailsFull
 */
export declare namespace ProgramDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        None = 0,
        Pending = 1,
        ErrorCreating = 2,
        Active = 3,
        Closed = 4,
        Archived = 5,
        ClosedDueToInactivity = 6
    }
}
/**
 *
 * @export
 * @interface ProgramDetailsListStatistic
 */
export interface ProgramDetailsListStatistic {
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceBase?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    currentValue?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    profitPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    profitValue?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    drawdownPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    investorsCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    tradesCount?: number;
}
/**
 *
 * @export
 * @interface ProgramDetailsRating
 */
export interface ProgramDetailsRating {
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    rating?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    profit?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramDetailsRating
     */
    canLevelUp?: boolean;
    /**
     *
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    topPercent?: number;
}
/**
 *
 * @export
 * @interface ProgramInfo
 */
export interface ProgramInfo {
    /**
     *
     * @type {string}
     * @memberof ProgramInfo
     */
    title?: string;
}
/**
 *
 * @export
 * @interface ProgramInvestInfo
 */
export interface ProgramInvestInfo {
    /**
     *
     * @type {Date}
     * @memberof ProgramInvestInfo
     */
    periodEnds?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    availableToInvest?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramInvestInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    availableInWallet?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    minInvestmentAmount?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    entryFee?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    gvCommission?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    rate?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramInvestInfo
     */
    isOwnProgram?: boolean;
}
/**
 *
 * @export
 * @interface ProgramNotificationSettingList
 */
export interface ProgramNotificationSettingList {
    /**
     *
     * @type {number}
     * @memberof ProgramNotificationSettingList
     */
    level?: number;
    /**
     *
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ProgramNotificationSettingList
     */
    settingsCustom?: Array<NotificationSettingViewModel>;
    /**
     *
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    assetId?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    logo?: string;
    /**
     *
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ProgramNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}
/**
 *
 * @export
 * @interface ProgramProfitChart
 */
export interface ProgramProfitChart {
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    totalProgramCurrencyProfit?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    timeframeProgramCurrencyProfit?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramProfitChart
     */
    programCurrency?: ProgramProfitChart.ProgramCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    trades?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    successTradesPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    profitFactor?: number;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof ProgramProfitChart
     */
    pnLChart?: Array<ChartSimple>;
    /**
     *
     * @type {Array<PeriodDate>}
     * @memberof ProgramProfitChart
     */
    periods?: Array<PeriodDate>;
    /**
     *
     * @type {Date}
     * @memberof ProgramProfitChart
     */
    lastPeriodStarts?: Date;
    /**
     *
     * @type {Date}
     * @memberof ProgramProfitChart
     */
    lastPeriodEnds?: Date;
    /**
     *
     * @type {Array<ChartSimple>}
     * @memberof ProgramProfitChart
     */
    equityChart?: Array<ChartSimple>;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    balance?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    investors?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    profitChangePercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    sharpeRatio?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    sortinoRatio?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    calmarRatio?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    maxDrawdown?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    totalGvtProfit?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    timeframeGvtProfit?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramProfitChart
     */
    rate?: number;
}
/**
 * @export
 * @namespace ProgramProfitChart
 */
export declare namespace ProgramProfitChart {
    /**
     * @export
     * @enum {string}
     */
    enum ProgramCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface ProgramRequest
 */
export interface ProgramRequest {
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    programId?: string;
    /**
     *
     * @type {Date}
     * @memberof ProgramRequest
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramRequest
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramRequest
     */
    valueGvt?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramRequest
     */
    feeEntry?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramRequest
     */
    feeExit?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    currency?: ProgramRequest.CurrencyEnum;
    /**
     * Used only in fund withdraw request
     * @type {number}
     * @memberof ProgramRequest
     */
    fundWithdrawPercent?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    type?: ProgramRequest.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    status?: ProgramRequest.StatusEnum;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    color?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProgramRequest
     */
    canCancelRequest?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProgramRequest
     */
    programType?: ProgramRequest.ProgramTypeEnum;
}
/**
 * @export
 * @namespace ProgramRequest
 */
export declare namespace ProgramRequest {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Invest = 0,
        Withdrawal = 1
    }
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        New = 0,
        Executed = 1,
        Cancelled = 2
    }
    /**
     * @export
     * @enum {string}
     */
    enum ProgramTypeEnum {
        Program = 0,
        Fund = 1
    }
}
/**
 *
 * @export
 * @interface ProgramRequests
 */
export interface ProgramRequests {
    /**
     *
     * @type {Array<ProgramRequest>}
     * @memberof ProgramRequests
     */
    requests?: Array<ProgramRequest>;
    /**
     *
     * @type {number}
     * @memberof ProgramRequests
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramRequests
     */
    totalValue?: number;
}
/**
 *
 * @export
 * @interface ProgramSets
 */
export interface ProgramSets {
    /**
     *
     * @type {Array<Facet>}
     * @memberof ProgramSets
     */
    sets?: Array<Facet>;
    /**
     *
     * @type {number}
     * @memberof ProgramSets
     */
    favoritesCount?: number;
}
/**
 *
 * @export
 * @interface ProgramStatistic
 */
export interface ProgramStatistic {
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceBase?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     *
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    currentValue?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitValue?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    drawdownPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    investorsCount?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramStatistic
     */
    hasNotifications?: boolean;
    /**
     *
     * @type {Date}
     * @memberof ProgramStatistic
     */
    startDate?: Date;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    startBalance?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramStatistic
     */
    startCurrency?: ProgramStatistic.StartCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    investedAmount?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramStatistic
     */
    investedCurrency?: ProgramStatistic.InvestedCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    tradesCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    tradesSuccessCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitFactorPercent?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramStatistic
     */
    sharpeRatioPercent?: number;
}
/**
 * @export
 * @namespace ProgramStatistic
 */
export declare namespace ProgramStatistic {
    /**
     * @export
     * @enum {string}
     */
    enum StartCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum InvestedCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface ProgramUpdate
 */
export interface ProgramUpdate {
    /**
     *
     * @type {string}
     * @memberof ProgramUpdate
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramUpdate
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ProgramUpdate
     */
    logo?: string;
}
/**
 *
 * @export
 * @interface ProgramWithdrawInfo
 */
export interface ProgramWithdrawInfo {
    /**
     *
     * @type {Date}
     * @memberof ProgramWithdrawInfo
     */
    periodEnds?: Date;
    /**
     *
     * @type {string}
     * @memberof ProgramWithdrawInfo
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof ProgramWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramWithdrawInfo
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface ProgramsInfo
 */
export interface ProgramsInfo {
    /**
     *
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerProgramInvestment?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxEntryFee?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxSuccessFee?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerFundInvestment?: number;
    /**
     *
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxExitFee?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof ProgramsInfo
     */
    periods?: Array<number>;
}
/**
 *
 * @export
 * @interface ProgramsLevelsInfo
 */
export interface ProgramsLevelsInfo {
    /**
     *
     * @type {Array<LevelInfo>}
     * @memberof ProgramsLevelsInfo
     */
    levels?: Array<LevelInfo>;
}
/**
 *
 * @export
 * @interface ProgramsList
 */
export interface ProgramsList {
    /**
     *
     * @type {Array<ProgramDetails>}
     * @memberof ProgramsList
     */
    programs?: Array<ProgramDetails>;
    /**
     *
     * @type {number}
     * @memberof ProgramsList
     */
    total?: number;
}
/**
 *
 * @export
 * @interface RateItem
 */
export interface RateItem {
    /**
     *
     * @type {string}
     * @memberof RateItem
     */
    currency?: RateItem.CurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof RateItem
     */
    rate?: number;
}
/**
 * @export
 * @namespace RateItem
 */
export declare namespace RateItem {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface RatesModel
 */
export interface RatesModel {
    /**
     *
     * @type {RatesModelRates}
     * @memberof RatesModel
     */
    rates?: RatesModelRates;
}
/**
 *
 * @export
 * @interface RatesModelRates
 */
export interface RatesModelRates {
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    undefined?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    GVT?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    ETH?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BTC?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    ADA?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    USDT?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    XRP?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BCH?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    LTC?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    DOGE?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BNB?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    USD?: Array<RateItem>;
    /**
     *
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    EUR?: Array<RateItem>;
}
/**
 *
 * @export
 * @interface RecoveryCode
 */
export interface RecoveryCode {
    /**
     *
     * @type {string}
     * @memberof RecoveryCode
     */
    code?: string;
    /**
     *
     * @type {boolean}
     * @memberof RecoveryCode
     */
    isActive?: boolean;
}
/**
 *
 * @export
 * @interface RecoveryCodesViewModel
 */
export interface RecoveryCodesViewModel {
    /**
     *
     * @type {Array<RecoveryCode>}
     * @memberof RecoveryCodesViewModel
     */
    codes?: Array<RecoveryCode>;
    /**
     *
     * @type {string}
     * @memberof RecoveryCodesViewModel
     */
    authToken?: string;
}
/**
 *
 * @export
 * @interface RegisterInvestorViewModel
 */
export interface RegisterInvestorViewModel {
    /**
     *
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    confirmPassword?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    refCode?: string;
}
/**
 *
 * @export
 * @interface RegisterManagerViewModel
 */
export interface RegisterManagerViewModel {
    /**
     *
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    confirmPassword?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    refCode?: string;
}
/**
 *
 * @export
 * @interface ResendConfirmationViewModel
 */
export interface ResendConfirmationViewModel {
    /**
     *
     * @type {string}
     * @memberof ResendConfirmationViewModel
     */
    email: string;
}
/**
 *
 * @export
 * @interface ResetPasswordViewModel
 */
export interface ResetPasswordViewModel {
    /**
     *
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    userId: string;
    /**
     *
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    confirmPassword?: string;
}
/**
 *
 * @export
 * @interface Review
 */
export interface Review {
    /**
     *
     * @type {string}
     * @memberof Review
     */
    moderationComment?: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    clientComment?: string;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    reviewAnswer?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Review
     */
    rejectLabels?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Review
     */
    reviewRejectType?: string;
}
/**
 *
 * @export
 * @interface SearchViewModel
 */
export interface SearchViewModel {
    /**
     *
     * @type {ProgramsList}
     * @memberof SearchViewModel
     */
    programs?: ProgramsList;
    /**
     *
     * @type {FundsList}
     * @memberof SearchViewModel
     */
    funds?: FundsList;
    /**
     *
     * @type {ManagersList}
     * @memberof SearchViewModel
     */
    managers?: ManagersList;
}
/**
 *
 * @export
 * @interface TradesViewModel
 */
export interface TradesViewModel {
    /**
     *
     * @type {Array<OrderModel>}
     * @memberof TradesViewModel
     */
    trades?: Array<OrderModel>;
    /**
     *
     * @type {number}
     * @memberof TradesViewModel
     */
    total?: number;
}
/**
 *
 * @export
 * @interface TwoFactorAuthenticator
 */
export interface TwoFactorAuthenticator {
    /**
     *
     * @type {string}
     * @memberof TwoFactorAuthenticator
     */
    sharedKey?: string;
    /**
     *
     * @type {string}
     * @memberof TwoFactorAuthenticator
     */
    authenticatorUri?: string;
}
/**
 *
 * @export
 * @interface TwoFactorAuthenticatorConfirm
 */
export interface TwoFactorAuthenticatorConfirm {
    /**
     *
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    sharedKey: string;
    /**
     *
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    password: string;
}
/**
 *
 * @export
 * @interface TwoFactorCodeModel
 */
export interface TwoFactorCodeModel {
    /**
     *
     * @type {string}
     * @memberof TwoFactorCodeModel
     */
    twoFactorCode: string;
    /**
     *
     * @type {string}
     * @memberof TwoFactorCodeModel
     */
    password: string;
}
/**
 *
 * @export
 * @interface TwoFactorStatus
 */
export interface TwoFactorStatus {
    /**
     *
     * @type {boolean}
     * @memberof TwoFactorStatus
     */
    twoFactorEnabled?: boolean;
}
/**
 *
 * @export
 * @interface UpdatePersonalDetailViewModel
 */
export interface UpdatePersonalDetailViewModel {
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    middleName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    lastName?: string;
    /**
     *
     * @type {Date}
     * @memberof UpdatePersonalDetailViewModel
     */
    birthday?: Date;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    citizenship?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdatePersonalDetailViewModel
     */
    gender?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    documentId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    phoneNumber?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    index?: string;
}
/**
 *
 * @export
 * @interface UpdateProfileViewModel
 */
export interface UpdateProfileViewModel {
    /**
     *
     * @type {string}
     * @memberof UpdateProfileViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateProfileViewModel
     */
    about?: string;
}
/**
 *
 * @export
 * @interface UploadResult
 */
export interface UploadResult {
    /**
     *
     * @type {string}
     * @memberof UploadResult
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ValueChartBar
 */
export interface ValueChartBar {
    /**
     *
     * @type {number}
     * @memberof ValueChartBar
     */
    value?: number;
    /**
     *
     * @type {Date}
     * @memberof ValueChartBar
     */
    date?: Date;
    /**
     *
     * @type {Array<AssetsValue>}
     * @memberof ValueChartBar
     */
    topAssets?: Array<AssetsValue>;
    /**
     *
     * @type {OtherAssetsValue}
     * @memberof ValueChartBar
     */
    otherAssetsValue?: OtherAssetsValue;
}
/**
 *
 * @export
 * @interface WalletInfo
 */
export interface WalletInfo {
    /**
     *
     * @type {string}
     * @memberof WalletInfo
     */
    currency?: WalletInfo.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof WalletInfo
     */
    address?: string;
    /**
     *
     * @type {number}
     * @memberof WalletInfo
     */
    rateToGVT?: number;
    /**
     *
     * @type {string}
     * @memberof WalletInfo
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof WalletInfo
     */
    logo?: string;
}
/**
 * @export
 * @namespace WalletInfo
 */
export declare namespace WalletInfo {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface WalletPendingTransaction
 */
export interface WalletPendingTransaction {
    /**
     *
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    hash?: string;
    /**
     *
     * @type {number}
     * @memberof WalletPendingTransaction
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    currency?: WalletPendingTransaction.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    type?: WalletPendingTransaction.TypeEnum;
    /**
     *
     * @type {Date}
     * @memberof WalletPendingTransaction
     */
    dateCreated?: Date;
    /**
     *
     * @type {Date}
     * @memberof WalletPendingTransaction
     */
    lastUpdated?: Date;
    /**
     *
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    address?: string;
}
/**
 * @export
 * @namespace WalletPendingTransaction
 */
export declare namespace WalletPendingTransaction {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        Deposit = 0,
        Withdrawn = 1
    }
}
/**
 *
 * @export
 * @interface WalletPendingTransactionsViewModel
 */
export interface WalletPendingTransactionsViewModel {
    /**
     *
     * @type {Array<WalletPendingTransaction>}
     * @memberof WalletPendingTransactionsViewModel
     */
    transactions?: Array<WalletPendingTransaction>;
    /**
     *
     * @type {number}
     * @memberof WalletPendingTransactionsViewModel
     */
    total?: number;
}
/**
 *
 * @export
 * @interface WalletSummary
 */
export interface WalletSummary {
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    totalBalanceGVT?: number;
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    totalBalanceCurrency?: number;
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    investedGVT?: number;
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    investedCurrency?: number;
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    availableGVT?: number;
    /**
     *
     * @type {number}
     * @memberof WalletSummary
     */
    availableCurrency?: number;
}
/**
 *
 * @export
 * @interface WalletTransaction
 */
export interface WalletTransaction {
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof WalletTransaction
     */
    amount?: number;
    /**
     *
     * @type {number}
     * @memberof WalletTransaction
     */
    amountConverted?: number;
    /**
     *
     * @type {Date}
     * @memberof WalletTransaction
     */
    date?: Date;
    /**
     *
     * @type {number}
     * @memberof WalletTransaction
     */
    number?: number;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceType?: WalletTransaction.SourceTypeEnum;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceCurrency?: WalletTransaction.SourceCurrencyEnum;
    /**
     *
     * @type {ProgramInfo}
     * @memberof WalletTransaction
     */
    sourceProgramInfo?: ProgramInfo;
    /**
     *
     * @type {BlockchainInfo}
     * @memberof WalletTransaction
     */
    sourceBlockchainInfo?: BlockchainInfo;
    /**
     *
     * @type {WithdrawalInfo}
     * @memberof WalletTransaction
     */
    sourceWithdrawalInfo?: WithdrawalInfo;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    action?: WalletTransaction.ActionEnum;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    information?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationId?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationType?: WalletTransaction.DestinationTypeEnum;
    /**
     *
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationCurrency?: WalletTransaction.DestinationCurrencyEnum;
    /**
     *
     * @type {ProgramInfo}
     * @memberof WalletTransaction
     */
    destinationProgramInfo?: ProgramInfo;
    /**
     *
     * @type {BlockchainInfo}
     * @memberof WalletTransaction
     */
    destinationBlockchainInfo?: BlockchainInfo;
    /**
     *
     * @type {WithdrawalInfo}
     * @memberof WalletTransaction
     */
    destinationWithdrawalInfo?: WithdrawalInfo;
}
/**
 * @export
 * @namespace WalletTransaction
 */
export declare namespace WalletTransaction {
    /**
     * @export
     * @enum {string}
     */
    enum SourceTypeEnum {
        Wallet = 0,
        Program = 1,
        Fund = 2,
        ProgramRequest = 3,
        FundRequest = 4,
        WithdrawalRequest = 5,
        PaymentTransaction = 6
    }
    /**
     * @export
     * @enum {string}
     */
    enum SourceCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
    /**
     * @export
     * @enum {string}
     */
    enum ActionEnum {
        Transfer = 0,
        ProgramOpen = 1,
        ProgramProfit = 2,
        ProgramInvest = 3,
        ProgramWithdrawal = 4,
        ProgramRefundPartialExecution = 5,
        ProgramRefundClose = 6,
        ProgramRequestInvest = 7,
        ProgramRequestWithdrawal = 8,
        ProgramRequestCancel = 9
    }
    /**
     * @export
     * @enum {string}
     */
    enum DestinationTypeEnum {
        Wallet = 0,
        Program = 1,
        Fund = 2,
        ProgramRequest = 3,
        FundRequest = 4,
        WithdrawalRequest = 5,
        PaymentTransaction = 6
    }
    /**
     * @export
     * @enum {string}
     */
    enum DestinationCurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface WalletTransactionsViewModel
 */
export interface WalletTransactionsViewModel {
    /**
     *
     * @type {Array<WalletTransaction>}
     * @memberof WalletTransactionsViewModel
     */
    transactions?: Array<WalletTransaction>;
    /**
     *
     * @type {number}
     * @memberof WalletTransactionsViewModel
     */
    total?: number;
}
/**
 *
 * @export
 * @interface WalletWithdrawalInfo
 */
export interface WalletWithdrawalInfo {
    /**
     *
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    currency?: WalletWithdrawalInfo.CurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    logo?: string;
    /**
     *
     * @type {number}
     * @memberof WalletWithdrawalInfo
     */
    commission?: number;
    /**
     *
     * @type {number}
     * @memberof WalletWithdrawalInfo
     */
    rateToGvt?: number;
}
/**
 * @export
 * @namespace WalletWithdrawalInfo
 */
export declare namespace WalletWithdrawalInfo {
    /**
     * @export
     * @enum {string}
     */
    enum CurrencyEnum {
        Undefined = 0,
        GVT = 1,
        ETH = 2,
        BTC = 3,
        ADA = 4,
        USDT = 5,
        XRP = 6,
        BCH = 7,
        LTC = 8,
        DOGE = 9,
        BNB = 10,
        USD = 11,
        EUR = 12
    }
}
/**
 *
 * @export
 * @interface WalletsInfo
 */
export interface WalletsInfo {
    /**
     *
     * @type {Array<WalletInfo>}
     * @memberof WalletsInfo
     */
    wallets?: Array<WalletInfo>;
}
/**
 *
 * @export
 * @interface WithdrawalInfo
 */
export interface WithdrawalInfo {
    /**
     *
     * @type {string}
     * @memberof WithdrawalInfo
     */
    wallet?: string;
    /**
     *
     * @type {string}
     * @memberof WithdrawalInfo
     */
    status?: WithdrawalInfo.StatusEnum;
    /**
     *
     * @type {boolean}
     * @memberof WithdrawalInfo
     */
    canResendEmail?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WithdrawalInfo
     */
    canCancelRequest?: boolean;
}
/**
 * @export
 * @namespace WithdrawalInfo
 */
export declare namespace WithdrawalInfo {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        New = 0,
        InProcess = 1,
        Done = 2,
        Error = 3,
        Rejected = 4,
        Cancelled = 5
    }
}
/**
 *
 * @export
 * @interface WithdrawalSummary
 */
export interface WithdrawalSummary {
    /**
     *
     * @type {number}
     * @memberof WithdrawalSummary
     */
    availableToWithdrawal?: number;
    /**
     *
     * @type {Array<WalletWithdrawalInfo>}
     * @memberof WithdrawalSummary
     */
    wallets?: Array<WalletWithdrawalInfo>;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export declare const AuthApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
     * @param {TwoFactorAuthenticatorConfirm} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): FetchArgs;
    /**
     *
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faCreatePost(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary 2FA disable
     * @param {string} authorization JWT access token
     * @param {TwoFactorCodeModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): FetchArgs;
    /**
     *
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): FetchArgs;
    /**
     *
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): FetchArgs;
    /**
     *
     * @summary Change password
     * @param {string} authorization JWT access token
     * @param {ChangePasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Forgot password for investor
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Forgot password for manager
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneCodePost(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Verify phone number
     * @param {string} authorization JWT access token
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Resend Confirmation Link
     * @param {ResendConfirmationViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Confirm email after registration
     * @param {string} [userId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): FetchArgs;
    /**
     *
     * @summary New investor registration
     * @param {RegisterInvestorViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary New manager registration
     * @param {RegisterManagerViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenUpdatePost(authorization: string, options?: any): FetchArgs;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
     * @param {TwoFactorAuthenticatorConfirm} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faCreatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator>;
    /**
     *
     * @summary 2FA disable
     * @param {string} authorization JWT access token
     * @param {TwoFactorCodeModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorStatus>;
    /**
     *
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary Change password
     * @param {string} authorization JWT access token
     * @param {ChangePasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Forgot password for investor
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Forgot password for manager
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneCodePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Verify phone number
     * @param {string} authorization JWT access token
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Resend Confirmation Link
     * @param {ResendConfirmationViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Confirm email after registration
     * @param {string} [userId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary New investor registration
     * @param {RegisterInvestorViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary New manager registration
     * @param {RegisterManagerViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenUpdatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
     * @param {TwoFactorAuthenticatorConfirm} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faCreatePost(authorization: string, options?: any): Promise<TwoFactorAuthenticator>;
    /**
     *
     * @summary 2FA disable
     * @param {string} authorization JWT access token
     * @param {TwoFactorCodeModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): Promise<Response>;
    /**
     *
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faGet(authorization: string, options?: any): Promise<TwoFactorStatus>;
    /**
     *
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary Change password
     * @param {string} authorization JWT access token
     * @param {ChangePasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Forgot password for investor
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Forgot password for manager
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneCodePost(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Verify phone number
     * @param {string} authorization JWT access token
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Resend Confirmation Link
     * @param {ResendConfirmationViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Confirm email after registration
     * @param {string} [userId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): Promise<string>;
    /**
     *
     * @summary New investor registration
     * @param {RegisterInvestorViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary New manager registration
     * @param {RegisterManagerViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): Promise<string>;
    /**
     *
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10AuthTokenUpdatePost(authorization: string, options?: any): Promise<string>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
     * @param {TwoFactorAuthenticatorConfirm} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faCreatePost(authorization: string, options?: any): Promise<TwoFactorAuthenticator>;
    /**
     *
     * @summary 2FA disable
     * @param {string} authorization JWT access token
     * @param {TwoFactorCodeModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): Promise<Response>;
    /**
     *
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faGet(authorization: string, options?: any): Promise<TwoFactorStatus>;
    /**
     *
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): Promise<RecoveryCodesViewModel>;
    /**
     *
     * @summary Change password
     * @param {string} authorization JWT access token
     * @param {ChangePasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Forgot password for investor
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Forgot password for manager
     * @param {ForgotPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPhoneCodePost(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Verify phone number
     * @param {string} authorization JWT access token
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Resend Confirmation Link
     * @param {ResendConfirmationViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Authorize
     * @param {LoginViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): Promise<string>;
    /**
     *
     * @summary Confirm email after registration
     * @param {string} [userId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): Promise<string>;
    /**
     *
     * @summary New investor registration
     * @param {RegisterInvestorViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary New manager registration
     * @param {RegisterManagerViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): Promise<string>;
    /**
     *
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    v10AuthTokenUpdatePost(authorization: string, options?: any): Promise<string>;
}
/**
 * BrokersApi - fetch parameter creator
 * @export
 */
export declare const BrokersApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10BrokersGet(options?: any): FetchArgs;
};
/**
 * BrokersApi - functional programming interface
 * @export
 */
export declare const BrokersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10BrokersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersInfo>;
};
/**
 * BrokersApi - factory interface
 * @export
 */
export declare const BrokersApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10BrokersGet(options?: any): Promise<BrokersInfo>;
};
/**
 * BrokersApi - object-oriented interface
 * @export
 * @class BrokersApi
 * @extends {BaseAPI}
 */
export declare class BrokersApi extends BaseAPI {
    /**
     *
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrokersApi
     */
    v10BrokersGet(options?: any): Promise<BrokersInfo>;
}
/**
 * FileApi - fetch parameter creator
 * @export
 */
export declare const FileApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Download file
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileByIdGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): FetchArgs;
    /**
     *
     * @summary Upload file
     * @param {any} uploadedFile Upload File
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): FetchArgs;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Download file
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult>;
    /**
     *
     * @summary Upload file
     * @param {any} uploadedFile Upload File
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Download file
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileByIdGet(id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): Promise<UploadResult>;
    /**
     *
     * @summary Upload file
     * @param {any} uploadedFile Upload File
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): Promise<UploadResult>;
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     *
     * @summary Download file
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    v10FileByIdGet(id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): Promise<UploadResult>;
    /**
     *
     * @summary Upload file
     * @param {any} uploadedFile Upload File
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): Promise<UploadResult>;
}
/**
 * FundsApi - fetch parameter creator
 * @export
 */
export declare const FundsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsAssetsGet(options?: any): FetchArgs;
    /**
     *
     * @summary Fund assets info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdAssetsGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Fund balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Fund profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Funds details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Funds list
     * @param {string} [authorization]
     * @param {string} [sorting]
     * @param {string} [currencySecondary]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsSetsGet(authorization: string, options?: any): FetchArgs;
};
/**
 * FundsApi - functional programming interface
 * @export
 */
export declare const FundsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsAssetsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformAssets>;
    /**
     *
     * @summary Fund assets info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdAssetsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundAssetsListInfo>;
    /**
     *
     * @summary Fund balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundBalanceChart>;
    /**
     *
     * @summary Fund profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Funds details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundDetailsFull>;
    /**
     *
     * @summary Funds list
     * @param {string} [authorization]
     * @param {string} [sorting]
     * @param {string} [currencySecondary]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    /**
     *
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets>;
};
/**
 * FundsApi - factory interface
 * @export
 */
export declare const FundsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsAssetsGet(options?: any): Promise<PlatformAssets>;
    /**
     *
     * @summary Fund assets info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdAssetsGet(id: string, options?: any): Promise<FundAssetsListInfo>;
    /**
     *
     * @summary Fund balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<FundBalanceChart>;
    /**
     *
     * @summary Fund profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<FundProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Funds details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): Promise<FundDetailsFull>;
    /**
     *
     * @summary Funds list
     * @param {string} [authorization]
     * @param {string} [sorting]
     * @param {string} [currencySecondary]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10FundsSetsGet(authorization: string, options?: any): Promise<ProgramSets>;
};
/**
 * FundsApi - object-oriented interface
 * @export
 * @class FundsApi
 * @extends {BaseAPI}
 */
export declare class FundsApi extends BaseAPI {
    /**
     *
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsAssetsGet(options?: any): Promise<PlatformAssets>;
    /**
     *
     * @summary Fund assets info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdAssetsGet(id: string, options?: any): Promise<FundAssetsListInfo>;
    /**
     *
     * @summary Fund balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<FundBalanceChart>;
    /**
     *
     * @summary Fund profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<FundProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Funds details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): Promise<FundDetailsFull>;
    /**
     *
     * @summary Funds list
     * @param {string} [authorization]
     * @param {string} [sorting]
     * @param {string} [currencySecondary]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    v10FundsSetsGet(authorization: string, options?: any): Promise<ProgramSets>;
}
/**
 * InvestorApi - fetch parameter creator
 * @export
 */
export declare const InvestorApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Investing into the fund
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Funds list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
     * @param {string} [chartCurrency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {number} [eventsTake]
     * @param {number} [requestsSkip]
     * @param {number} [requestsTake]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
     * @param {string} [currency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Portfolio events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Investing into the program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Disable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Enable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Withdraw from investment program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Cancel investment program request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): FetchArgs;
};
/**
 * InvestorApi - functional programming interface
 * @export
 */
export declare const InvestorApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Investing into the fund
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundWithdrawInfo>;
    /**
     *
     * @summary Funds list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    /**
     *
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
     * @param {string} [chartCurrency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {number} [eventsTake]
     * @param {number} [requestsSkip]
     * @param {number} [requestsTake]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardSummary>;
    /**
     *
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
     * @param {string} [currency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardChartValue>;
    /**
     *
     * @summary Portfolio events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardPortfolioEvents>;
    /**
     *
     * @summary Investing into the program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Disable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Enable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from investment program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramWithdrawInfo>;
    /**
     *
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    /**
     *
     * @summary Cancel investment program request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
};
/**
 * InvestorApi - factory interface
 * @export
 */
export declare const InvestorApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Investing into the fund
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundInvestInfo>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundWithdrawInfo>;
    /**
     *
     * @summary Funds list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
     * @param {string} [chartCurrency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {number} [eventsTake]
     * @param {number} [requestsSkip]
     * @param {number} [requestsTake]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): Promise<DashboardSummary>;
    /**
     *
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
     * @param {string} [currency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): Promise<DashboardChartValue>;
    /**
     *
     * @summary Portfolio events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<DashboardPortfolioEvents>;
    /**
     *
     * @summary Investing into the program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Disable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Enable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from investment program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramWithdrawInfo>;
    /**
     *
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Cancel investment program request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
};
/**
 * InvestorApi - object-oriented interface
 * @export
 * @class InvestorApi
 * @extends {BaseAPI}
 */
export declare class InvestorApi extends BaseAPI {
    /**
     *
     * @summary Investing into the fund
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundInvestInfo>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundWithdrawInfo>;
    /**
     *
     * @summary Funds list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
     * @param {string} [chartCurrency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {number} [eventsTake]
     * @param {number} [requestsSkip]
     * @param {number} [requestsTake]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): Promise<DashboardSummary>;
    /**
     *
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
     * @param {string} [currency]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [balancePoints]
     * @param {number} [programsPoints]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): Promise<DashboardChartValue>;
    /**
     *
     * @summary Portfolio events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<DashboardPortfolioEvents>;
    /**
     *
     * @summary Investing into the program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Disable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Enable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Withdraw from investment program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramWithdrawInfo>;
    /**
     *
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Cancel investment program request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
}
/**
 * KycApi - fetch parameter creator
 * @export
 */
export declare const KycApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {KycCallback} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10KycCallbackPost(model?: KycCallback, options?: any): FetchArgs;
};
/**
 * KycApi - functional programming interface
 * @export
 */
export declare const KycApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {KycCallback} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10KycCallbackPost(model?: KycCallback, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
/**
 * KycApi - factory interface
 * @export
 */
export declare const KycApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {KycCallback} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10KycCallbackPost(model?: KycCallback, options?: any): Promise<string>;
};
/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
export declare class KycApi extends BaseAPI {
    /**
     *
     * @param {KycCallback} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    v10KycCallbackPost(model?: KycCallback, options?: any): Promise<string>;
}
/**
 * ManagerApi - fetch parameter creator
 * @export
 */
export declare const ManagerApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerAssetsGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Manager details
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdDetailsGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Manager profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Manager events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Update fund assets parts
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {Array<FundAssetPart>} [assets]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: FundAssetPart[], options?: any): FetchArgs;
    /**
     *
     * @summary Close existing fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): FetchArgs;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Create fund
     * @param {string} authorization JWT access token
     * @param {NewFundRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): FetchArgs;
    /**
     *
     * @summary Manager funds
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Close existing investment program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Close current period
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): FetchArgs;
    /**
     *
     * @summary Withdraw from program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Create an investment program
     * @param {string} authorization JWT access token
     * @param {NewProgramRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): FetchArgs;
    /**
     *
     * @summary Manager programs
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): FetchArgs;
};
/**
 * ManagerApi - functional programming interface
 * @export
 */
export declare const ManagerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerAssetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerAssets>;
    /**
     *
     * @summary Manager details
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdDetailsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfileDetails>;
    /**
     *
     * @summary Manager profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfile>;
    /**
     *
     * @summary Manager events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerPortfolioEvents>;
    /**
     *
     * @summary Update fund assets parts
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {Array<FundAssetPart>} [assets]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: FundAssetPart[], options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Close existing fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerFundWithdrawInfo>;
    /**
     *
     * @summary Create fund
     * @param {string} authorization JWT access token
     * @param {NewFundRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Manager funds
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    /**
     *
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerDashboard>;
    /**
     *
     * @summary Close existing investment program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Close current period
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Withdraw from program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramWithdrawInfo>;
    /**
     *
     * @summary Create an investment program
     * @param {string} authorization JWT access token
     * @param {NewProgramRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Manager programs
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    /**
     *
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
};
/**
 * ManagerApi - factory interface
 * @export
 */
export declare const ManagerApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerAssetsGet(authorization: string, options?: any): Promise<ManagerAssets>;
    /**
     *
     * @summary Manager details
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdDetailsGet(id: string, options?: any): Promise<ManagerProfileDetails>;
    /**
     *
     * @summary Manager profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerByIdGet(id: string, options?: any): Promise<ManagerProfile>;
    /**
     *
     * @summary Manager events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<ManagerPortfolioEvents>;
    /**
     *
     * @summary Update fund assets parts
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {Array<FundAssetPart>} [assets]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: FundAssetPart[], options?: any): Promise<Response>;
    /**
     *
     * @summary Close existing fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundInvestInfo>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): Promise<Response>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ManagerFundWithdrawInfo>;
    /**
     *
     * @summary Create fund
     * @param {string} authorization JWT access token
     * @param {NewFundRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager funds
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<ManagerDashboard>;
    /**
     *
     * @summary Close existing investment program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Close current period
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): Promise<Response>;
    /**
     *
     * @summary Withdraw from program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ManagerProgramWithdrawInfo>;
    /**
     *
     * @summary Create an investment program
     * @param {string} authorization JWT access token
     * @param {NewProgramRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager programs
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
};
/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export declare class ManagerApi extends BaseAPI {
    /**
     *
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerAssetsGet(authorization: string, options?: any): Promise<ManagerAssets>;
    /**
     *
     * @summary Manager details
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerByIdDetailsGet(id: string, options?: any): Promise<ManagerProfileDetails>;
    /**
     *
     * @summary Manager profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerByIdGet(id: string, options?: any): Promise<ManagerProfile>;
    /**
     *
     * @summary Manager events
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<ManagerPortfolioEvents>;
    /**
     *
     * @summary Update fund assets parts
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {Array<FundAssetPart>} [assets]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options?: any): Promise<Response>;
    /**
     *
     * @summary Close existing fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<FundInvestInfo>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): Promise<Response>;
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ManagerFundWithdrawInfo>;
    /**
     *
     * @summary Create fund
     * @param {string} authorization JWT access token
     * @param {NewFundRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager funds
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<FundsList>;
    /**
     *
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [type]
     * @param {string} [assetType]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): Promise<ManagerDashboard>;
    /**
     *
     * @summary Close existing investment program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ProgramInvestInfo>;
    /**
     *
     * @summary Close current period
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): Promise<Response>;
    /**
     *
     * @summary Withdraw from program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): Promise<ManagerProgramWithdrawInfo>;
    /**
     *
     * @summary Create an investment program
     * @param {string} authorization JWT access token
     * @param {NewProgramRequest} [request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Manager programs
     * @param {string} authorization JWT access token
     * @param {string} [sorting]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {number} [chartPointsCount]
     * @param {string} [currencySecondary]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): Promise<ProgramRequests>;
}
/**
 * NotificationsApi - fetch parameter creator
 * @export
 */
export declare const NotificationsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary User notifications
     * @param {string} authorization JWT access token
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsNewGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Add new setting
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {string} [managerId]
     * @param {string} [type]
     * @param {string} [conditionType]
     * @param {number} [conditionAmount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Enable/disable setting
     * @param {string} id
     * @param {boolean} enable
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary User settings for fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary User settings for manager
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary User settings for program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Remove setting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): FetchArgs;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary User notifications
     * @param {string} authorization JWT access token
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationList>;
    /**
     *
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsNewGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Add new setting
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {string} [managerId]
     * @param {string} [type]
     * @param {string} [conditionType]
     * @param {number} [conditionAmount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary Enable/disable setting
     * @param {string} id
     * @param {boolean} enable
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    /**
     *
     * @summary User settings for fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundNotificationSettingList>;
    /**
     *
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationSettingList>;
    /**
     *
     * @summary User settings for manager
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerNotificationSettingList>;
    /**
     *
     * @summary User settings for program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramNotificationSettingList>;
    /**
     *
     * @summary Remove setting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary User notifications
     * @param {string} authorization JWT access token
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): Promise<NotificationList>;
    /**
     *
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsNewGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Add new setting
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {string} [managerId]
     * @param {string} [type]
     * @param {string} [conditionType]
     * @param {number} [conditionAmount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): Promise<string>;
    /**
     *
     * @summary Enable/disable setting
     * @param {string} id
     * @param {boolean} enable
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): Promise<string>;
    /**
     *
     * @summary User settings for fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): Promise<FundNotificationSettingList>;
    /**
     *
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsGet(authorization: string, options?: any): Promise<NotificationSettingList>;
    /**
     *
     * @summary User settings for manager
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): Promise<ManagerNotificationSettingList>;
    /**
     *
     * @summary User settings for program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): Promise<ProgramNotificationSettingList>;
    /**
     *
     * @summary Remove setting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): Promise<Response>;
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI {
    /**
     *
     * @summary User notifications
     * @param {string} authorization JWT access token
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): Promise<NotificationList>;
    /**
     *
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsNewGet(authorization: string, options?: any): Promise<number>;
    /**
     *
     * @summary Add new setting
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {string} [managerId]
     * @param {string} [type]
     * @param {string} [conditionType]
     * @param {number} [conditionAmount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): Promise<string>;
    /**
     *
     * @summary Enable/disable setting
     * @param {string} id
     * @param {boolean} enable
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): Promise<string>;
    /**
     *
     * @summary User settings for fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): Promise<FundNotificationSettingList>;
    /**
     *
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsGet(authorization: string, options?: any): Promise<NotificationSettingList>;
    /**
     *
     * @summary User settings for manager
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): Promise<ManagerNotificationSettingList>;
    /**
     *
     * @summary User settings for program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): Promise<ProgramNotificationSettingList>;
    /**
     *
     * @summary Remove setting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): Promise<Response>;
}
/**
 * PlatformApi - fetch parameter creator
 * @export
 */
export declare const PlatformApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformInfoGet(options?: any): FetchArgs;
    /**
     *
     * @summary Investment programs levels
     * @param {string} [currency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformLevelsGet(currency?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformStatisticGet(options?: any): FetchArgs;
};
/**
 * PlatformApi - functional programming interface
 * @export
 */
export declare const PlatformApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformInfoGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformInfo>;
    /**
     *
     * @summary Investment programs levels
     * @param {string} [currency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformLevelsGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsLevelsInfo>;
    /**
     *
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformStatisticGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformStatistic>;
};
/**
 * PlatformApi - factory interface
 * @export
 */
export declare const PlatformApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformInfoGet(options?: any): Promise<PlatformInfo>;
    /**
     *
     * @summary Investment programs levels
     * @param {string} [currency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformLevelsGet(currency?: string, options?: any): Promise<ProgramsLevelsInfo>;
    /**
     *
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10PlatformStatisticGet(options?: any): Promise<PlatformStatistic>;
};
/**
 * PlatformApi - object-oriented interface
 * @export
 * @class PlatformApi
 * @extends {BaseAPI}
 */
export declare class PlatformApi extends BaseAPI {
    /**
     *
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    v10PlatformInfoGet(options?: any): Promise<PlatformInfo>;
    /**
     *
     * @summary Investment programs levels
     * @param {string} [currency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    v10PlatformLevelsGet(currency?: string, options?: any): Promise<ProgramsLevelsInfo>;
    /**
     *
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    v10PlatformStatisticGet(options?: any): Promise<PlatformStatistic>;
}
/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export declare const ProfileApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarRemovePost(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Update avatar
     * @param {string} fileId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileHeaderGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Update user personal details
     * @param {string} authorization JWT access token
     * @param {UpdatePersonalDetailViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): FetchArgs;
    /**
     *
     * @summary Update profile
     * @param {string} authorization JWT access token
     * @param {UpdateProfileViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): FetchArgs;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileVerificationTokenPost(authorization: string, options?: any): FetchArgs;
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
export declare const ProfileApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarRemovePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Update avatar
     * @param {string} fileId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileFullViewModel>;
    /**
     *
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileHeaderGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileHeaderViewModel>;
    /**
     *
     * @summary Update user personal details
     * @param {string} authorization JWT access token
     * @param {UpdatePersonalDetailViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Update profile
     * @param {string} authorization JWT access token
     * @param {UpdateProfileViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileVerificationTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
/**
 * ProfileApi - factory interface
 * @export
 */
export declare const ProfileApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarRemovePost(authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Update avatar
     * @param {string} fileId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileGet(authorization: string, options?: any): Promise<ProfileFullViewModel>;
    /**
     *
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileHeaderGet(authorization: string, options?: any): Promise<ProfileHeaderViewModel>;
    /**
     *
     * @summary Update user personal details
     * @param {string} authorization JWT access token
     * @param {UpdatePersonalDetailViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Update profile
     * @param {string} authorization JWT access token
     * @param {UpdateProfileViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProfileVerificationTokenPost(authorization: string, options?: any): Promise<string>;
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export declare class ProfileApi extends BaseAPI {
    /**
     *
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileAvatarRemovePost(authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Update avatar
     * @param {string} fileId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileGet(authorization: string, options?: any): Promise<ProfileFullViewModel>;
    /**
     *
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileHeaderGet(authorization: string, options?: any): Promise<ProfileHeaderViewModel>;
    /**
     *
     * @summary Update user personal details
     * @param {string} authorization JWT access token
     * @param {UpdatePersonalDetailViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): Promise<Response>;
    /**
     *
     * @summary Update profile
     * @param {string} authorization JWT access token
     * @param {UpdateProfileViewModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    v10ProfileVerificationTokenPost(authorization: string, options?: any): Promise<string>;
}
/**
 * ProgramsApi - fetch parameter creator
 * @export
 */
export declare const ProgramsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Program balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Program profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Program details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Trade history
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {string} [symbol]
     * @param {string} [sorting]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Programs list
     * @param {string} [authorization]
     * @param {number} [levelMin]
     * @param {number} [levelMax]
     * @param {number} [profitAvgMin]
     * @param {number} [profitAvgMax]
     * @param {string} [sorting]
     * @param {string} [programCurrency]
     * @param {string} [currencySecondary]
     * @param {number} [levelUpFrom]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Level up summary
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): FetchArgs;
    /**
     *
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsSetsGet(authorization: string, options?: any): FetchArgs;
};
/**
 * ProgramsApi - functional programming interface
 * @export
 */
export declare const ProgramsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Program balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramBalanceChart>;
    /**
     *
     * @summary Program profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Program details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramDetailsFull>;
    /**
     *
     * @summary Trade history
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {string} [symbol]
     * @param {string} [sorting]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel>;
    /**
     *
     * @summary Programs list
     * @param {string} [authorization]
     * @param {number} [levelMin]
     * @param {number} [levelMax]
     * @param {number} [profitAvgMin]
     * @param {number} [profitAvgMax]
     * @param {string} [sorting]
     * @param {string} [programCurrency]
     * @param {string} [currencySecondary]
     * @param {number} [levelUpFrom]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    /**
     *
     * @summary Level up summary
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelUpSummary>;
    /**
     *
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets>;
};
/**
 * ProgramsApi - factory interface
 * @export
 */
export declare const ProgramsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Program balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<ProgramBalanceChart>;
    /**
     *
     * @summary Program profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<ProgramProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Program details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): Promise<ProgramDetailsFull>;
    /**
     *
     * @summary Trade history
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {string} [symbol]
     * @param {string} [sorting]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any): Promise<TradesViewModel>;
    /**
     *
     * @summary Programs list
     * @param {string} [authorization]
     * @param {number} [levelMin]
     * @param {number} [levelMax]
     * @param {number} [profitAvgMin]
     * @param {number} [profitAvgMax]
     * @param {string} [sorting]
     * @param {string} [programCurrency]
     * @param {string} [currencySecondary]
     * @param {number} [levelUpFrom]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: string[], managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Level up summary
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): Promise<LevelUpSummary>;
    /**
     *
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10ProgramsSetsGet(authorization: string, options?: any): Promise<ProgramSets>;
};
/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export declare class ProgramsApi extends BaseAPI {
    /**
     *
     * @summary Program balance chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<ProgramBalanceChart>;
    /**
     *
     * @summary Program profit chart
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {number} [maxPointCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): Promise<ProgramProfitChart>;
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Program details
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [currencySecondary]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): Promise<ProgramDetailsFull>;
    /**
     *
     * @summary Trade history
     * @param {string} id
     * @param {Date} [dateFrom]
     * @param {Date} [dateTo]
     * @param {string} [symbol]
     * @param {string} [sorting]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any): Promise<TradesViewModel>;
    /**
     *
     * @summary Programs list
     * @param {string} [authorization]
     * @param {number} [levelMin]
     * @param {number} [levelMax]
     * @param {number} [profitAvgMin]
     * @param {number} [profitAvgMax]
     * @param {string} [sorting]
     * @param {string} [programCurrency]
     * @param {string} [currencySecondary]
     * @param {number} [levelUpFrom]
     * @param {Date} [statisticDateFrom]
     * @param {Date} [statisticDateTo]
     * @param {number} [chartPointsCount]
     * @param {string} [mask]
     * @param {string} [facetId]
     * @param {boolean} [isFavorite]
     * @param {boolean} [isEnabled]
     * @param {Array<string>} [ids]
     * @param {string} [managerId]
     * @param {string} [programManagerId]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): Promise<ProgramsList>;
    /**
     *
     * @summary Level up summary
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): Promise<LevelUpSummary>;
    /**
     *
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    v10ProgramsSetsGet(authorization: string, options?: any): Promise<ProgramSets>;
}
/**
 * RateApi - fetch parameter creator
 * @export
 */
export declare const RateApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get rate
     * @param {string} exchange
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get rate
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByFromByToGet(from: string, to: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get rates
     * @param {Array<string>} [from]
     * @param {Array<string>} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateGet(from?: string[], to?: string[], options?: any): FetchArgs;
};
/**
 * RateApi - functional programming interface
 * @export
 */
export declare const RateApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get rate
     * @param {string} exchange
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Get rate
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByFromByToGet(from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    /**
     *
     * @summary Get rates
     * @param {Array<string>} [from]
     * @param {Array<string>} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateGet(from?: string[], to?: string[], options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatesModel>;
};
/**
 * RateApi - factory interface
 * @export
 */
export declare const RateApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get rate
     * @param {string} exchange
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): Promise<number>;
    /**
     *
     * @summary Get rate
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateByFromByToGet(from: string, to: string, options?: any): Promise<number>;
    /**
     *
     * @summary Get rates
     * @param {Array<string>} [from]
     * @param {Array<string>} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10RateGet(from?: string[], to?: string[], options?: any): Promise<RatesModel>;
};
/**
 * RateApi - object-oriented interface
 * @export
 * @class RateApi
 * @extends {BaseAPI}
 */
export declare class RateApi extends BaseAPI {
    /**
     *
     * @summary Get rate
     * @param {string} exchange
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): Promise<number>;
    /**
     *
     * @summary Get rate
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    v10RateByFromByToGet(from: string, to: string, options?: any): Promise<number>;
    /**
     *
     * @summary Get rates
     * @param {Array<string>} [from]
     * @param {Array<string>} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    v10RateGet(from?: Array<string>, to?: Array<string>, options?: any): Promise<RatesModel>;
}
/**
 * SearchApi - fetch parameter creator
 * @export
 */
export declare const SearchApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Program / fund / manager search
     * @param {string} [mask]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10SearchGet(mask?: string, take?: number, options?: any): FetchArgs;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Program / fund / manager search
     * @param {string} [mask]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10SearchGet(mask?: string, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchViewModel>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Program / fund / manager search
     * @param {string} [mask]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10SearchGet(mask?: string, take?: number, options?: any): Promise<SearchViewModel>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     *
     * @summary Program / fund / manager search
     * @param {string} [mask]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    v10SearchGet(mask?: string, take?: number, options?: any): Promise<SearchViewModel>;
}
/**
 * WalletApi - fetch parameter creator
 * @export
 */
export declare const WalletApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletAddressesGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Wallet summary
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [assetType]
     * @param {string} [txAction]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsPendingGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawInfoGet(authorization: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} [requestId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {CreateWithdrawalRequestModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): FetchArgs;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): FetchArgs;
};
/**
 * WalletApi - functional programming interface
 * @export
 */
export declare const WalletApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletAddressesGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletsInfo>;
    /**
     *
     * @summary Wallet summary
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletSummary>;
    /**
     *
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [assetType]
     * @param {string} [txAction]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletTransactionsViewModel>;
    /**
     *
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsPendingGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletPendingTransactionsViewModel>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawInfoGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WithdrawalSummary>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @param {string} [requestId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {CreateWithdrawalRequestModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
};
/**
 * WalletApi - factory interface
 * @export
 */
export declare const WalletApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletAddressesGet(authorization: string, options?: any): Promise<WalletsInfo>;
    /**
     *
     * @summary Wallet summary
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): Promise<WalletSummary>;
    /**
     *
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [assetType]
     * @param {string} [txAction]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any): Promise<WalletTransactionsViewModel>;
    /**
     *
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletTransactionsPendingGet(authorization: string, options?: any): Promise<WalletPendingTransactionsViewModel>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawInfoGet(authorization: string, options?: any): Promise<WithdrawalSummary>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @param {string} [requestId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {CreateWithdrawalRequestModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): Promise<Response>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): Promise<Response>;
};
/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export declare class WalletApi extends BaseAPI {
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletAddressesGet(authorization: string, options?: any): Promise<WalletsInfo>;
    /**
     *
     * @summary Wallet summary
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): Promise<WalletSummary>;
    /**
     *
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
     * @param {string} [assetId]
     * @param {Date} [from]
     * @param {Date} [to]
     * @param {string} [assetType]
     * @param {string} [txAction]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any): Promise<WalletTransactionsViewModel>;
    /**
     *
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletTransactionsPendingGet(authorization: string, options?: any): Promise<WalletPendingTransactionsViewModel>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletWithdrawInfoGet(authorization: string, options?: any): Promise<WithdrawalSummary>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): Promise<Response>;
    /**
     *
     * @param {string} [requestId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): Promise<Response>;
    /**
     *
     * @param {string} authorization JWT access token
     * @param {CreateWithdrawalRequestModel} [model]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): Promise<Response>;
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): Promise<Response>;
}
