'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v1.0
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 

his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _FundWithdrawInfo = require('../model/FundWithdrawInfo');

var _FundWithdrawInfo2 = _interopRequireDefault(_FundWithdrawInfo);

var _ManagerProfile = require('../model/ManagerProfile');

var _ManagerProfile2 = _interopRequireDefault(_ManagerProfile);

var _ManagerProfileDetails = require('../model/ManagerProfileDetails');

var _ManagerProfileDetails2 = _interopRequireDefault(_ManagerProfileDetails);

var _ManagerProgramWithdrawInfo = require('../model/ManagerProgramWithdrawInfo');

var _ManagerProgramWithdrawInfo2 = _interopRequireDefault(_ManagerProgramWithdrawInfo);

var _NewFundRequest = require('../model/NewFundRequest');

var _NewFundRequest2 = _interopRequireDefault(_NewFundRequest);

var _NewProgramRequest = require('../model/NewProgramRequest');

var _NewProgramRequest2 = _interopRequireDefault(_NewProgramRequest);

var _ProgramRequests = require('../model/ProgramRequests');

var _ProgramRequests2 = _interopRequireDefault(_ProgramRequests);

var _ProgramUpdate = require('../model/ProgramUpdate');

var _ProgramUpdate2 = _interopRequireDefault(_ProgramUpdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Managers service.
* @module api/ManagersApi
* @version v1.0
*/
var ManagersApi = function () {

  /**
  * Constructs a new ManagersApi. 
  * @alias module:api/ManagersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ManagersApi(apiClient) {
    _classCallCheck(this, ManagersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Manager details
   * @param {String} id 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagerProfileDetails} and HTTP response
   */


  _createClass(ManagersApi, [{
    key: 'v10ManagersByIdDetailsGetWithHttpInfo',
    value: function v10ManagersByIdDetailsGetWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersByIdDetailsGet");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerProfileDetails2.default;

      return this.apiClient.callApi('/v1.0/managers/{id}/details', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Manager details
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagerProfileDetails}
     */

  }, {
    key: 'v10ManagersByIdDetailsGet',
    value: function v10ManagersByIdDetailsGet(id) {
      return this.v10ManagersByIdDetailsGetWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Manager profile
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagerProfile} and HTTP response
     */

  }, {
    key: 'v10ManagersByIdGetWithHttpInfo',
    value: function v10ManagersByIdGetWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersByIdGet");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerProfile2.default;

      return this.apiClient.callApi('/v1.0/managers/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Manager profile
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagerProfile}
     */

  }, {
    key: 'v10ManagersByIdGet',
    value: function v10ManagersByIdGet(id) {
      return this.v10ManagersByIdGetWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close existing investment program/fund
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.twoFactorCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdClosePostWithHttpInfo',
    value: function v10ManagersFundsByIdClosePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdClosePost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close existing investment program/fund
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.twoFactorCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsByIdClosePost',
    value: function v10ManagersFundsByIdClosePost(id, authorization, opts) {
      return this.v10ManagersFundsByIdClosePostWithHttpInfo(id, authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deposit
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdInvestByAmountPostWithHttpInfo',
    value: function v10ManagersFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagersFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdInvestByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/invest/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Deposit
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsByIdInvestByAmountPost',
    value: function v10ManagersFundsByIdInvestByAmountPost(id, amount, authorization) {
      return this.v10ManagersFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investment program/fund requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramRequests} and HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdRequestsBySkipByTakeGetWithHttpInfo',
    value: function v10ManagersFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10ManagersFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10ManagersFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdRequestsBySkipByTakeGet");
      }

      var pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramRequests2.default;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/requests/{skip}/{take}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investment program/fund requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramRequests}
     */

  }, {
    key: 'v10ManagersFundsByIdRequestsBySkipByTakeGet',
    value: function v10ManagersFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10ManagersFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update investment program/fund details
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramUpdate} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdUpdatePostWithHttpInfo',
    value: function v10ManagersFundsByIdUpdatePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdUpdatePost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update investment program/fund details
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramUpdate} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsByIdUpdatePost',
    value: function v10ManagersFundsByIdUpdatePost(id, authorization, opts) {
      return this.v10ManagersFundsByIdUpdatePostWithHttpInfo(id, authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdWithdrawByPercentPostWithHttpInfo',
    value: function v10ManagersFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling v10ManagersFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdWithdrawByPercentPost");
      }

      var pathParams = {
        'id': id,
        'percent': percent
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/withdraw/{percent}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsByIdWithdrawByPercentPost',
    value: function v10ManagersFundsByIdWithdrawByPercentPost(id, percent, authorization) {
      return this.v10ManagersFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Data for withdrawal from fund
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundWithdrawInfo} and HTTP response
     */

  }, {
    key: 'v10ManagersFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo',
    value: function v10ManagersFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagersFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsByIdWithdrawInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _FundWithdrawInfo2.default;

      return this.apiClient.callApi('/v1.0/managers/funds/{id}/withdraw/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for withdrawal from fund
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FundWithdrawInfo}
     */

  }, {
    key: 'v10ManagersFundsByIdWithdrawInfoByCurrencyGet',
    value: function v10ManagersFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagersFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create fund
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewFundRequest} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsCreatePostWithHttpInfo',
    value: function v10ManagersFundsCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create fund
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewFundRequest} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsCreatePost',
    value: function v10ManagersFundsCreatePost(authorization, opts) {
      return this.v10ManagersFundsCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get GVT investment to create fund
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */

  }, {
    key: 'v10ManagersFundsInvestmentAmountGetWithHttpInfo',
    value: function v10ManagersFundsInvestmentAmountGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsInvestmentAmountGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Number';

      return this.apiClient.callApi('/v1.0/managers/funds/investment/amount', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get GVT investment to create fund
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */

  }, {
    key: 'v10ManagersFundsInvestmentAmountGet',
    value: function v10ManagersFundsInvestmentAmountGet(authorization) {
      return this.v10ManagersFundsInvestmentAmountGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Cancel investment program/fund request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersFundsRequestsByIdCancelPostWithHttpInfo',
    value: function v10ManagersFundsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersFundsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersFundsRequestsByIdCancelPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/funds/requests/{id}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cancel investment program/fund request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersFundsRequestsByIdCancelPost',
    value: function v10ManagersFundsRequestsByIdCancelPost(id, authorization) {
      return this.v10ManagersFundsRequestsByIdCancelPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close existing investment program/fund
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.twoFactorCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdClosePostWithHttpInfo',
    value: function v10ManagersProgramsByIdClosePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdClosePost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close existing investment program/fund
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.twoFactorCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsByIdClosePost',
    value: function v10ManagersProgramsByIdClosePost(id, authorization, opts) {
      return this.v10ManagersProgramsByIdClosePostWithHttpInfo(id, authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deposit
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdInvestByAmountPostWithHttpInfo',
    value: function v10ManagersProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagersProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdInvestByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/invest/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Deposit
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsByIdInvestByAmountPost',
    value: function v10ManagersProgramsByIdInvestByAmountPost(id, amount, authorization) {
      return this.v10ManagersProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close current period
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdPeriodClosePostWithHttpInfo',
    value: function v10ManagersProgramsByIdPeriodClosePostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdPeriodClosePost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/period/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close current period
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsByIdPeriodClosePost',
    value: function v10ManagersProgramsByIdPeriodClosePost(id, authorization) {
      return this.v10ManagersProgramsByIdPeriodClosePostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get investment program/fund requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramRequests} and HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdRequestsBySkipByTakeGetWithHttpInfo',
    value: function v10ManagersProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10ManagersProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10ManagersProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdRequestsBySkipByTakeGet");
      }

      var pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramRequests2.default;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/requests/{skip}/{take}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get investment program/fund requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramRequests}
     */

  }, {
    key: 'v10ManagersProgramsByIdRequestsBySkipByTakeGet',
    value: function v10ManagersProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10ManagersProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update investment program/fund details
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramUpdate} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdUpdatePostWithHttpInfo',
    value: function v10ManagersProgramsByIdUpdatePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdUpdatePost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update investment program/fund details
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramUpdate} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsByIdUpdatePost',
    value: function v10ManagersProgramsByIdUpdatePost(id, authorization, opts) {
      return this.v10ManagersProgramsByIdUpdatePostWithHttpInfo(id, authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Withdraw from program
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdWithdrawByAmountPostWithHttpInfo',
    value: function v10ManagersProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagersProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdWithdrawByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/withdraw/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw from program
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsByIdWithdrawByAmountPost',
    value: function v10ManagersProgramsByIdWithdrawByAmountPost(id, amount, authorization) {
      return this.v10ManagersProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Data for withdrawal from investment program
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagerProgramWithdrawInfo} and HTTP response
     */

  }, {
    key: 'v10ManagersProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo',
    value: function v10ManagersProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagersProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsByIdWithdrawInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerProgramWithdrawInfo2.default;

      return this.apiClient.callApi('/v1.0/managers/programs/{id}/withdraw/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for withdrawal from investment program
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagerProgramWithdrawInfo}
     */

  }, {
    key: 'v10ManagersProgramsByIdWithdrawInfoByCurrencyGet',
    value: function v10ManagersProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagersProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create an investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewProgramRequest} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsCreatePostWithHttpInfo',
    value: function v10ManagersProgramsCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create an investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewProgramRequest} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsCreatePost',
    value: function v10ManagersProgramsCreatePost(authorization, opts) {
      return this.v10ManagersProgramsCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get GVT investment to create program
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */

  }, {
    key: 'v10ManagersProgramsInvestmentAmountGetWithHttpInfo',
    value: function v10ManagersProgramsInvestmentAmountGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsInvestmentAmountGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Number';

      return this.apiClient.callApi('/v1.0/managers/programs/investment/amount', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get GVT investment to create program
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */

  }, {
    key: 'v10ManagersProgramsInvestmentAmountGet',
    value: function v10ManagersProgramsInvestmentAmountGet(authorization) {
      return this.v10ManagersProgramsInvestmentAmountGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Cancel investment program/fund request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10ManagersProgramsRequestsByIdCancelPostWithHttpInfo',
    value: function v10ManagersProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagersProgramsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagersProgramsRequestsByIdCancelPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/managers/programs/requests/{id}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cancel investment program/fund request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10ManagersProgramsRequestsByIdCancelPost',
    value: function v10ManagersProgramsRequestsByIdCancelPost(id, authorization) {
      return this.v10ManagersProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ManagersApi;
}();

exports.default = ManagersApi;