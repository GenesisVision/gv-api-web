/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeBrokerProgramRequest from '../model/ChangeBrokerProgramRequest';
import ErrorViewModel from '../model/ErrorViewModel';
import FundAssetPart from '../model/FundAssetPart';
import FundInvestInfo from '../model/FundInvestInfo';
import FundsListOld from '../model/FundsListOld';
import InvestmentEventViewModels from '../model/InvestmentEventViewModels';
import ManagerAssets from '../model/ManagerAssets';
import ManagerFundWithdrawInfoOld from '../model/ManagerFundWithdrawInfoOld';
import ManagerProfileDetails from '../model/ManagerProfileDetails';
import ManagerProgramCreateResult from '../model/ManagerProgramCreateResult';
import ManagerProgramWithdrawInfoOld from '../model/ManagerProgramWithdrawInfoOld';
import NewFundRequest from '../model/NewFundRequest';
import NewProgramRequest from '../model/NewProgramRequest';
import ProgramInvestInfoOld from '../model/ProgramInvestInfoOld';
import ProgramLevelInfo from '../model/ProgramLevelInfo';
import ProgramMinimumDepositOld from '../model/ProgramMinimumDepositOld';
import ProgramPwdUpdate from '../model/ProgramPwdUpdate';
import ProgramRequestsOld from '../model/ProgramRequestsOld';
import ProgramUpdate from '../model/ProgramUpdate';
import ProgramsListOld from '../model/ProgramsListOld';
import PublicProfile from '../model/PublicProfile';
import TwoFactorAuthenticator from '../model/TwoFactorAuthenticator';

/**
* Manager service.
* @class ManagerApi
* @version v1.0
*/
export default class ManagerApi {

    /**
    * Constructs a new ManagerApi. 
    * @function ManagerApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {ManagerApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      cancelChangeBrokerWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelChangeBroker");
      }


      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/broker/change/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel changing broker in existing program
     * @function ManagerApi#cancelChangeBroker
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      cancelChangeBroker(authorization, opts) {
      return this.cancelChangeBrokerWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      cancelRequestWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRequest");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelRequest");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel investment program/fund request
     * @function ManagerApi#cancelRequest
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      cancelRequest(id, authorization) {
      return this.cancelRequestWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      cancelRequest_0WithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRequest_0");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelRequest_0");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel investment program/fund request
     * @function ManagerApi#cancelRequest_0
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      cancelRequest_0(id, authorization) {
      return this.cancelRequest_0WithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      changeBrokerWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling changeBroker");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/broker/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change broker in existing program
     * @function ManagerApi#changeBroker
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ChangeBrokerProgramRequest} [opts.request] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      changeBroker(authorization, opts) {
      return this.changeBrokerWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      changeProgramPasswordWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeProgramPassword");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling changeProgramPassword");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/password/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change program password
     * @function ManagerApi#changeProgramPassword
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramPwdUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      changeProgramPassword(id, authorization, opts) {
      return this.changeProgramPasswordWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      closeCurrentPeriodWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeCurrentPeriod");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling closeCurrentPeriod");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close current period
     * @function ManagerApi#closeCurrentPeriod
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      closeCurrentPeriod(id, authorization) {
      return this.closeCurrentPeriodWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      closeFundWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeFund");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling closeFund");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close existing fund
     * @function ManagerApi#closeFund
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.twoFactorCode] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      closeFund(id, authorization, opts) {
      return this.closeFundWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      closeInvestmentProgramWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeInvestmentProgram");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling closeInvestmentProgram");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close existing investment program
     * @function ManagerApi#closeInvestmentProgram
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.twoFactorCode] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      closeInvestmentProgram(id, authorization, opts) {
      return this.closeInvestmentProgramWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      confirmProgram2FAWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling confirmProgram2FA");
      }


      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId'],
        'code': opts['code']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/2fa/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm 2FA for program if required (for brokers like Huobi)
     * @function ManagerApi#confirmProgram2FA
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {String} [opts.code] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      confirmProgram2FA(authorization, opts) {
      return this.confirmProgram2FAWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      createFundWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createFund");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create fund
     * @function ManagerApi#createFund
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {NewFundRequest} [opts.request] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      createFund(authorization, opts) {
      return this.createFundWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      createProgramWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createProgram");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProgramCreateResult;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an investment program
     * @function ManagerApi#createProgram
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {NewProgramRequest} [opts.request] 
     * @return {CancelablePromise<ManagerProgramCreateResult>} a Promise, with an object containing data of type ManagerProgramCreateResult and HTTP response
     */
      createProgram(authorization, opts) {
      return this.createProgramWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getEventsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEvents");
      }


      let pathParams = {
      };
      let queryParams = {
        'EventLocation': opts['eventLocation'],
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'EventType': opts['eventType'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentEventViewModels;

      return this.apiClient.callApi(
        '/v1.0/manager/investments/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Events
     * @function ManagerApi#getEvents
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.eventLocation] 
     * @param {String} [opts.assetId] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.eventType] 
     * @param {String} [opts.assetType] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<InvestmentEventViewModels>} a Promise, with an object containing data of type InvestmentEventViewModels and HTTP response
     */
      getEvents(authorization, opts) {
      return this.getEventsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getFundInvestInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFundInvestInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getFundInvestInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFundInvestInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundInvestInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the fund
     * @function ManagerApi#getFundInvestInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<FundInvestInfo>} a Promise, with an object containing data of type FundInvestInfo and HTTP response
     */
      getFundInvestInfo(id, currency, authorization) {
      return this.getFundInvestInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getFundInvestmentWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFundInvestment");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/manager/funds/investment/amount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get GVT investment to create fund
     * @function ManagerApi#getFundInvestment
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<'Number'>} a Promise, with an object containing data of type 'Number' and HTTP response
     */
      getFundInvestment(authorization) {
      return this.getFundInvestmentWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getFundWithdrawInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFundWithdrawInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getFundWithdrawInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFundWithdrawInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerFundWithdrawInfoOld;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from fund
     * @function ManagerApi#getFundWithdrawInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerFundWithdrawInfoOld>} a Promise, with an object containing data of type ManagerFundWithdrawInfoOld and HTTP response
     */
      getFundWithdrawInfo(id, currency, authorization) {
      return this.getFundWithdrawInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getLevelsCalculatorWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLevelsCalculator");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLevelsCalculator");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramLevelInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/levels/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get program data for levels calculator
     * @function ManagerApi#getLevelsCalculator
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramLevelInfo>} a Promise, with an object containing data of type ProgramLevelInfo and HTTP response
     */
      getLevelsCalculator(id, authorization) {
      return this.getLevelsCalculatorWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getManagerAssetsWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getManagerAssets");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerAssets;

      return this.apiClient.callApi(
        '/v1.0/manager/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager assets list
     * @function ManagerApi#getManagerAssets
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerAssets>} a Promise, with an object containing data of type ManagerAssets and HTTP response
     */
      getManagerAssets(authorization) {
      return this.getManagerAssetsWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getManagerDetailsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagerDetails");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProfileDetails;

      return this.apiClient.callApi(
        '/v1.0/manager/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager details
     * @function ManagerApi#getManagerDetails
     * @param {String} id 
     * @return {CancelablePromise<ManagerProfileDetails>} a Promise, with an object containing data of type ManagerProfileDetails and HTTP response
     */
      getManagerDetails(id) {
      return this.getManagerDetailsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getManagerFundsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getManagerFunds");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'ActionStatus': opts['actionStatus'],
        'DashboardActionStatus': opts['dashboardActionStatus'],
        'IsHideInList': opts['isHideInList'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundsListOld;

      return this.apiClient.callApi(
        '/v1.0/manager/funds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager funds
     * @function ManagerApi#getManagerFunds
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {String} [opts.currency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.actionStatus] 
     * @param {String} [opts.dashboardActionStatus] 
     * @param {Boolean} [opts.isHideInList] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<FundsListOld>} a Promise, with an object containing data of type FundsListOld and HTTP response
     */
      getManagerFunds(authorization, opts) {
      return this.getManagerFundsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getManagerProfileWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManagerProfile");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PublicProfile;

      return this.apiClient.callApi(
        '/v1.0/manager/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager profile
     * @function ManagerApi#getManagerProfile
     * @param {String} id 
     * @return {CancelablePromise<PublicProfile>} a Promise, with an object containing data of type PublicProfile and HTTP response
     */
      getManagerProfile(id) {
      return this.getManagerProfileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getManagerProgramsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getManagerPrograms");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'ActionStatus': opts['actionStatus'],
        'DashboardActionStatus': opts['dashboardActionStatus'],
        'IsHideInList': opts['isHideInList'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsListOld;

      return this.apiClient.callApi(
        '/v1.0/manager/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager programs
     * @function ManagerApi#getManagerPrograms
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {String} [opts.currency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.actionStatus] 
     * @param {String} [opts.dashboardActionStatus] 
     * @param {Boolean} [opts.isHideInList] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ProgramsListOld>} a Promise, with an object containing data of type ProgramsListOld and HTTP response
     */
      getManagerPrograms(authorization, opts) {
      return this.getManagerProgramsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgram2FAWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgram2FA");
      }


      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorAuthenticator;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/2fa/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get 2FA for program if needed
     * @function ManagerApi#getProgram2FA
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @return {CancelablePromise<TwoFactorAuthenticator>} a Promise, with an object containing data of type TwoFactorAuthenticator and HTTP response
     */
      getProgram2FA(authorization, opts) {
      return this.getProgram2FAWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramInvestInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramInvestInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getProgramInvestInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramInvestInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramInvestInfoOld;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the program
     * @function ManagerApi#getProgramInvestInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramInvestInfoOld>} a Promise, with an object containing data of type ProgramInvestInfoOld and HTTP response
     */
      getProgramInvestInfo(id, currency, authorization) {
      return this.getProgramInvestInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramInvestmentWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramInvestment");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradingAccount': opts['brokerTradingAccount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramMinimumDepositOld;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/investment/amount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment amount to create program
     * @function ManagerApi#getProgramInvestment
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.brokerTradingAccount] 
     * @return {CancelablePromise<ProgramMinimumDepositOld>} a Promise, with an object containing data of type ProgramMinimumDepositOld and HTTP response
     */
      getProgramInvestment(authorization, opts) {
      return this.getProgramInvestmentWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramRequestsWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramRequests");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getProgramRequests");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getProgramRequests");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramRequests");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment program/fund requests
     * @function ManagerApi#getProgramRequests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getProgramRequests(id, skip, take, authorization) {
      return this.getProgramRequestsWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramRequests_0WithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramRequests_0");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getProgramRequests_0");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getProgramRequests_0");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramRequests_0");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment program/fund requests
     * @function ManagerApi#getProgramRequests_0
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getProgramRequests_0(id, skip, take, authorization) {
      return this.getProgramRequests_0WithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramWithdrawInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramWithdrawInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getProgramWithdrawInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramWithdrawInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProgramWithdrawInfoOld;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from investment program
     * @function ManagerApi#getProgramWithdrawInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerProgramWithdrawInfoOld>} a Promise, with an object containing data of type ManagerProgramWithdrawInfoOld and HTTP response
     */
      getProgramWithdrawInfo(id, currency, authorization) {
      return this.getProgramWithdrawInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getRequestsWithHttpInfo(skip, take, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getRequests");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getRequests");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRequests");
      }


      let pathParams = {
        'skip': skip,
        'take': take
      };
      let queryParams = {
        'assetType': opts['assetType']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/manager/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all requests
     * @function ManagerApi#getRequests
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.assetType] 
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getRequests(skip, take, authorization, opts) {
      return this.getRequestsWithHttpInfo(skip, take, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      investIntoFundWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling investIntoFund");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling investIntoFund");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling investIntoFund");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deposit.  Invest in GVT if currency is empty
     * @function ManagerApi#investIntoFund
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      investIntoFund(id, amount, authorization, opts) {
      return this.investIntoFundWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      investIntoProgramWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling investIntoProgram");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling investIntoProgram");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling investIntoProgram");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deposit  Invest in GVT if currency is empty
     * @function ManagerApi#investIntoProgram
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      investIntoProgram(id, amount, authorization, opts) {
      return this.investIntoProgramWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateFundAssetsWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['assets'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFundAssets");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateFundAssets");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/assets/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update fund assets parts
     * @function ManagerApi#updateFundAssets
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Array<FundAssetPart>} [opts.assets] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      updateFundAssets(id, authorization, opts) {
      return this.updateFundAssetsWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateInvestmentProgramWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInvestmentProgram");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateInvestmentProgram");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update investment program/fund details
     * @function ManagerApi#updateInvestmentProgram
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      updateInvestmentProgram(id, authorization, opts) {
      return this.updateInvestmentProgramWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateInvestmentProgram_0WithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInvestmentProgram_0");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateInvestmentProgram_0");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update investment program/fund details
     * @function ManagerApi#updateInvestmentProgram_0
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      updateInvestmentProgram_0(id, authorization, opts) {
      return this.updateInvestmentProgram_0WithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateProgramSignalSettingsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateProgramSignalSettings");
      }


      let pathParams = {
      };
      let queryParams = {
        'ProgramId': opts['programId'],
        'VolumeFee': opts['volumeFee'],
        'SuccessFee': opts['successFee']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/signal/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Make manager&#39;s program signal provider
     * @function ManagerApi#updateProgramSignalSettings
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {Number} [opts.volumeFee] 
     * @param {Number} [opts.successFee] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      updateProgramSignalSettings(authorization, opts) {
      return this.updateProgramSignalSettingsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateProgramSignalSettings_0WithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateProgramSignalSettings_0");
      }


      let pathParams = {
      };
      let queryParams = {
        'ProgramId': opts['programId'],
        'VolumeFee': opts['volumeFee'],
        'SuccessFee': opts['successFee']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/signal/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Make manager&#39;s program signal provider
     * @function ManagerApi#updateProgramSignalSettings_0
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {Number} [opts.volumeFee] 
     * @param {Number} [opts.successFee] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      updateProgramSignalSettings_0(authorization, opts) {
      return this.updateProgramSignalSettings_0WithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      withdrawFromFundWithHttpInfo(id, percent, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling withdrawFromFund");
      }

      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling withdrawFromFund");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling withdrawFromFund");
      }


      let pathParams = {
        'id': id,
        'percent': percent
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/withdraw/{percent}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from fund. Percent is % of manager total money.  Withdraw in GVT if currency is empty
     * @function ManagerApi#withdrawFromFund
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      withdrawFromFund(id, percent, authorization, opts) {
      return this.withdrawFromFundWithHttpInfo(id, percent, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      withdrawFromProgramWithHttpInfo(id, amount, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling withdrawFromProgram");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling withdrawFromProgram");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling withdrawFromProgram");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/withdraw/multi/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from investment program in program currency
     * @function ManagerApi#withdrawFromProgram
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      withdrawFromProgram(id, amount, authorization) {
      return this.withdrawFromProgramWithHttpInfo(id, amount, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
