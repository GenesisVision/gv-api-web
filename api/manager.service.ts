/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ChangeBrokerProgramRequestOld } from "../model/changeBrokerProgramRequestOld";
import { ErrorViewModel } from "../model/errorViewModel";
import { FundAssetPart } from "../model/fundAssetPart";
import { FundInvestInfo } from "../model/fundInvestInfo";
import { FundsListOld } from "../model/fundsListOld";
import { InvestmentEventViewModels } from "../model/investmentEventViewModels";
import { ManagerAssets } from "../model/managerAssets";
import { ManagerFundWithdrawInfoOld } from "../model/managerFundWithdrawInfoOld";
import { ManagerProfileDetails } from "../model/managerProfileDetails";
import { ManagerProgramWithdrawInfoOld } from "../model/managerProgramWithdrawInfoOld";
import { NewFundRequest } from "../model/newFundRequest";
import { NewProgramRequest } from "../model/newProgramRequest";
import { ProgramCreateResult } from "../model/programCreateResult";
import { ProgramInvestInfoOld } from "../model/programInvestInfoOld";
import { ProgramLevelInfo } from "../model/programLevelInfo";
import { ProgramMinimumDepositOld } from "../model/programMinimumDepositOld";
import { ProgramPwdUpdate } from "../model/programPwdUpdate";
import { ProgramRequestsOld } from "../model/programRequestsOld";
import { ProgramUpdate } from "../model/programUpdate";
import { ProgramsListOld } from "../model/programsListOld";
import { PublicProfile } from "../model/publicProfile";
import { TwoFactorAuthenticator } from "../model/twoFactorAuthenticator";

export class ManagerService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public cancelChangeBroker(authorization: string, opts?: { 
    programId?: string
  }): CancelablePromise<null>{
    return this.cancelChangeBrokerWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelChangeBrokerWithHttpInfo(authorization: string, opts: { 
    programId?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelChangeBroker");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "programId": opts["programId"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/broker/change/cancel', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public cancelRequest(id: string, authorization: string): CancelablePromise<null>{
    return this.cancelRequestWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelRequestWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling cancelRequest");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelRequest");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/requests/{id}/cancel', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public cancelRequest_1(id: string, authorization: string): CancelablePromise<null>{
    return this.cancelRequest_1WithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelRequest_1WithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling cancelRequest_0");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelRequest_0");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/requests/{id}/cancel', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public changeBroker(authorization: string, opts?: { 
    request?: ChangeBrokerProgramRequestOld
  }): CancelablePromise<null>{
    return this.changeBrokerWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private changeBrokerWithHttpInfo(authorization: string, opts: { 
    request?: ChangeBrokerProgramRequestOld
  } = {}){
    let postBody = opts["request"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling changeBroker");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/broker/change', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public changeProgramPassword(id: string, authorization: string, opts?: { 
    model?: ProgramPwdUpdate
  }): CancelablePromise<null>{
    return this.changeProgramPasswordWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private changeProgramPasswordWithHttpInfo(id: string, authorization: string, opts: { 
    model?: ProgramPwdUpdate
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling changeProgramPassword");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling changeProgramPassword");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/password/change', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public closeCurrentPeriod(id: string, authorization: string): CancelablePromise<null>{
    return this.closeCurrentPeriodWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private closeCurrentPeriodWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling closeCurrentPeriod");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling closeCurrentPeriod");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/period/close', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public closeFund(id: string, authorization: string, opts?: { 
    twoFactorCode?: string
  }): CancelablePromise<null>{
    return this.closeFundWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private closeFundWithHttpInfo(id: string, authorization: string, opts: { 
    twoFactorCode?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling closeFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling closeFund");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "twoFactorCode": opts["twoFactorCode"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/{id}/close', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public closeInvestmentProgram(id: string, authorization: string, opts?: { 
    twoFactorCode?: string
  }): CancelablePromise<null>{
    return this.closeInvestmentProgramWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private closeInvestmentProgramWithHttpInfo(id: string, authorization: string, opts: { 
    twoFactorCode?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling closeInvestmentProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling closeInvestmentProgram");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "twoFactorCode": opts["twoFactorCode"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/close', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public confirmProgram2FA(authorization: string, opts?: { 
    programId?: string, 
    code?: string
  }): CancelablePromise<null>{
    return this.confirmProgram2FAWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private confirmProgram2FAWithHttpInfo(authorization: string, opts: { 
    programId?: string, 
    code?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling confirmProgram2FA");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "programId": opts["programId"],
      "code": opts["code"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/2fa/confirm', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public createFund(authorization: string, opts?: { 
    request?: NewFundRequest
  }): CancelablePromise<null>{
    return this.createFundWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private createFundWithHttpInfo(authorization: string, opts: { 
    request?: NewFundRequest
  } = {}){
    let postBody = opts["request"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling createFund");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/create', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public createProgram(authorization: string, opts?: { 
    request?: NewProgramRequest
  }): CancelablePromise<ProgramCreateResult>{
    return this.createProgramWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private createProgramWithHttpInfo(authorization: string, opts: { 
    request?: NewProgramRequest
  } = {}){
    let postBody = opts["request"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling createProgram");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramCreateResult;

    return this.apiClient.callApi<ProgramCreateResult>(
      '/v1.0/manager/programs/create', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getEvents(authorization: string, opts?: { 
    eventLocation?: 'Asset' | 'Dashboard' | 'EventsAll', 
    assetId?: string, 
    from?: Date, 
    to?: Date, 
    eventType?: 'All' | 'AssetStarted' | 'AssetFinished' | 'AssetPeriodStarted' | 'AssetPeriodEnded' | 'AssetPeriodEndedDueToStopOut' | 'AssetBrokerChanged' | 'AssetInvestByInvestor' | 'AssetWithdrawalByInvestor' | 'AssetInvestByManager' | 'AssetWithdrawalByManager' | 'AssetPeriodProcessed' | 'AssetReallocation' | 'AssetSubscribeByInvestor' | 'AssetUnsubscribeByInvestor' | 'AssetTradeOpen' | 'AssetTradeClosed' | 'AssetSubscriptionEdit' | 'AssetEnterInvestment', 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal', 
    skip?: number, 
    take?: number
  }): CancelablePromise<InvestmentEventViewModels>{
    return this.getEventsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getEventsWithHttpInfo(authorization: string, opts: { 
    eventLocation?: 'Asset' | 'Dashboard' | 'EventsAll', 
    assetId?: string, 
    from?: Date, 
    to?: Date, 
    eventType?: 'All' | 'AssetStarted' | 'AssetFinished' | 'AssetPeriodStarted' | 'AssetPeriodEnded' | 'AssetPeriodEndedDueToStopOut' | 'AssetBrokerChanged' | 'AssetInvestByInvestor' | 'AssetWithdrawalByInvestor' | 'AssetInvestByManager' | 'AssetWithdrawalByManager' | 'AssetPeriodProcessed' | 'AssetReallocation' | 'AssetSubscribeByInvestor' | 'AssetUnsubscribeByInvestor' | 'AssetTradeOpen' | 'AssetTradeClosed' | 'AssetSubscriptionEdit' | 'AssetEnterInvestment', 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getEvents");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "EventLocation": opts["eventLocation"],
      "AssetId": opts["assetId"],
      "From": opts["from"],
      "To": opts["to"],
      "EventType": opts["eventType"],
      "AssetType": opts["assetType"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = InvestmentEventViewModels;

    return this.apiClient.callApi<InvestmentEventViewModels>(
      '/v1.0/manager/investments/events', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundInvestInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<FundInvestInfo>{
    return this.getFundInvestInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundInvestInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundInvestInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getFundInvestInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundInvestInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundInvestInfo;

    return this.apiClient.callApi<FundInvestInfo>(
      '/v1.0/manager/funds/{id}/invest/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundInvestment(authorization: string): CancelablePromise<number>{
    return this.getFundInvestmentWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundInvestmentWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundInvestment");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'number';

    return this.apiClient.callApi<number>(
      '/v1.0/manager/funds/investment/amount', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundWithdrawInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<ManagerFundWithdrawInfoOld>{
    return this.getFundWithdrawInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundWithdrawInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundWithdrawInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getFundWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundWithdrawInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ManagerFundWithdrawInfoOld;

    return this.apiClient.callApi<ManagerFundWithdrawInfoOld>(
      '/v1.0/manager/funds/{id}/withdraw/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getLevelsCalculator(id: string, authorization: string): CancelablePromise<ProgramLevelInfo>{
    return this.getLevelsCalculatorWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getLevelsCalculatorWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getLevelsCalculator");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getLevelsCalculator");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramLevelInfo;

    return this.apiClient.callApi<ProgramLevelInfo>(
      '/v1.0/manager/programs/{id}/levels/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getManagerAssets(authorization: string): CancelablePromise<ManagerAssets>{
    return this.getManagerAssetsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerAssetsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getManagerAssets");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ManagerAssets;

    return this.apiClient.callApi<ManagerAssets>(
      '/v1.0/manager/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getManagerDetails(id: string): CancelablePromise<ManagerProfileDetails>{
    return this.getManagerDetailsWithHttpInfo(id)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerDetailsWithHttpInfo(id: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getManagerDetails");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ManagerProfileDetails;

    return this.apiClient.callApi<ManagerProfileDetails>(
      '/v1.0/manager/{id}/details', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getManagerFunds(authorization: string, opts?: { 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<FundsListOld>{
    return this.getManagerFundsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerFundsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getManagerFunds");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "Currency": opts["currency"],
      "From": opts["from"],
      "To": opts["to"],
      "ChartPointsCount": opts["chartPointsCount"],
      "CurrencySecondary": opts["currencySecondary"],
      "ActionStatus": opts["actionStatus"],
      "DashboardActionStatus": opts["dashboardActionStatus"],
      "IsHideInList": opts["isHideInList"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundsListOld;

    return this.apiClient.callApi<FundsListOld>(
      '/v1.0/manager/funds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getManagerProfile(id: string): CancelablePromise<PublicProfile>{
    return this.getManagerProfileWithHttpInfo(id)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerProfileWithHttpInfo(id: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getManagerProfile");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PublicProfile;

    return this.apiClient.callApi<PublicProfile>(
      '/v1.0/manager/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getManagerPrograms(authorization: string, opts?: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ProgramsListOld>{
    return this.getManagerProgramsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerProgramsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getManagerPrograms");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "Currency": opts["currency"],
      "From": opts["from"],
      "To": opts["to"],
      "ChartPointsCount": opts["chartPointsCount"],
      "CurrencySecondary": opts["currencySecondary"],
      "ActionStatus": opts["actionStatus"],
      "DashboardActionStatus": opts["dashboardActionStatus"],
      "IsHideInList": opts["isHideInList"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramsListOld;

    return this.apiClient.callApi<ProgramsListOld>(
      '/v1.0/manager/programs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgram2FA(authorization: string, opts?: { 
    programId?: string
  }): CancelablePromise<TwoFactorAuthenticator>{
    return this.getProgram2FAWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgram2FAWithHttpInfo(authorization: string, opts: { 
    programId?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgram2FA");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "programId": opts["programId"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TwoFactorAuthenticator;

    return this.apiClient.callApi<TwoFactorAuthenticator>(
      '/v1.0/manager/programs/2fa/get', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramInvestInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<ProgramInvestInfoOld>{
    return this.getProgramInvestInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramInvestInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramInvestInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getProgramInvestInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramInvestInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramInvestInfoOld;

    return this.apiClient.callApi<ProgramInvestInfoOld>(
      '/v1.0/manager/programs/{id}/invest/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramInvestment(authorization: string, opts?: { 
    brokerTradingAccount?: string
  }): CancelablePromise<ProgramMinimumDepositOld>{
    return this.getProgramInvestmentWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramInvestmentWithHttpInfo(authorization: string, opts: { 
    brokerTradingAccount?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramInvestment");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "brokerTradingAccount": opts["brokerTradingAccount"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramMinimumDepositOld;

    return this.apiClient.callApi<ProgramMinimumDepositOld>(
      '/v1.0/manager/programs/investment/amount', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramRequests(id: string, skip: number, take: number, authorization: string): CancelablePromise<ProgramRequestsOld>{
    return this.getProgramRequestsWithHttpInfo(id, skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramRequestsWithHttpInfo(id: string, skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramRequests");
    }
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getProgramRequests");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getProgramRequests");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramRequests");
    }

    let pathParams = { 
      "id": id,
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/manager/funds/{id}/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramRequests_2(id: string, skip: number, take: number, authorization: string): CancelablePromise<ProgramRequestsOld>{
    return this.getProgramRequests_2WithHttpInfo(id, skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramRequests_2WithHttpInfo(id: string, skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramRequests_0");
    }
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getProgramRequests_0");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getProgramRequests_0");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramRequests_0");
    }

    let pathParams = { 
      "id": id,
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/manager/programs/{id}/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramWithdrawInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<ManagerProgramWithdrawInfoOld>{
    return this.getProgramWithdrawInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramWithdrawInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramWithdrawInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getProgramWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramWithdrawInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ManagerProgramWithdrawInfoOld;

    return this.apiClient.callApi<ManagerProgramWithdrawInfoOld>(
      '/v1.0/manager/programs/{id}/withdraw/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRequests(skip: number, take: number, authorization: string, opts?: { 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal'
  }): CancelablePromise<ProgramRequestsOld>{
    return this.getRequestsWithHttpInfo(skip, take, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRequestsWithHttpInfo(skip: number, take: number, authorization: string, opts: { 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getRequests");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getRequests");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getRequests");
    }

    let pathParams = { 
      "skip": skip,
      "take": take
    };
    let queryParams = { 
      "assetType": opts["assetType"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/manager/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoFund(id: string, amount: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.investIntoFundWithHttpInfo(id, amount, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoFundWithHttpInfo(id: string, amount: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoFund");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling investIntoFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoFund");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/{id}/invest/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoProgram(id: string, amount: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.investIntoProgramWithHttpInfo(id, amount, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoProgramWithHttpInfo(id: string, amount: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoProgram");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling investIntoProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoProgram");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/invest/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateFundAssets(id: string, authorization: string, opts?: { 
    assets?: [FundAssetPart]
  }): CancelablePromise<null>{
    return this.updateFundAssetsWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateFundAssetsWithHttpInfo(id: string, authorization: string, opts: { 
    assets?: [FundAssetPart]
  } = {}){
    let postBody = opts["assets"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling updateFundAssets");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateFundAssets");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/{id}/assets/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateInvestmentProgram(id: string, authorization: string, opts?: { 
    model?: ProgramUpdate
  }): CancelablePromise<null>{
    return this.updateInvestmentProgramWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateInvestmentProgramWithHttpInfo(id: string, authorization: string, opts: { 
    model?: ProgramUpdate
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling updateInvestmentProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateInvestmentProgram");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/{id}/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateInvestmentProgram_3(id: string, authorization: string, opts?: { 
    model?: ProgramUpdate
  }): CancelablePromise<null>{
    return this.updateInvestmentProgram_3WithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateInvestmentProgram_3WithHttpInfo(id: string, authorization: string, opts: { 
    model?: ProgramUpdate
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling updateInvestmentProgram_0");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateInvestmentProgram_0");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateProgramSignalSettings(authorization: string, opts?: { 
    programId?: string, 
    volumeFee?: number, 
    successFee?: number
  }): CancelablePromise<null>{
    return this.updateProgramSignalSettingsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateProgramSignalSettingsWithHttpInfo(authorization: string, opts: { 
    programId?: string, 
    volumeFee?: number, 
    successFee?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateProgramSignalSettings");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "ProgramId": opts["programId"],
      "VolumeFee": opts["volumeFee"],
      "SuccessFee": opts["successFee"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/signal/create', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateProgramSignalSettings_4(authorization: string, opts?: { 
    programId?: string, 
    volumeFee?: number, 
    successFee?: number
  }): CancelablePromise<null>{
    return this.updateProgramSignalSettings_4WithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateProgramSignalSettings_4WithHttpInfo(authorization: string, opts: { 
    programId?: string, 
    volumeFee?: number, 
    successFee?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateProgramSignalSettings_0");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "ProgramId": opts["programId"],
      "VolumeFee": opts["volumeFee"],
      "SuccessFee": opts["successFee"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/signal/edit', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromFund(id: string, percent: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.withdrawFromFundWithHttpInfo(id, percent, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromFundWithHttpInfo(id: string, percent: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromFund");
    }
    // verify the required parameter "percent" is set
    if (percent === undefined || percent === null) {
      throw new Error("Missing the required parameter \"percent\" when calling withdrawFromFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromFund");
    }

    let pathParams = { 
      "id": id,
      "percent": percent
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/funds/{id}/withdraw/{percent}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromProgram(id: string, amount: number, authorization: string): CancelablePromise<null>{
    return this.withdrawFromProgramWithHttpInfo(id, amount, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromProgramWithHttpInfo(id: string, amount: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromProgram");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling withdrawFromProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromProgram");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/manager/programs/{id}/withdraw/multi/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
