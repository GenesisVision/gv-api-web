'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v1.0
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _DashboardChartValue = require('../model/DashboardChartValue');

var _DashboardChartValue2 = _interopRequireDefault(_DashboardChartValue);

var _DashboardPortfolioEvents = require('../model/DashboardPortfolioEvents');

var _DashboardPortfolioEvents2 = _interopRequireDefault(_DashboardPortfolioEvents);

var _DashboardSummary = require('../model/DashboardSummary');

var _DashboardSummary2 = _interopRequireDefault(_DashboardSummary);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _FundInvestInfo = require('../model/FundInvestInfo');

var _FundInvestInfo2 = _interopRequireDefault(_FundInvestInfo);

var _FundWithdrawInfo = require('../model/FundWithdrawInfo');

var _FundWithdrawInfo2 = _interopRequireDefault(_FundWithdrawInfo);

var _FundsList = require('../model/FundsList');

var _FundsList2 = _interopRequireDefault(_FundsList);

var _ProgramInvestInfo = require('../model/ProgramInvestInfo');

var _ProgramInvestInfo2 = _interopRequireDefault(_ProgramInvestInfo);

var _ProgramRequests = require('../model/ProgramRequests');

var _ProgramRequests2 = _interopRequireDefault(_ProgramRequests);

var _ProgramWithdrawInfo = require('../model/ProgramWithdrawInfo');

var _ProgramWithdrawInfo2 = _interopRequireDefault(_ProgramWithdrawInfo);

var _ProgramsList = require('../model/ProgramsList');

var _ProgramsList2 = _interopRequireDefault(_ProgramsList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Investor service.
* @class InvestorApi
* @version v1.0
*/
var InvestorApi = function () {

  /**
  * Constructs a new InvestorApi. 
  * @function InvestorApi#constructor
  * @param {ApiClient} apiClient Optional API client implementation to use,
  * @return {InvestorApi}
  */
  function InvestorApi(apiClient) {
    _classCallCheck(this, InvestorApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  _createClass(InvestorApi, [{
    key: 'v10InvestorFundsByIdInvestByAmountPostWithHttpInfo',
    value: function v10InvestorFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10InvestorFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdInvestByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/funds/{id}/invest/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Investing into the fund
     * @function InvestorApi#v10InvestorFundsByIdInvestByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorFundsByIdInvestByAmountPost',
    value: function v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization) {
      return this.v10InvestorFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorFundsByIdInvestInfoByCurrencyGetWithHttpInfo',
    value: function v10InvestorFundsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorFundsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdInvestInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _FundInvestInfo2.default;

      return this.apiClient.callApi('/v1.0/investor/funds/{id}/invest/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for investing into the fund
     * @function InvestorApi#v10InvestorFundsByIdInvestInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise<FundInvestInfo>} a Promise, with an object containing data of type FundInvestInfo and HTTP response
     */

  }, {
    key: 'v10InvestorFundsByIdInvestInfoByCurrencyGet',
    value: function v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorFundsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorFundsByIdRequestsBySkipByTakeGetWithHttpInfo',
    value: function v10InvestorFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      var pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramRequests2.default;

      return this.apiClient.callApi('/v1.0/investor/funds/{id}/requests/{skip}/{take}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get program/fund requests
     * @function InvestorApi#v10InvestorFundsByIdRequestsBySkipByTakeGet
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */

  }, {
    key: 'v10InvestorFundsByIdRequestsBySkipByTakeGet',
    value: function v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10InvestorFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorFundsByIdWithdrawByPercentPostWithHttpInfo',
    value: function v10InvestorFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling v10InvestorFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdWithdrawByPercentPost");
      }

      var pathParams = {
        'id': id,
        'percent': percent
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/funds/{id}/withdraw/{percent}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.
     * @function InvestorApi#v10InvestorFundsByIdWithdrawByPercentPost
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorFundsByIdWithdrawByPercentPost',
    value: function v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization) {
      return this.v10InvestorFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo',
    value: function v10InvestorFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _FundWithdrawInfo2.default;

      return this.apiClient.callApi('/v1.0/investor/funds/{id}/withdraw/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for withdrawal from fund
     * @function InvestorApi#v10InvestorFundsByIdWithdrawInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise<FundWithdrawInfo>} a Promise, with an object containing data of type FundWithdrawInfo and HTTP response
     */

  }, {
    key: 'v10InvestorFundsByIdWithdrawInfoByCurrencyGet',
    value: function v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorFundsGetWithHttpInfo',
    value: function v10InvestorFundsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsGet");
      }

      var pathParams = {};
      var queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _FundsList2.default;

      return this.apiClient.callApi('/v1.0/investor/funds', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Funds list
     * @function InvestorApi#v10InvestorFundsGet
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {String} opts.currencySecondary 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise<FundsList>} a Promise, with an object containing data of type FundsList and HTTP response
     */

  }, {
    key: 'v10InvestorFundsGet',
    value: function v10InvestorFundsGet(authorization, opts) {
      return this.v10InvestorFundsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorGetWithHttpInfo',
    value: function v10InvestorGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorGet");
      }

      var pathParams = {};
      var queryParams = {
        'chartCurrency': opts['chartCurrency'],
        'From': opts['from'],
        'To': opts['to'],
        'BalancePoints': opts['balancePoints'],
        'ProgramsPoints': opts['programsPoints'],
        'eventsTake': opts['eventsTake'],
        'requestsSkip': opts['requestsSkip'],
        'requestsTake': opts['requestsTake']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _DashboardSummary2.default;

      return this.apiClient.callApi('/v1.0/investor', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Summary dashboard info
     * @function InvestorApi#v10InvestorGet
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.chartCurrency 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.balancePoints 
     * @param {Number} opts.programsPoints 
     * @param {Number} opts.eventsTake 
     * @param {Number} opts.requestsSkip 
     * @param {Number} opts.requestsTake 
     * @return {Promise<DashboardSummary>} a Promise, with an object containing data of type DashboardSummary and HTTP response
     */

  }, {
    key: 'v10InvestorGet',
    value: function v10InvestorGet(authorization, opts) {
      return this.v10InvestorGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorPortfolioChartGetWithHttpInfo',
    value: function v10InvestorPortfolioChartGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorPortfolioChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'BalancePoints': opts['balancePoints'],
        'ProgramsPoints': opts['programsPoints']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _DashboardChartValue2.default;

      return this.apiClient.callApi('/v1.0/investor/portfolio/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Portfolio charts
     * @function InvestorApi#v10InvestorPortfolioChartGet
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.balancePoints 
     * @param {Number} opts.programsPoints 
     * @return {Promise<DashboardChartValue>} a Promise, with an object containing data of type DashboardChartValue and HTTP response
     */

  }, {
    key: 'v10InvestorPortfolioChartGet',
    value: function v10InvestorPortfolioChartGet(authorization, opts) {
      return this.v10InvestorPortfolioChartGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorPortfolioEventsGetWithHttpInfo',
    value: function v10InvestorPortfolioEventsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorPortfolioEventsGet");
      }

      var pathParams = {};
      var queryParams = {
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _DashboardPortfolioEvents2.default;

      return this.apiClient.callApi('/v1.0/investor/portfolio/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Portfolio events
     * @function InvestorApi#v10InvestorPortfolioEventsGet
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {String} opts.type 
     * @param {String} opts.assetType 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise<DashboardPortfolioEvents>} a Promise, with an object containing data of type DashboardPortfolioEvents and HTTP response
     */

  }, {
    key: 'v10InvestorPortfolioEventsGet',
    value: function v10InvestorPortfolioEventsGet(authorization, opts) {
      return this.v10InvestorPortfolioEventsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdInvestByAmountPostWithHttpInfo',
    value: function v10InvestorProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/invest/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Investing into the program
     * @function InvestorApi#v10InvestorProgramsByIdInvestByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdInvestByAmountPost',
    value: function v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization) {
      return this.v10InvestorProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdInvestInfoByCurrencyGetWithHttpInfo',
    value: function v10InvestorProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramInvestInfo2.default;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/invest/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for investing into the program
     * @function InvestorApi#v10InvestorProgramsByIdInvestInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise<ProgramInvestInfo>} a Promise, with an object containing data of type ProgramInvestInfo and HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdInvestInfoByCurrencyGet',
    value: function v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdReinvestOffPostWithHttpInfo',
    value: function v10InvestorProgramsByIdReinvestOffPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdReinvestOffPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdReinvestOffPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/reinvest/off', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Disable reinvesting
     * @function InvestorApi#v10InvestorProgramsByIdReinvestOffPost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdReinvestOffPost',
    value: function v10InvestorProgramsByIdReinvestOffPost(id, authorization) {
      return this.v10InvestorProgramsByIdReinvestOffPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdReinvestOnPostWithHttpInfo',
    value: function v10InvestorProgramsByIdReinvestOnPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdReinvestOnPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdReinvestOnPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/reinvest/on', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Enable reinvesting
     * @function InvestorApi#v10InvestorProgramsByIdReinvestOnPost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdReinvestOnPost',
    value: function v10InvestorProgramsByIdReinvestOnPost(id, authorization) {
      return this.v10InvestorProgramsByIdReinvestOnPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdRequestsBySkipByTakeGetWithHttpInfo',
    value: function v10InvestorProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      var pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramRequests2.default;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/requests/{skip}/{take}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get program/fund requests
     * @function InvestorApi#v10InvestorProgramsByIdRequestsBySkipByTakeGet
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdRequestsBySkipByTakeGet',
    value: function v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10InvestorProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdWithdrawByAmountPostWithHttpInfo',
    value: function v10InvestorProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }

      var pathParams = {
        'id': id,
        'amount': amount
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/withdraw/{amount}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Withdraw from investment program
     * @function InvestorApi#v10InvestorProgramsByIdWithdrawByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdWithdrawByAmountPost',
    value: function v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization) {
      return this.v10InvestorProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo',
    value: function v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }

      var pathParams = {
        'id': id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramWithdrawInfo2.default;

      return this.apiClient.callApi('/v1.0/investor/programs/{id}/withdraw/info/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Data for withdrawal from investment program
     * @function InvestorApi#v10InvestorProgramsByIdWithdrawInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise<ProgramWithdrawInfo>} a Promise, with an object containing data of type ProgramWithdrawInfo and HTTP response
     */

  }, {
    key: 'v10InvestorProgramsByIdWithdrawInfoByCurrencyGet',
    value: function v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsGetWithHttpInfo',
    value: function v10InvestorProgramsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsGet");
      }

      var pathParams = {};
      var queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramsList2.default;

      return this.apiClient.callApi('/v1.0/investor/programs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Dashboard program list
     * @function InvestorApi#v10InvestorProgramsGet
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {String} opts.currencySecondary 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise<ProgramsList>} a Promise, with an object containing data of type ProgramsList and HTTP response
     */

  }, {
    key: 'v10InvestorProgramsGet',
    value: function v10InvestorProgramsGet(authorization, opts) {
      return this.v10InvestorProgramsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorProgramsRequestsByIdCancelPostWithHttpInfo',
    value: function v10InvestorProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsRequestsByIdCancelPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/investor/programs/requests/{id}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Cancel investment program request
     * @function InvestorApi#v10InvestorProgramsRequestsByIdCancelPost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */

  }, {
    key: 'v10InvestorProgramsRequestsByIdCancelPost',
    value: function v10InvestorProgramsRequestsByIdCancelPost(id, authorization) {
      return this.v10InvestorProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }, {
    key: 'v10InvestorRequestsBySkipByTakeGetWithHttpInfo',
    value: function v10InvestorRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization) {
      var postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorRequestsBySkipByTakeGet");
      }

      var pathParams = {
        'skip': skip,
        'take': take
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProgramRequests2.default;

      return this.apiClient.callApi('/v1.0/investor/requests/{skip}/{take}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get all requests
     * @function InvestorApi#v10InvestorRequestsBySkipByTakeGet
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */

  }, {
    key: 'v10InvestorRequestsBySkipByTakeGet',
    value: function v10InvestorRequestsBySkipByTakeGet(skip, take, authorization) {
      return this.v10InvestorRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return InvestorApi;
}();

exports.default = InvestorApi;