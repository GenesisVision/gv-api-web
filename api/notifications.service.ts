/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/errorViewModel";
import { FundNotificationSettingList } from "../model/fundNotificationSettingList";
import { ManagerNotificationSettingList } from "../model/managerNotificationSettingList";
import { NotificationList } from "../model/notificationList";
import { NotificationSettingList } from "../model/notificationSettingList";
import { ProgramNotificationSettingList } from "../model/programNotificationSettingList";

export class NotificationsService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public addNotificationsSettings(authorization: string, opts?: { 
    assetId?: string, 
    managerId?: string, 
    type?: 'PlatformNewsAndUpdates' | 'PlatformEmergency' | 'PlatformOther' | 'ProfileUpdated' | 'ProfilePwdUpdated' | 'ProfileVerification' | 'Profile2FA' | 'ProfileSecurity' | 'TradingAccountPwdUpdated' | 'ProgramNewsAndUpdates' | 'ProgramEndOfPeriod' | 'ProgramCondition' | 'ProgramExceedInvestmentLimit' | 'FundNewsAndUpdates' | 'FundEndOfPeriod' | 'FundRebalancing' | 'ManagerNewProgram' | 'ManagerNewFund' | 'ManagerNewExternalSignalAccount' | 'Signals' | 'ExternalSignals', 
    conditionType?: 'Empty' | 'Profit' | 'Level' | 'AvailableToInvest', 
    conditionAmount?: number
  }): CancelablePromise<string>{
    return this.addNotificationsSettingsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private addNotificationsSettingsWithHttpInfo(authorization: string, opts: { 
    assetId?: string, 
    managerId?: string, 
    type?: 'PlatformNewsAndUpdates' | 'PlatformEmergency' | 'PlatformOther' | 'ProfileUpdated' | 'ProfilePwdUpdated' | 'ProfileVerification' | 'Profile2FA' | 'ProfileSecurity' | 'TradingAccountPwdUpdated' | 'ProgramNewsAndUpdates' | 'ProgramEndOfPeriod' | 'ProgramCondition' | 'ProgramExceedInvestmentLimit' | 'FundNewsAndUpdates' | 'FundEndOfPeriod' | 'FundRebalancing' | 'ManagerNewProgram' | 'ManagerNewFund' | 'ManagerNewExternalSignalAccount' | 'Signals' | 'ExternalSignals', 
    conditionType?: 'Empty' | 'Profit' | 'Level' | 'AvailableToInvest', 
    conditionAmount?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling addNotificationsSettings");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "AssetId": opts["assetId"],
      "ManagerId": opts["managerId"],
      "Type": opts["type"],
      "ConditionType": opts["conditionType"],
      "ConditionAmount": opts["conditionAmount"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/notifications/settings/add', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNewNotificationsCount(authorization: string): CancelablePromise<number>{
    return this.getNewNotificationsCountWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNewNotificationsCountWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNewNotificationsCount");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'number';

    return this.apiClient.callApi<number>(
      '/v2.0/notifications/new', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNotifications(authorization: string, opts?: { 
    skip?: number, 
    take?: number
  }): CancelablePromise<NotificationList>{
    return this.getNotificationsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNotificationsWithHttpInfo(authorization: string, opts: { 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNotifications");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "skip": opts["skip"],
      "take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = NotificationList;

    return this.apiClient.callApi<NotificationList>(
      '/v2.0/notifications', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNotificationsFundSettings(id: string, authorization: string): CancelablePromise<FundNotificationSettingList>{
    return this.getNotificationsFundSettingsWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNotificationsFundSettingsWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getNotificationsFundSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNotificationsFundSettings");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundNotificationSettingList;

    return this.apiClient.callApi<FundNotificationSettingList>(
      '/v2.0/notifications/settings/funds/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNotificationsManagerSettings(id: string, authorization: string): CancelablePromise<ManagerNotificationSettingList>{
    return this.getNotificationsManagerSettingsWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNotificationsManagerSettingsWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getNotificationsManagerSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNotificationsManagerSettings");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ManagerNotificationSettingList;

    return this.apiClient.callApi<ManagerNotificationSettingList>(
      '/v2.0/notifications/settings/managers/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNotificationsProgramSettings(id: string, authorization: string): CancelablePromise<ProgramNotificationSettingList>{
    return this.getNotificationsProgramSettingsWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNotificationsProgramSettingsWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getNotificationsProgramSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNotificationsProgramSettings");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramNotificationSettingList;

    return this.apiClient.callApi<ProgramNotificationSettingList>(
      '/v2.0/notifications/settings/programs/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getNotificationsSettings(authorization: string): CancelablePromise<NotificationSettingList>{
    return this.getNotificationsSettingsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getNotificationsSettingsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getNotificationsSettings");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = NotificationSettingList;

    return this.apiClient.callApi<NotificationSettingList>(
      '/v2.0/notifications/settings', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public readNotification(id: string, authorization: string): CancelablePromise<null>{
    return this.readNotificationWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private readNotificationWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling readNotification");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling readNotification");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/notifications/{id}/read', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public removeNotificationsSettings(id: string, authorization: string): CancelablePromise<null>{
    return this.removeNotificationsSettingsWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private removeNotificationsSettingsWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling removeNotificationsSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling removeNotificationsSettings");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/notifications/settings/remove/{id}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public toggleNotificationSettings(id: string, enable: boolean, authorization: string): CancelablePromise<string>{
    return this.toggleNotificationSettingsWithHttpInfo(id, enable, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private toggleNotificationSettingsWithHttpInfo(id: string, enable: boolean, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling toggleNotificationSettings");
    }
    // verify the required parameter "enable" is set
    if (enable === undefined || enable === null) {
      throw new Error("Missing the required parameter \"enable\" when calling toggleNotificationSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling toggleNotificationSettings");
    }

    let pathParams = { 
      "id": id,
      "enable": enable
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/notifications/settings/{id}/{enable}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
