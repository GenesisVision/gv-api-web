'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v1.0
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BrokerInitData = require('../model/BrokerInitData');

var _BrokerInitData2 = _interopRequireDefault(_BrokerInitData);

var _BrokerOefInitData = require('../model/BrokerOefInitData');

var _BrokerOefInitData2 = _interopRequireDefault(_BrokerOefInitData);

var _ClosePeriodData = require('../model/ClosePeriodData');

var _ClosePeriodData2 = _interopRequireDefault(_ClosePeriodData);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _InvestmentProgramAccrual = require('../model/InvestmentProgramAccrual');

var _InvestmentProgramAccrual2 = _interopRequireDefault(_InvestmentProgramAccrual);

var _ManagerAccountOnlineInfo = require('../model/ManagerAccountOnlineInfo');

var _ManagerAccountOnlineInfo2 = _interopRequireDefault(_ManagerAccountOnlineInfo);

var _ManagerHistoryIpfsHash = require('../model/ManagerHistoryIpfsHash');

var _ManagerHistoryIpfsHash2 = _interopRequireDefault(_ManagerHistoryIpfsHash);

var _NewManager = require('../model/NewManager');

var _NewManager2 = _interopRequireDefault(_NewManager);

var _NewTradeEvent = require('../model/NewTradeEvent');

var _NewTradeEvent2 = _interopRequireDefault(_NewTradeEvent);

var _PlatformAssets = require('../model/PlatformAssets');

var _PlatformAssets2 = _interopRequireDefault(_PlatformAssets);

var _StartValues = require('../model/StartValues');

var _StartValues2 = _interopRequireDefault(_StartValues);

var _UsersRealAssets = require('../model/UsersRealAssets');

var _UsersRealAssets2 = _interopRequireDefault(_UsersRealAssets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Broker service.
* @module api/BrokerApi
* @version v1.0
*/
var BrokerApi = function () {

  /**
  * Constructs a new BrokerApi. 
  * @alias module:api/BrokerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function BrokerApi(apiClient) {
    _classCallCheck(this, BrokerApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Create manager
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/NewManager} opts.request 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */


  _createClass(BrokerApi, [{
    key: 'v10BrokerAccountCreatePostWithHttpInfo',
    value: function v10BrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerAccountCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/v1.0/broker/account/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'v10BrokerAccountCreatePost',
    value: function v10BrokerAccountCreatePost(authorization, opts) {
      return this.v10BrokerAccountCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'v10BrokerAccountOefCreatePostWithHttpInfo',
    value: function v10BrokerAccountOefCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerAccountOefCreatePost");
      }

      var pathParams = {};
      var queryParams = {
        'requestId': opts['requestId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/v1.0/broker/account/oef/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'v10BrokerAccountOefCreatePost',
    value: function v10BrokerAccountOefCreatePost(authorization, opts) {
      return this.v10BrokerAccountOefCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */

  }, {
    key: 'v10BrokerFreeaddressesGetWithHttpInfo',
    value: function v10BrokerFreeaddressesGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerFreeaddressesGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ['String'];

      return this.apiClient.callApi('/v1.0/broker/freeaddresses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */

  }, {
    key: 'v10BrokerFreeaddressesGet',
    value: function v10BrokerFreeaddressesGet(authorization) {
      return this.v10BrokerFreeaddressesGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */

  }, {
    key: 'v10BrokerInitDataGetWithHttpInfo',
    value: function v10BrokerInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerInitDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokerInitData2.default;

      return this.apiClient.callApi('/v1.0/broker/initData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */

  }, {
    key: 'v10BrokerInitDataGet',
    value: function v10BrokerInitDataGet(authorization, opts) {
      return this.v10BrokerInitDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo',
    value: function v10BrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerManagersAccountsOnlineInfoUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/managersAccounts/onlineInfo/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerManagersAccountsOnlineInfoUpdatePost',
    value: function v10BrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.v10BrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get all supported assets for OEFs
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlatformAssets} and HTTP response
     */

  }, {
    key: 'v10BrokerOefAssetAllGetWithHttpInfo',
    value: function v10BrokerOefAssetAllGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefAssetAllGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _PlatformAssets2.default;

      return this.apiClient.callApi('/v1.0/broker/oef/asset/all', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get all supported assets for OEFs
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlatformAssets}
     */

  }, {
    key: 'v10BrokerOefAssetAllGet',
    value: function v10BrokerOefAssetAllGet(authorization) {
      return this.v10BrokerOefAssetAllGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersRealAssets} and HTTP response
     */

  }, {
    key: 'v10BrokerOefGetRealAssetsGetWithHttpInfo',
    value: function v10BrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefGetRealAssetsGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _UsersRealAssets2.default;

      return this.apiClient.callApi('/v1.0/broker/oef/getRealAssets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersRealAssets}
     */

  }, {
    key: 'v10BrokerOefGetRealAssetsGet',
    value: function v10BrokerOefGetRealAssetsGet(authorization, opts) {
      return this.v10BrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerOefInitData} and HTTP response
     */

  }, {
    key: 'v10BrokerOefInitDataGetWithHttpInfo',
    value: function v10BrokerOefInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefInitDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokerOefInitData2.default;

      return this.apiClient.callApi('/v1.0/broker/oef/initData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerOefInitData}
     */

  }, {
    key: 'v10BrokerOefInitDataGet',
    value: function v10BrokerOefInitDataGet(authorization, opts) {
      return this.v10BrokerOefInitDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerOefSetRealAssetsPostWithHttpInfo',
    value: function v10BrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['assets'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerOefSetRealAssetsPost");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/oef/setRealAssets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerOefSetRealAssetsPost',
    value: function v10BrokerOefSetRealAssetsPost(authorization, opts) {
      return this.v10BrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodAccrueProfitsPostWithHttpInfo',
    value: function v10BrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodAccrueProfitsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/accrueProfits', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodAccrueProfitsPost',
    value: function v10BrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.v10BrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodClosePostWithHttpInfo',
    value: function v10BrokerPeriodClosePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodClosePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'currentBalance': opts['currentBalance']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodClosePost',
    value: function v10BrokerPeriodClosePost(authorization, opts) {
      return this.v10BrokerPeriodClosePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodOefApplyAssetPartsPostWithHttpInfo',
    value: function v10BrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefApplyAssetPartsPost");
      }

      var pathParams = {};
      var queryParams = {
        'assetsRequestId': opts['assetsRequestId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/oef/applyAssetParts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodOefApplyAssetPartsPost',
    value: function v10BrokerPeriodOefApplyAssetPartsPost(authorization, opts) {
      return this.v10BrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodOefProcessClosingProgramPostWithHttpInfo',
    value: function v10BrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefProcessClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/oef/processClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodOefProcessClosingProgramPost',
    value: function v10BrokerPeriodOefProcessClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo',
    value: function v10BrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodOefProcessForceClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/oef/processForceClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodOefProcessForceClosingProgramPost',
    value: function v10BrokerPeriodOefProcessForceClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodProcessClosingProgramPostWithHttpInfo',
    value: function v10BrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodProcessClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/processClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodProcessClosingProgramPost',
    value: function v10BrokerPeriodProcessClosingProgramPost(authorization, opts) {
      return this.v10BrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'v10BrokerPeriodProcessInvestmentRequestsPostWithHttpInfo',
    value: function v10BrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodProcessInvestmentRequestsPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/v1.0/broker/period/processInvestmentRequests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'v10BrokerPeriodProcessInvestmentRequestsPost',
    value: function v10BrokerPeriodProcessInvestmentRequestsPost(authorization, opts) {
      return this.v10BrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodReevaluateManagerTokenPostWithHttpInfo',
    value: function v10BrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodReevaluateManagerTokenPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'investorLossShare': opts['investorLossShare']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/reevaluateManagerToken', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodReevaluateManagerTokenPost',
    value: function v10BrokerPeriodReevaluateManagerTokenPost(authorization, opts) {
      return this.v10BrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodSetStartValuesPostWithHttpInfo',
    value: function v10BrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodSetStartValuesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/setStartValues', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodSetStartValuesPost',
    value: function v10BrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.v10BrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerPeriodTerminatePostWithHttpInfo',
    value: function v10BrokerPeriodTerminatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodTerminatePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/period/terminate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerPeriodTerminatePost',
    value: function v10BrokerPeriodTerminatePost(authorization, opts) {
      return this.v10BrokerPeriodTerminatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */

  }, {
    key: 'v10BrokerPeriodlosingDataGetWithHttpInfo',
    value: function v10BrokerPeriodlosingDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerPeriodlosingDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ClosePeriodData2.default;

      return this.apiClient.callApi('/v1.0/broker/period/сlosingData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */

  }, {
    key: 'v10BrokerPeriodlosingDataGet',
    value: function v10BrokerPeriodlosingDataGet(authorization, opts) {
      return this.v10BrokerPeriodlosingDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */

  }, {
    key: 'v10BrokerTradehistoryGetWithHttpInfo',
    value: function v10BrokerTradehistoryGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradehistoryGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'start': opts['start'],
        'end': opts['end']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ['String'];

      return this.apiClient.callApi('/v1.0/broker/tradehistory', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */

  }, {
    key: 'v10BrokerTradehistoryGet',
    value: function v10BrokerTradehistoryGet(authorization, opts) {
      return this.v10BrokerTradehistoryGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerTradesIpfsHashUpdatePostWithHttpInfo',
    value: function v10BrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradesIpfsHashUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/trades/ipfsHash/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerTradesIpfsHashUpdatePost',
    value: function v10BrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.v10BrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10BrokerTradesNewPostWithHttpInfo',
    value: function v10BrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10BrokerTradesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/broker/trades/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10BrokerTradesNewPost',
    value: function v10BrokerTradesNewPost(authorization, opts) {
      return this.v10BrokerTradesNewPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return BrokerApi;
}();

exports.default = BrokerApi;