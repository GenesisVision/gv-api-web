/**
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokerInitData from '../model/BrokerInitData';
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ClosePeriodData from '../model/ClosePeriodData';
import ErrorViewModel from '../model/ErrorViewModel';
import InvestmentProgramAccrual from '../model/InvestmentProgramAccrual';
import LoginViewModel from '../model/LoginViewModel';
import ManagerAccountOnlineInfo from '../model/ManagerAccountOnlineInfo';
import ManagerHistoryIpfsHash from '../model/ManagerHistoryIpfsHash';
import NewManager from '../model/NewManager';
import NewOpenTradesEvent from '../model/NewOpenTradesEvent';
import NewTradeEvent from '../model/NewTradeEvent';
import StartValues from '../model/StartValues';

/**
* Broker service.
* @module api/BrokerApi
* @version v1
*/
export default class BrokerApi {

    /**
    * Constructs a new BrokerApi. 
    * @alias module:api/BrokerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiBrokerAccountCreatePost operation.
     * @callback module:api/BrokerApi~apiBrokerAccountCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @param {module:api/BrokerApi~apiBrokerAccountCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiBrokerAccountCreatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/account/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerAuthChangePasswordPost operation.
     * @callback module:api/BrokerApi~apiBrokerAuthChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {module:api/BrokerApi~apiBrokerAuthChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerAuthChangePasswordPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthChangePasswordPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerAuthConfirmEmailPost operation.
     * @callback module:api/BrokerApi~apiBrokerAuthConfirmEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/BrokerApi~apiBrokerAuthConfirmEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiBrokerAuthConfirmEmailPost(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/confirmEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerAuthSignInPost operation.
     * @callback module:api/BrokerApi~apiBrokerAuthSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {module:api/BrokerApi~apiBrokerAuthSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiBrokerAuthSignInPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerAuthUpdateTokenGet operation.
     * @callback module:api/BrokerApi~apiBrokerAuthUpdateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerAuthUpdateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiBrokerAuthUpdateTokenGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthUpdateTokenGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/updateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerInitDataGet operation.
     * @callback module:api/BrokerApi~apiBrokerInitDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokerInitData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get broker initial data
     * @param {String} brokerTradeServerId 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerInitDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokerInitData}
     */
    apiBrokerInitDataGet(brokerTradeServerId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'brokerTradeServerId' is set
      if (brokerTradeServerId === undefined || brokerTradeServerId === null) {
        throw new Error("Missing the required parameter 'brokerTradeServerId' when calling apiBrokerInitDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': brokerTradeServerId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerInitData;

      return this.apiClient.callApi(
        '/api/broker/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerManagersAccountsOnlineInfoUpdatePost operation.
     * @callback module:api/BrokerApi~apiBrokerManagersAccountsOnlineInfoUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @param {module:api/BrokerApi~apiBrokerManagersAccountsOnlineInfoUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerManagersAccountsOnlineInfoUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/managersAccounts/onlineInfo/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodAccrueProfitsPost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodAccrueProfitsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @param {module:api/BrokerApi~apiBrokerPeriodAccrueProfitsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodAccrueProfitsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodAccrueProfitsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/accrueProfits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodClosePost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close investment period
     * @param {String} investmentProgramId 
     * @param {Number} currentBalance 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodClosePost(investmentProgramId, currentBalance, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'currentBalance' is set
      if (currentBalance === undefined || currentBalance === null) {
        throw new Error("Missing the required parameter 'currentBalance' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'currentBalance': currentBalance
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodProcessClosingProgramPost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodProcessClosingProgramPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close investment program
     * @param {String} investmentProgramId 
     * @param {Number} managerBalance 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodProcessClosingProgramPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodProcessClosingProgramPost(investmentProgramId, managerBalance, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'managerBalance' is set
      if (managerBalance === undefined || managerBalance === null) {
        throw new Error("Missing the required parameter 'managerBalance' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'managerBalance': managerBalance
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodProcessInvestmentRequestsPost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodProcessInvestmentRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process investment requests
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodProcessInvestmentRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiBrokerPeriodProcessInvestmentRequestsPost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/period/processInvestmentRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodReevaluateManagerTokenPost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodReevaluateManagerTokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} investmentProgramId 
     * @param {Number} investorLossShare 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodReevaluateManagerTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodReevaluateManagerTokenPost(investmentProgramId, investorLossShare, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'investorLossShare' is set
      if (investorLossShare === undefined || investorLossShare === null) {
        throw new Error("Missing the required parameter 'investorLossShare' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'investorLossShare': investorLossShare
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/reevaluateManagerToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodSetStartValuesPost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodSetStartValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @param {module:api/BrokerApi~apiBrokerPeriodSetStartValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodSetStartValuesPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodSetStartValuesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/setStartValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodTerminatePost operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodTerminatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodTerminatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerPeriodTerminatePost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodTerminatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodTerminatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerPeriodlosingDataGet operation.
     * @callback module:api/BrokerApi~apiBrokerPeriodlosingDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosePeriodData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data for closing investment period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/BrokerApi~apiBrokerPeriodlosingDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosePeriodData}
     */
    apiBrokerPeriodlosingDataGet(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodlosingDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodlosingDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClosePeriodData;

      return this.apiClient.callApi(
        '/api/broker/period/сlosingData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerTradesIpfsHashUpdatePost operation.
     * @callback module:api/BrokerApi~apiBrokerTradesIpfsHashUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @param {module:api/BrokerApi~apiBrokerTradesIpfsHashUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerTradesIpfsHashUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesIpfsHashUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/ipfsHash/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerTradesNewPost operation.
     * @callback module:api/BrokerApi~apiBrokerTradesNewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @param {module:api/BrokerApi~apiBrokerTradesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerTradesNewPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBrokerTradesOpenTradesNewPost operation.
     * @callback module:api/BrokerApi~apiBrokerTradesOpenTradesNewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * New open trades event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewOpenTradesEvent} opts.trades 
     * @param {module:api/BrokerApi~apiBrokerTradesOpenTradesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBrokerTradesOpenTradesNewPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['trades'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesOpenTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/openTrades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
