'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *


var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BrokersFilter = require('../model/BrokersFilter');

var _BrokersFilter2 = _interopRequireDefault(_BrokersFilter);

var _BrokersViewModel = require('../model/BrokersViewModel');

var _BrokersViewModel2 = _interopRequireDefault(_BrokersViewModel);

var _ChangePasswordViewModel = require('../model/ChangePasswordViewModel');

var _ChangePasswordViewModel2 = _interopRequireDefault(_ChangePasswordViewModel);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _ForgotPasswordViewModel = require('../model/ForgotPasswordViewModel');

var _ForgotPasswordViewModel2 = _interopRequireDefault(_ForgotPasswordViewModel);

var _Invest = require('../model/Invest');

var _Invest2 = _interopRequireDefault(_Invest);

var _InvestmentProgramBuyToken = require('../model/InvestmentProgramBuyToken');

var _InvestmentProgramBuyToken2 = _interopRequireDefault(_InvestmentProgramBuyToken);

var _InvestmentProgramRequests = require('../model/InvestmentProgramRequests');

var _InvestmentProgramRequests2 = _interopRequireDefault(_InvestmentProgramRequests);

var _InvestmentProgramRequestsFilter = require('../model/InvestmentProgramRequestsFilter');

var _InvestmentProgramRequestsFilter2 = _interopRequireDefault(_InvestmentProgramRequestsFilter);

var _InvestmentProgramUpdate = require('../model/InvestmentProgramUpdate');

var _InvestmentProgramUpdate2 = _interopRequireDefault(_InvestmentProgramUpdate);

var _InvestmentProgramViewModel = require('../model/InvestmentProgramViewModel');

var _InvestmentProgramViewModel2 = _interopRequireDefault(_InvestmentProgramViewModel);

var _InvestmentProgramsFilter = require('../model/InvestmentProgramsFilter');

var _InvestmentProgramsFilter2 = _interopRequireDefault(_InvestmentProgramsFilter);

var _InvestmentProgramsViewModel = require('../model/InvestmentProgramsViewModel');

var _InvestmentProgramsViewModel2 = _interopRequireDefault(_InvestmentProgramsViewModel);

var _LoginViewModel = require('../model/LoginViewModel');

var _LoginViewModel2 = _interopRequireDefault(_LoginViewModel);

var _ManagerDashboardProgramsFilter = require('../model/ManagerDashboardProgramsFilter');

var _ManagerDashboardProgramsFilter2 = _interopRequireDefault(_ManagerDashboardProgramsFilter);

var _ManagerDashboardStatistic = require('../model/ManagerDashboardStatistic');

var _ManagerDashboardStatistic2 = _interopRequireDefault(_ManagerDashboardStatistic);

var _ManagerInvestmentPrograms = require('../model/ManagerInvestmentPrograms');

var _ManagerInvestmentPrograms2 = _interopRequireDefault(_ManagerInvestmentPrograms);

var _NewInvestmentRequest = require('../model/NewInvestmentRequest');

var _NewInvestmentRequest2 = _interopRequireDefault(_NewInvestmentRequest);

var _PasswordModel = require('../model/PasswordModel');

var _PasswordModel2 = _interopRequireDefault(_PasswordModel);

var _ProfileFullViewModel = require('../model/ProfileFullViewModel');

var _ProfileFullViewModel2 = _interopRequireDefault(_ProfileFullViewModel);

var _ProfilePublicViewModel = require('../model/ProfilePublicViewModel');

var _ProfilePublicViewModel2 = _interopRequireDefault(_ProfilePublicViewModel);

var _RecoveryCodesViewModel = require('../model/RecoveryCodesViewModel');

var _RecoveryCodesViewModel2 = _interopRequireDefault(_RecoveryCodesViewModel);

var _RegisterManagerViewModel = require('../model/RegisterManagerViewModel');

var _RegisterManagerViewModel2 = _interopRequireDefault(_RegisterManagerViewModel);

var _ResetPasswordViewModel = require('../model/ResetPasswordViewModel');

var _ResetPasswordViewModel2 = _interopRequireDefault(_ResetPasswordViewModel);

var _TradesChartViewModel = require('../model/TradesChartViewModel');

var _TradesChartViewModel2 = _interopRequireDefault(_TradesChartViewModel);

var _TradesFilter = require('../model/TradesFilter');

var _TradesFilter2 = _interopRequireDefault(_TradesFilter);

var _TradesViewModel = require('../model/TradesViewModel');

var _TradesViewModel2 = _interopRequireDefault(_TradesViewModel);

var _TransactionsFilter = require('../model/TransactionsFilter');

var _TransactionsFilter2 = _interopRequireDefault(_TransactionsFilter);

var _TwoFactorAuthenticator = require('../model/TwoFactorAuthenticator');

var _TwoFactorAuthenticator2 = _interopRequireDefault(_TwoFactorAuthenticator);

var _TwoFactorAuthenticatorConfirm = require('../model/TwoFactorAuthenticatorConfirm');

var _TwoFactorAuthenticatorConfirm2 = _interopRequireDefault(_TwoFactorAuthenticatorConfirm);

var _TwoFactorStatus = require('../model/TwoFactorStatus');

var _TwoFactorStatus2 = _interopRequireDefault(_TwoFactorStatus);

var _UpdateProfileViewModel = require('../model/UpdateProfileViewModel');

var _UpdateProfileViewModel2 = _interopRequireDefault(_UpdateProfileViewModel);

var _WalletAddressViewModel = require('../model/WalletAddressViewModel');

var _WalletAddressViewModel2 = _interopRequireDefault(_WalletAddressViewModel);

var _WalletInvestmentPrograms = require('../model/WalletInvestmentPrograms');

var _WalletInvestmentPrograms2 = _interopRequireDefault(_WalletInvestmentPrograms);

var _WalletStatistic = require('../model/WalletStatistic');

var _WalletStatistic2 = _interopRequireDefault(_WalletStatistic);

var _WalletStatisticFilter = require('../model/WalletStatisticFilter');

var _WalletStatisticFilter2 = _interopRequireDefault(_WalletStatisticFilter);

var _WalletTransactionsViewModel = require('../model/WalletTransactionsViewModel');

var _WalletTransactionsViewModel2 = _interopRequireDefault(_WalletTransactionsViewModel);

var _WalletWithdrawRequestModel = require('../model/WalletWithdrawRequestModel');

var _WalletWithdrawRequestModel2 = _interopRequireDefault(_WalletWithdrawRequestModel);

var _WalletsViewModel = require('../model/WalletsViewModel');

var _WalletsViewModel2 = _interopRequireDefault(_WalletsViewModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Manager service.
* @module api/ManagerApi
* @version v1
*/
var ManagerApi = function () {

  /**
  * Constructs a new ManagerApi. 
  * @alias module:api/ManagerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ManagerApi(apiClient) {
    _classCallCheck(this, ManagerApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Callback function to receive the result of the apiManagerAccountNewInvestmentRequestPost operation.
   * @callback module:api/ManagerApi~apiManagerAccountNewInvestmentRequestPostCallback
   * @param {String} error Error message, if any.
   * @param {'String'} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create new investment request
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/NewInvestmentRequest} opts.request 
   * @param {module:api/ManagerApi~apiManagerAccountNewInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link 'String'}
   */


  _createClass(ManagerApi, [{
    key: 'apiManagerAccountNewInvestmentRequestPost',
    value: function apiManagerAccountNewInvestmentRequestPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAccountNewInvestmentRequestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/manager/account/newInvestmentRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faConfirmPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA confirm
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiManagerAuth2faConfirmPost',
    value: function apiManagerAuth2faConfirmPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faConfirmPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/manager/auth/2fa/confirm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faCreatePost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorAuthenticator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorAuthenticator}
     */

  }, {
    key: 'apiManagerAuth2faCreatePost',
    value: function apiManagerAuth2faCreatePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorAuthenticator2.default;

      return this.apiClient.callApi('/api/manager/auth/2fa/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faDisablePost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerAuth2faDisablePost',
    value: function apiManagerAuth2faDisablePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faDisablePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/auth/2fa/disable', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faGet operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerAuth2faGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorStatus}
     */

  }, {
    key: 'apiManagerAuth2faGet',
    value: function apiManagerAuth2faGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TwoFactorStatus2.default;

      return this.apiClient.callApi('/api/manager/auth/2fa', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faRecoveryCodesNewPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faRecoveryCodesNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faRecoveryCodesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiManagerAuth2faRecoveryCodesNewPost',
    value: function apiManagerAuth2faRecoveryCodesNewPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faRecoveryCodesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/manager/auth/2fa/recoveryCodes/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faRecoveryCodesPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faRecoveryCodesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faRecoveryCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */

  }, {
    key: 'apiManagerAuth2faRecoveryCodesPost',
    value: function apiManagerAuth2faRecoveryCodesPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faRecoveryCodesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _RecoveryCodesViewModel2.default;

      return this.apiClient.callApi('/api/manager/auth/2fa/recoveryCodes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthChangePasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerAuthChangePasswordPost',
    value: function apiManagerAuthChangePasswordPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuthChangePasswordPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/auth/changePassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthConfirmEmailPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthConfirmEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/ManagerApi~apiManagerAuthConfirmEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiManagerAuthConfirmEmailPost',
    value: function apiManagerAuthConfirmEmailPost(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/manager/auth/confirmEmail', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthForgotPasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password manager
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerAuthForgotPasswordPost',
    value: function apiManagerAuthForgotPasswordPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/auth/forgotPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthResetPasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiManagerAuthResetPasswordPost',
    value: function apiManagerAuthResetPasswordPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/manager/auth/resetPassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthSignInPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiManagerAuthSignInPost',
    value: function apiManagerAuthSignInPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/manager/auth/signIn', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthSignUpPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthSignUpPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new manager
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterManagerViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthSignUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerAuthSignUpPost',
    value: function apiManagerAuthSignUpPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/auth/signUp', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerAuthUpdateTokenGet operation.
     * @callback module:api/ManagerApi~apiManagerAuthUpdateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerAuthUpdateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */

  }, {
    key: 'apiManagerAuthUpdateTokenGet',
    value: function apiManagerAuthUpdateTokenGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuthUpdateTokenGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/manager/auth/updateToken', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerBrokersPost operation.
     * @callback module:api/ManagerApi~apiManagerBrokersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokersViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all enabled trade servers
     * @param {Object} opts Optional parameters
     * @param {module:model/BrokersFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerBrokersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokersViewModel}
     */

  }, {
    key: 'apiManagerBrokersPost',
    value: function apiManagerBrokersPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokersViewModel2.default;

      return this.apiClient.callApi('/api/manager/brokers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardPendingProgramsGet operation.
     * @callback module:api/ManagerApi~apiManagerDashboardPendingProgramsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard pending programs
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerDashboardPendingProgramsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerInvestmentPrograms}
     */

  }, {
    key: 'apiManagerDashboardPendingProgramsGet',
    value: function apiManagerDashboardPendingProgramsGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardPendingProgramsGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerInvestmentPrograms2.default;

      return this.apiClient.callApi('/api/manager/dashboard/pendingPrograms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardProgramsPost operation.
     * @callback module:api/ManagerApi~apiManagerDashboardProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard programs
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerDashboardProgramsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerDashboardProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerInvestmentPrograms}
     */

  }, {
    key: 'apiManagerDashboardProgramsPost',
    value: function apiManagerDashboardProgramsPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardProgramsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerInvestmentPrograms2.default;

      return this.apiClient.callApi('/api/manager/dashboard/programs', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardStatisticGet operation.
     * @callback module:api/ManagerApi~apiManagerDashboardStatisticGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerDashboardStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard statistic
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerDashboardStatisticGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerDashboardStatistic}
     */

  }, {
    key: 'apiManagerDashboardStatisticGet',
    value: function apiManagerDashboardStatisticGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardStatisticGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ManagerDashboardStatistic2.default;

      return this.apiClient.callApi('/api/manager/dashboard/statistic', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentCancelInvestmentRequestPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentCancelInvestmentRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentCancelInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentCancelInvestmentRequestPost',
    value: function apiManagerInvestmentCancelInvestmentRequestPost(requestId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling apiManagerInvestmentCancelInvestmentRequestPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentCancelInvestmentRequestPost");
      }

      var pathParams = {};
      var queryParams = {
        'requestId': requestId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investment/cancelInvestmentRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentClosePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close existing investment program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentClosePost',
    value: function apiManagerInvestmentClosePost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentClosePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investment/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentInvestPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentInvestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manager deposit in his own investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentInvestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentInvestPost',
    value: function apiManagerInvestmentInvestPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentInvestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investment/invest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramBuyTokensGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramBuyTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramBuyToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramBuyTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramBuyToken}
     */

  }, {
    key: 'apiManagerInvestmentProgramBuyTokensGet',
    value: function apiManagerInvestmentProgramBuyTokensGet(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramBuyTokensGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramBuyTokensGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramBuyToken2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram/buyTokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramEquityChartGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramEquityChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramEquityChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiManagerInvestmentProgramEquityChartGet',
    value: function apiManagerInvestmentProgramEquityChartGet(investmentProgramId, timeFrame, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramEquityChartGet");
      }

      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling apiManagerInvestmentProgramEquityChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'timeFrame': timeFrame
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram/equity/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramViewModel}
     */

  }, {
    key: 'apiManagerInvestmentProgramGet',
    value: function apiManagerInvestmentProgramGet(investmentProgramId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramViewModel2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramPeriodClosePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramPeriodClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close current period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramPeriodClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentProgramPeriodClosePost',
    value: function apiManagerInvestmentProgramPeriodClosePost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramPeriodClosePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investmentProgram/period/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramRequestsPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramRequests}
     */

  }, {
    key: 'apiManagerInvestmentProgramRequestsPost',
    value: function apiManagerInvestmentProgramRequestsPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramRequestsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramRequests2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram/requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramTradesChartGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramTradesChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramTradesChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */

  }, {
    key: 'apiManagerInvestmentProgramTradesChartGet',
    value: function apiManagerInvestmentProgramTradesChartGet(investmentProgramId, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramTradesChartGet");
      }

      var pathParams = {};
      var queryParams = {
        'InvestmentProgramId': investmentProgramId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesChartViewModel2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram/trades/chart', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramTradesPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesViewModel}
     */

  }, {
    key: 'apiManagerInvestmentProgramTradesPost',
    value: function apiManagerInvestmentProgramTradesPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TradesViewModel2.default;

      return this.apiClient.callApi('/api/manager/investmentProgram/trades', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramUpdatePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update investment program details
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramUpdate} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentProgramUpdatePost',
    value: function apiManagerInvestmentProgramUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investmentProgram/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsFavoritesAddPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentProgramsFavoritesAddPost',
    value: function apiManagerInvestmentProgramsFavoritesAddPost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramsFavoritesAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramsFavoritesAddPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investmentPrograms/favorites/add', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsFavoritesRemovePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentProgramsFavoritesRemovePost',
    value: function apiManagerInvestmentProgramsFavoritesRemovePost(investmentProgramId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramsFavoritesRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramsFavoritesRemovePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investmentPrograms/favorites/remove', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramsViewModel}
     */

  }, {
    key: 'apiManagerInvestmentProgramsPost',
    value: function apiManagerInvestmentProgramsPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _InvestmentProgramsViewModel2.default;

      return this.apiClient.callApi('/api/manager/investmentPrograms', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentWithdrawPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentWithdrawPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manager withdrawal from his own investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentWithdrawPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerInvestmentWithdrawPost',
    value: function apiManagerInvestmentWithdrawPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentWithdrawPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/investment/withdraw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerProfileFullGet operation.
     * @callback module:api/ManagerApi~apiManagerProfileFullGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileFullViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerProfileFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileFullViewModel}
     */

  }, {
    key: 'apiManagerProfileFullGet',
    value: function apiManagerProfileFullGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerProfileFullGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfileFullViewModel2.default;

      return this.apiClient.callApi('/api/manager/profile/full', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerProfilePublicGet operation.
     * @callback module:api/ManagerApi~apiManagerProfilePublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePublicViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public profile
     * @param {String} userId 
     * @param {module:api/ManagerApi~apiManagerProfilePublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePublicViewModel}
     */

  }, {
    key: 'apiManagerProfilePublicGet',
    value: function apiManagerProfilePublicGet(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiManagerProfilePublicGet");
      }

      var pathParams = {};
      var queryParams = {
        'userId': userId
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ProfilePublicViewModel2.default;

      return this.apiClient.callApi('/api/manager/profile/public', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerProfileUpdatePost operation.
     * @callback module:api/ManagerApi~apiManagerProfileUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerProfileUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerProfileUpdatePost',
    value: function apiManagerProfileUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerProfileUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/profile/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletAddressGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletAddressViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerWalletAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletAddressViewModel}
     */

  }, {
    key: 'apiManagerWalletAddressGet',
    value: function apiManagerWalletAddressGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletAddressGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletAddressViewModel2.default;

      return this.apiClient.callApi('/api/manager/wallet/address', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerWalletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */

  }, {
    key: 'apiManagerWalletGet',
    value: function apiManagerWalletGet(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletsViewModel2.default;

      return this.apiClient.callApi('/api/manager/wallet', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletStatisticPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletStatisticPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerWalletStatisticPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletStatistic}
     */

  }, {
    key: 'apiManagerWalletStatisticPost',
    value: function apiManagerWalletStatisticPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletStatisticPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletStatistic2.default;

      return this.apiClient.callApi('/api/manager/wallet/statistic', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletTransactionsInvestmentProgramsListGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletTransactionsInvestmentProgramsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @param {module:api/ManagerApi~apiManagerWalletTransactionsInvestmentProgramsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletInvestmentPrograms}
     */

  }, {
    key: 'apiManagerWalletTransactionsInvestmentProgramsListGet',
    value: function apiManagerWalletTransactionsInvestmentProgramsListGet(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletTransactionsInvestmentProgramsListGet");
      }

      var pathParams = {};
      var queryParams = {
        'mask': opts['mask']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletInvestmentPrograms2.default;

      return this.apiClient.callApi('/api/manager/wallet/transactions/investmentProgramsList', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletTransactionsPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerWalletTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionsViewModel}
     */

  }, {
    key: 'apiManagerWalletTransactionsPost',
    value: function apiManagerWalletTransactionsPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletTransactionsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _WalletTransactionsViewModel2.default;

      return this.apiClient.callApi('/api/manager/wallet/transactions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }

    /**
     * Callback function to receive the result of the apiManagerWalletWithdrawRequestPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletWithdrawRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @param {module:api/ManagerApi~apiManagerWalletWithdrawRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */

  }, {
    key: 'apiManagerWalletWithdrawRequestPost',
    value: function apiManagerWalletWithdrawRequestPost(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletWithdrawRequestPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/manager/wallet/withdrawRequest', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, callback);
    }
  }]);

  return ManagerApi;
}();

exports.default = ManagerApi;