/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWithdrawalRequestModel from '../model/CreateWithdrawalRequestModel';
import ErrorViewModel from '../model/ErrorViewModel';
import InternalTransferRequest from '../model/InternalTransferRequest';
import MultiWalletExternalTransactionsViewModel from '../model/MultiWalletExternalTransactionsViewModel';
import MultiWalletTransactionsViewModel from '../model/MultiWalletTransactionsViewModel';
import TransactionDetails from '../model/TransactionDetails';
import UserCommissionData from '../model/UserCommissionData';
import WalletDepositSummary from '../model/WalletDepositSummary';
import WalletMultiAvailable from '../model/WalletMultiAvailable';
import WalletMultiSummary from '../model/WalletMultiSummary';
import WithdrawalSummary from '../model/WithdrawalSummary';

/**
* Wallet service.
* @class WalletApi
* @version v1.0
*/
export default class WalletApi {

    /**
    * Constructs a new WalletApi. 
    * @function WalletApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {WalletApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      cancelWithdrawalRequestWithHttpInfo(txId, authorization) {
      let postBody = null;

      // verify the required parameter 'txId' is set
      if (txId === undefined || txId === null) {
        throw new Error("Missing the required parameter 'txId' when calling cancelWithdrawalRequest");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelWithdrawalRequest");
      }


      let pathParams = {
        'txId': txId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/withdraw/request/cancel/{txId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @function WalletApi#cancelWithdrawalRequest
     * @param {String} txId 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      cancelWithdrawalRequest(txId, authorization) {
      return this.cancelWithdrawalRequestWithHttpInfo(txId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      confirmWithdrawalRequestByCodeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'requestId': opts['requestId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/withdraw/request/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @function WalletApi#confirmWithdrawalRequestByCode
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.requestId] 
     * @param {String} [opts.code] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      confirmWithdrawalRequestByCode(opts) {
      return this.confirmWithdrawalRequestByCodeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      createWithdrawalRequestWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createWithdrawalRequest");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/withdraw/request/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @function WalletApi#createWithdrawalRequest
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {CreateWithdrawalRequestModel} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      createWithdrawalRequest(authorization, opts) {
      return this.createWithdrawalRequestWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      disablePayFeesWithGvtWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling disablePayFeesWithGvt");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/paygvtfee/off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disable paying platform fees with GVT
     * @function WalletApi#disablePayFeesWithGvt
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      disablePayFeesWithGvt(authorization) {
      return this.disablePayFeesWithGvtWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      enablePayFeesWithGvtWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling enablePayFeesWithGvt");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/paygvtfee/on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable paying platform fees with GVT
     * @function WalletApi#enablePayFeesWithGvt
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      enablePayFeesWithGvt(authorization) {
      return this.enablePayFeesWithGvtWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getGMCommissionDataWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getGMCommissionData");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserCommissionData;

      return this.apiClient.callApi(
        '/v1.0/wallet/fee/gvtholding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * GenesisMarkets commission data
     * @function WalletApi#getGMCommissionData
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<UserCommissionData>} a Promise, with an object containing data of type UserCommissionData and HTTP response
     */
      getGMCommissionData(authorization) {
      return this.getGMCommissionDataWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getMultiWalletTransactionsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMultiWalletTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'Currency': opts['currency'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MultiWalletTransactionsViewModel;

      return this.apiClient.callApi(
        '/v1.0/wallet/multi/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Multi wallet transactions
     * @function WalletApi#getMultiWalletTransactions
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.type] 
     * @param {String} [opts.currency] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<MultiWalletTransactionsViewModel>} a Promise, with an object containing data of type MultiWalletTransactionsViewModel and HTTP response
     */
      getMultiWalletTransactions(authorization, opts) {
      return this.getMultiWalletTransactionsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getTransactionDetailsWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTransactionDetails");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTransactionDetails");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TransactionDetails;

      return this.apiClient.callApi(
        '/v1.0/wallet/transaction/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transaction details
     * @function WalletApi#getTransactionDetails
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<TransactionDetails>} a Promise, with an object containing data of type TransactionDetails and HTTP response
     */
      getTransactionDetails(id, authorization) {
      return this.getTransactionDetailsWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getUserWithdrawalSummaryWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getUserWithdrawalSummary");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WithdrawalSummary;

      return this.apiClient.callApi(
        '/v1.0/wallet/withdraw/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @function WalletApi#getUserWithdrawalSummary
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<WithdrawalSummary>} a Promise, with an object containing data of type WithdrawalSummary and HTTP response
     */
      getUserWithdrawalSummary(authorization) {
      return this.getUserWithdrawalSummaryWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getWalletExternalTransactionsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWalletExternalTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'Currency': opts['currency'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = MultiWalletExternalTransactionsViewModel;

      return this.apiClient.callApi(
        '/v1.0/wallet/multi/transactions/external', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Wallet pending transactions
     * @function WalletApi#getWalletExternalTransactions
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.type] 
     * @param {String} [opts.currency] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<MultiWalletExternalTransactionsViewModel>} a Promise, with an object containing data of type MultiWalletExternalTransactionsViewModel and HTTP response
     */
      getWalletExternalTransactions(authorization, opts) {
      return this.getWalletExternalTransactionsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getWalletMultiAvailableWithHttpInfo(currency, authorization) {
      let postBody = null;

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getWalletMultiAvailable");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWalletMultiAvailable");
      }


      let pathParams = {
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletMultiAvailable;

      return this.apiClient.callApi(
        '/v1.0/wallet/multi/{currency}/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Multi wallet available
     * @function WalletApi#getWalletMultiAvailable
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<WalletMultiAvailable>} a Promise, with an object containing data of type WalletMultiAvailable and HTTP response
     */
      getWalletMultiAvailable(currency, authorization) {
      return this.getWalletMultiAvailableWithHttpInfo(currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getWalletMultiSummaryWithHttpInfo(currency, authorization) {
      let postBody = null;

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getWalletMultiSummary");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWalletMultiSummary");
      }


      let pathParams = {
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletMultiSummary;

      return this.apiClient.callApi(
        '/v1.0/wallet/multi/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Multi wallet summary
     * @function WalletApi#getWalletMultiSummary
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<WalletMultiSummary>} a Promise, with an object containing data of type WalletMultiSummary and HTTP response
     */
      getWalletMultiSummary(currency, authorization) {
      return this.getWalletMultiSummaryWithHttpInfo(currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      internalTransferWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling internalTransfer");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Transfer money
     * @function WalletApi#internalTransfer
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {InternalTransferRequest} [opts.request] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      internalTransfer(authorization, opts) {
      return this.internalTransferWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      resendWithdrawalRequestEmailWithHttpInfo(txId, authorization) {
      let postBody = null;

      // verify the required parameter 'txId' is set
      if (txId === undefined || txId === null) {
        throw new Error("Missing the required parameter 'txId' when calling resendWithdrawalRequestEmail");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling resendWithdrawalRequestEmail");
      }


      let pathParams = {
        'txId': txId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/wallet/withdraw/request/resend/{txId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @function WalletApi#resendWithdrawalRequestEmail
     * @param {String} txId 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      resendWithdrawalRequestEmail(txId, authorization) {
      return this.resendWithdrawalRequestEmailWithHttpInfo(txId, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      updateDepositWalletsWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateDepositWallets");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletDepositSummary;

      return this.apiClient.callApi(
        '/v1.0/wallet/deposit/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update deposit wallets
     * @function WalletApi#updateDepositWallets
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<WalletDepositSummary>} a Promise, with an object containing data of type WalletDepositSummary and HTTP response
     */
      updateDepositWallets(authorization) {
      return this.updateDepositWalletsWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
