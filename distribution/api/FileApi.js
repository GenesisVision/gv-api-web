'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v1.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * OpenAPI spec version: v1.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _UploadResult = require('../model/UploadResult');

var _UploadResult2 = _interopRequireDefault(_UploadResult);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* File service.
* @module api/FileApi
* @version v1.0
*/
var FileApi = function () {

  /**
  * Constructs a new FileApi. 
  * @alias module:api/FileApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function FileApi(apiClient) {
    _classCallCheck(this, FileApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Download file
   * @param {String} id 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(FileApi, [{
    key: 'getWithHttpInfo',
    value: function getWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling get");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/file/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Download file
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'get',
    value: function get(id) {
      return this.getWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload document
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResult} and HTTP response
     */

  }, {
    key: 'uploadDocumentWithHttpInfo',
    value: function uploadDocumentWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling uploadDocument");
      }

      var pathParams = {};
      var queryParams = {
        'ContentType': opts['contentType'],
        'ContentDisposition': opts['contentDisposition'],
        'Headers': opts['headers'],
        'Length': opts['length'],
        'Name': opts['name'],
        'FileName': opts['fileName']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _UploadResult2.default;

      return this.apiClient.callApi('/v1.0/file/document/upload', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Upload document
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResult}
     */

  }, {
    key: 'uploadDocument',
    value: function uploadDocument(authorization, opts) {
      return this.uploadDocumentWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload file
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResult} and HTTP response
     */

  }, {
    key: 'uploadFileWithHttpInfo',
    value: function uploadFileWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'ContentType': opts['contentType'],
        'ContentDisposition': opts['contentDisposition'],
        'Headers': opts['headers'],
        'Length': opts['length'],
        'Name': opts['name'],
        'FileName': opts['fileName']
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _UploadResult2.default;

      return this.apiClient.callApi('/v1.0/file/upload', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Upload file
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResult}
     */

  }, {
    key: 'uploadFile',
    value: function uploadFile(opts) {
      return this.uploadFileWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return FileApi;
}();

exports.default = FileApi;