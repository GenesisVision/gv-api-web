/**
 * Core API v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import ProgramChart from '../model/ProgramChart';
import ProgramDetailsFull from '../model/ProgramDetailsFull';
import ProgramsFilter from '../model/ProgramsFilter';
import ProgramsList from '../model/ProgramsList';
import TradesViewModel from '../model/TradesViewModel';

/**
* Program service.
* @module api/ProgramApi
* @version v2.0
*/
export default class ProgramApi {

    /**
    * Constructs a new ProgramApi. 
    * @alias module:api/ProgramApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Program details (authorized)
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramDetailsFull} and HTTP response
     */
    apiProgramAuthDetailsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiProgramAuthDetailsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramDetailsFull;

      return this.apiClient.callApi(
        '/api/program/auth/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program details (authorized)
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramDetailsFull}
     */
    apiProgramAuthDetailsPost(authorization, opts) {
      return this.apiProgramAuthDetailsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Programs list (authorized)
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramsList} and HTTP response
     */
    apiProgramAuthListPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiProgramAuthListPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsList;

      return this.apiClient.callApi(
        '/api/program/auth/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs list (authorized)
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramsList}
     */
    apiProgramAuthListPost(authorization, opts) {
      return this.apiProgramAuthListPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timeFrame 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramChart} and HTTP response
     */
    apiProgramDetailsChartGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'TimeFrame': opts['timeFrame']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramChart;

      return this.apiClient.callApi(
        '/api/program/details/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timeFrame 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramChart}
     */
    apiProgramDetailsChartGet(opts) {
      return this.apiProgramDetailsChartGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Program details
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramDetailsFull} and HTTP response
     */
    apiProgramDetailsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramDetailsFull;

      return this.apiClient.callApi(
        '/api/program/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program details
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramDetailsFull}
     */
    apiProgramDetailsPost(opts) {
      return this.apiProgramDetailsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesViewModel} and HTTP response
     */
    apiProgramDetailsTradesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'InvestmentProgramId': opts['investmentProgramId'],
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'Symbol': opts['symbol'],
        'Sorting': opts['sorting'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/api/program/details/trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesViewModel}
     */
    apiProgramDetailsTradesGet(opts) {
      return this.apiProgramDetailsTradesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Programs list
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramsList} and HTTP response
     */
    apiProgramListPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsList;

      return this.apiClient.callApi(
        '/api/program/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs list
     * @param {Object} opts Optional parameters
     * @param {module:model/ProgramsFilter} opts.filter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramsList}
     */
    apiProgramListPost(opts) {
      return this.apiProgramListPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
