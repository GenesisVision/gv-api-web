/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import UploadResult from '../model/UploadResult';

/**
* File service.
* @module api/FileApi
* @version v1.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Download file
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10FileByIdGetWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10FileByIdGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/file/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download file
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10FileByIdGet(id) {
      return this.v10FileByIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload file
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResult} and HTTP response
     */
    v10FileUploadPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'ContentType': opts['contentType'],
        'ContentDisposition': opts['contentDisposition'],
        'Headers': opts['headers'],
        'Length': opts['length'],
        'Name': opts['name'],
        'FileName': opts['fileName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UploadResult;

      return this.apiClient.callApi(
        '/v1.0/file/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload file
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @param {String} opts.contentDisposition 
     * @param {Object.<String, {String: String}>} opts.headers 
     * @param {Number} opts.length 
     * @param {String} opts.name 
     * @param {String} opts.fileName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResult}
     */
    v10FileUploadPost(opts) {
      return this.v10FileUploadPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
