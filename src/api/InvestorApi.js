/**
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ErrorViewModel from '../model/ErrorViewModel';
import ForgotPasswordViewModel from '../model/ForgotPasswordViewModel';
import Invest from '../model/Invest';
import InvestmentProgramBuyToken from '../model/InvestmentProgramBuyToken';
import InvestmentProgramRequests from '../model/InvestmentProgramRequests';
import InvestmentProgramRequestsFilter from '../model/InvestmentProgramRequestsFilter';
import InvestmentProgramViewModel from '../model/InvestmentProgramViewModel';
import InvestmentProgramsFilter from '../model/InvestmentProgramsFilter';
import InvestmentProgramsViewModel from '../model/InvestmentProgramsViewModel';
import InvestorDashboard from '../model/InvestorDashboard';
import LoginViewModel from '../model/LoginViewModel';
import OpenTradesViewModel from '../model/OpenTradesViewModel';
import PasswordModel from '../model/PasswordModel';
import ProfileFullViewModel from '../model/ProfileFullViewModel';
import ProfilePublicViewModel from '../model/ProfilePublicViewModel';
import RecoveryCodesViewModel from '../model/RecoveryCodesViewModel';
import RegisterInvestorViewModel from '../model/RegisterInvestorViewModel';
import ResetPasswordViewModel from '../model/ResetPasswordViewModel';
import TradesChartViewModel from '../model/TradesChartViewModel';
import TradesFilter from '../model/TradesFilter';
import TradesViewModel from '../model/TradesViewModel';
import TransactionsFilter from '../model/TransactionsFilter';
import TwoFactorAuthenticator from '../model/TwoFactorAuthenticator';
import TwoFactorAuthenticatorConfirm from '../model/TwoFactorAuthenticatorConfirm';
import TwoFactorStatus from '../model/TwoFactorStatus';
import UpdateProfileViewModel from '../model/UpdateProfileViewModel';
import WalletAddressViewModel from '../model/WalletAddressViewModel';
import WalletInvestmentPrograms from '../model/WalletInvestmentPrograms';
import WalletStatistic from '../model/WalletStatistic';
import WalletStatisticFilter from '../model/WalletStatisticFilter';
import WalletTransactionsViewModel from '../model/WalletTransactionsViewModel';
import WalletWithdrawRequestModel from '../model/WalletWithdrawRequestModel';
import WalletsViewModel from '../model/WalletsViewModel';

/**
* Investor service.
* @module api/InvestorApi
* @version v1
*/
export default class InvestorApi {

    /**
    * Constructs a new InvestorApi. 
    * @alias module:api/InvestorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiInvestorAuth2faConfirmPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA confirm
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiInvestorAuth2faConfirmPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faConfirmPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faCreatePost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorAuthenticator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorAuthenticator}
     */
    apiInvestorAuth2faCreatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorAuthenticator;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faDisablePost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorAuth2faDisablePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faDisablePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faGet operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorAuth2faGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorStatus}
     */
    apiInvestorAuth2faGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorStatus;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faRecoveryCodesNewPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiInvestorAuth2faRecoveryCodesNewPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa/recoveryCodes/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuth2faRecoveryCodesPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuth2faRecoveryCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiInvestorAuth2faRecoveryCodesPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuth2faRecoveryCodesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/investor/auth/2fa/recoveryCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthChangePasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorAuthChangePasswordPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthChangePasswordPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthConfirmEmailPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthConfirmEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/InvestorApi~apiInvestorAuthConfirmEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiInvestorAuthConfirmEmailPost(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/investor/auth/confirmEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthForgotPasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password investor
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorAuthForgotPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/auth/forgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthResetPasswordPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiInvestorAuthResetPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/investor/auth/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthSignInPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiInvestorAuthSignInPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/investor/auth/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthSignUpPost operation.
     * @callback module:api/InvestorApi~apiInvestorAuthSignUpPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new investor
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterInvestorViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorAuthSignUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorAuthSignUpPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/auth/signUp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorAuthUpdateTokenGet operation.
     * @callback module:api/InvestorApi~apiInvestorAuthUpdateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorAuthUpdateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiInvestorAuthUpdateTokenGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorAuthUpdateTokenGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/investor/auth/updateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorDashboardGet operation.
     * @callback module:api/InvestorApi~apiInvestorDashboardGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorDashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investor dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Number} opts.equityChartLength 
     * @param {module:api/InvestorApi~apiInvestorDashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorDashboard}
     */
    apiInvestorDashboardGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorDashboardGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'EquityChartLength': opts['equityChartLength']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestorDashboard;

      return this.apiClient.callApi(
        '/api/investor/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramBuyTokensGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramBuyTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramBuyToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramBuyTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramBuyToken}
     */
    apiInvestorInvestmentProgramBuyTokensGet(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramBuyTokensGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramBuyToken;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/buyTokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramEquityChartGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramEquityChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramEquityChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */
    apiInvestorInvestmentProgramEquityChartGet(investmentProgramId, timeFrame, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramEquityChartGet");
      }

      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling apiInvestorInvestmentProgramEquityChartGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'timeFrame': timeFrame
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesChartViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/equity/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramViewModel}
     */
    apiInvestorInvestmentProgramGet(investmentProgramId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramOpenTradesPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramOpenTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenTradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager open trades
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramOpenTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenTradesViewModel}
     */
    apiInvestorInvestmentProgramOpenTradesPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramOpenTradesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = OpenTradesViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/openTrades', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramRequestsPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramRequests}
     */
    apiInvestorInvestmentProgramRequestsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramRequests;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramTradesChartGet operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramTradesChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramTradesChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */
    apiInvestorInvestmentProgramTradesChartGet(investmentProgramId, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramTradesChartGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'InvestmentProgramId': investmentProgramId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesChartViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/trades/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramTradesPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesViewModel}
     */
    apiInvestorInvestmentProgramTradesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentProgram/trades', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsCancelInvestmentRequestPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsCancelInvestmentRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsCancelInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorInvestmentProgramsCancelInvestmentRequestPost(requestId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsCancelInvestmentRequestPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'requestId': requestId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms/cancelInvestmentRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsFavoritesAddPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorInvestmentProgramsFavoritesAddPost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesAddPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms/favorites/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsFavoritesRemovePost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsFavoritesRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorInvestmentProgramsFavoritesRemovePost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsFavoritesRemovePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms/favorites/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsInvestPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsInvestPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invest in manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsInvestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */
    apiInvestorInvestmentProgramsInvestPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsInvestPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletsViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms/invest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramsViewModel}
     */
    apiInvestorInvestmentProgramsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramsViewModel;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorInvestmentProgramsWithdrawPost operation.
     * @callback module:api/InvestorApi~apiInvestorInvestmentProgramsWithdrawPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw from investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/InvestorApi~apiInvestorInvestmentProgramsWithdrawPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorInvestmentProgramsWithdrawPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorInvestmentProgramsWithdrawPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/investmentPrograms/withdraw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorProfileFullGet operation.
     * @callback module:api/InvestorApi~apiInvestorProfileFullGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileFullViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorProfileFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileFullViewModel}
     */
    apiInvestorProfileFullGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileFullGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProfileFullViewModel;

      return this.apiClient.callApi(
        '/api/investor/profile/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorProfilePublicGet operation.
     * @callback module:api/InvestorApi~apiInvestorProfilePublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePublicViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public profile
     * @param {String} userId 
     * @param {module:api/InvestorApi~apiInvestorProfilePublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePublicViewModel}
     */
    apiInvestorProfilePublicGet(userId, callback) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiInvestorProfilePublicGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProfilePublicViewModel;

      return this.apiClient.callApi(
        '/api/investor/profile/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorProfileUpdatePost operation.
     * @callback module:api/InvestorApi~apiInvestorProfileUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @param {module:api/InvestorApi~apiInvestorProfileUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorProfileUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorProfileUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/profile/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletAddressGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletAddressViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorWalletAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletAddressViewModel}
     */
    apiInvestorWalletAddressGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletAddressGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletAddressViewModel;

      return this.apiClient.callApi(
        '/api/investor/wallet/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @param {module:api/InvestorApi~apiInvestorWalletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */
    apiInvestorWalletGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletsViewModel;

      return this.apiClient.callApi(
        '/api/investor/wallet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletStatisticPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletStatisticPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorWalletStatisticPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletStatistic}
     */
    apiInvestorWalletStatisticPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletStatisticPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletStatistic;

      return this.apiClient.callApi(
        '/api/investor/wallet/statistic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletTransactionsInvestmentProgramsListGet operation.
     * @callback module:api/InvestorApi~apiInvestorWalletTransactionsInvestmentProgramsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @param {module:api/InvestorApi~apiInvestorWalletTransactionsInvestmentProgramsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletInvestmentPrograms}
     */
    apiInvestorWalletTransactionsInvestmentProgramsListGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsInvestmentProgramsListGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'mask': opts['mask']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletInvestmentPrograms;

      return this.apiClient.callApi(
        '/api/investor/wallet/transactions/investmentProgramsList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletTransactionsPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @param {module:api/InvestorApi~apiInvestorWalletTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionsViewModel}
     */
    apiInvestorWalletTransactionsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletTransactionsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletTransactionsViewModel;

      return this.apiClient.callApi(
        '/api/investor/wallet/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvestorWalletWithdrawRequestPost operation.
     * @callback module:api/InvestorApi~apiInvestorWalletWithdrawRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @param {module:api/InvestorApi~apiInvestorWalletWithdrawRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiInvestorWalletWithdrawRequestPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiInvestorWalletWithdrawRequestPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/investor/wallet/withdrawRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
