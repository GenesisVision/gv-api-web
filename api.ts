/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: string
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError";
    }
}

/**
 * 
 * @export
 * @interface AmountWithCurrency
 */
export interface AmountWithCurrency {
    /**
     * 
     * @type {number}
     * @memberof AmountWithCurrency
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof AmountWithCurrency
     */
    currency?: AmountWithCurrency.CurrencyEnum;
}

/**
 * @export
 * @namespace AmountWithCurrency
 */
export namespace AmountWithCurrency {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface AndroidAppVersion
 */
export interface AndroidAppVersion {
    /**
     * 
     * @type {AndroidVersion}
     * @memberof AndroidAppVersion
     */
    minVersion?: AndroidVersion;
    /**
     * 
     * @type {AndroidVersion}
     * @memberof AndroidAppVersion
     */
    lastVersion?: AndroidVersion;
}

/**
 * 
 * @export
 * @interface AndroidVersion
 */
export interface AndroidVersion {
    /**
     * 
     * @type {string}
     * @memberof AndroidVersion
     */
    versionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AndroidVersion
     */
    versionName?: string;
}

/**
 * 
 * @export
 * @interface AssetSelection
 */
export interface AssetSelection {
    /**
     * 
     * @type {string}
     * @memberof AssetSelection
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetSelection
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetSelection
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetSelection
     */
    type?: AssetSelection.TypeEnum;
}

/**
 * @export
 * @namespace AssetSelection
 */
export namespace AssetSelection {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface AssetsValue
 */
export interface AssetsValue {
    /**
     * 
     * @type {string}
     * @memberof AssetsValue
     */
    type?: AssetsValue.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AssetsValue
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetsValue
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetsValue
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetsValue
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetsValue
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetsValue
     */
    changePercent?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetsValue
     */
    changeValue?: number;
}

/**
 * @export
 * @namespace AssetsValue
 */
export namespace AssetsValue {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        All,
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface BalanceChartElement
 */
export interface BalanceChartElement {
    /**
     * 
     * @type {Date}
     * @memberof BalanceChartElement
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof BalanceChartElement
     */
    managerFunds?: number;
    /**
     * 
     * @type {number}
     * @memberof BalanceChartElement
     */
    investorsFunds?: number;
}

/**
 * 
 * @export
 * @interface BlockchainInfo
 */
export interface BlockchainInfo {
    /**
     * 
     * @type {string}
     * @memberof BlockchainInfo
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockchainInfo
     */
    status?: BlockchainInfo.StatusEnum;
}

/**
 * @export
 * @namespace BlockchainInfo
 */
export namespace BlockchainInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Undefined,
        New,
        Pending,
        ConfirmedByGate,
        ConfirmedAndValidated,
        PendingAddInWallet,
        Error,
        Cancelled
    }
}

/**
 * 
 * @export
 * @interface Broker
 */
export interface Broker {
    /**
     * 
     * @type {string}
     * @memberof Broker
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Broker
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Broker
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof Broker
     */
    terms?: string;
    /**
     * 
     * @type {string}
     * @memberof Broker
     */
    assets?: string;
    /**
     * 
     * @type {number}
     * @memberof Broker
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof Broker
     */
    leverageMin?: number;
    /**
     * 
     * @type {number}
     * @memberof Broker
     */
    leverageMax?: number;
    /**
     * 
     * @type {Array<BrokerAccountType>}
     * @memberof Broker
     */
    accountTypes?: Array<BrokerAccountType>;
}

/**
 * 
 * @export
 * @interface BrokerAccountType
 */
export interface BrokerAccountType {
    /**
     * 
     * @type {string}
     * @memberof BrokerAccountType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BrokerAccountType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BrokerAccountType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BrokerAccountType
     */
    type?: BrokerAccountType.TypeEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof BrokerAccountType
     */
    leverages?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BrokerAccountType
     */
    currencies?: Array<string>;
}

/**
 * @export
 * @namespace BrokerAccountType
 */
export namespace BrokerAccountType {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Undefined,
        MetaTrader4,
        MetaTrader5,
        NinjaTrader,
        CTrader,
        Rumus,
        Metastock,
        IDEX
    }
}

/**
 * 
 * @export
 * @interface BrokersInfo
 */
export interface BrokersInfo {
    /**
     * 
     * @type {Array<Broker>}
     * @memberof BrokersInfo
     */
    brokers?: Array<Broker>;
}

/**
 * 
 * @export
 * @interface ChangePasswordViewModel
 */
export interface ChangePasswordViewModel {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    oldPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordViewModel
     */
    confirmPassword?: string;
}

/**
 * 
 * @export
 * @interface ChartSimple
 */
export interface ChartSimple {
    /**
     * 
     * @type {number}
     * @memberof ChartSimple
     */
    value?: number;
    /**
     * 
     * @type {Date}
     * @memberof ChartSimple
     */
    date?: Date;
}

/**
 * 
 * @export
 * @interface CreateWithdrawalRequestModel
 */
export interface CreateWithdrawalRequestModel {
    /**
     * 
     * @type {number}
     * @memberof CreateWithdrawalRequestModel
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    currency?: CreateWithdrawalRequestModel.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWithdrawalRequestModel
     */
    twoFactorCode?: string;
}

/**
 * @export
 * @namespace CreateWithdrawalRequestModel
 */
export namespace CreateWithdrawalRequestModel {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface DashboardChartValue
 */
export interface DashboardChartValue {
    /**
     * 
     * @type {Array<ValueChartBar>}
     * @memberof DashboardChartValue
     */
    investedProgramsInfo?: Array<ValueChartBar>;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof DashboardChartValue
     */
    balanceChart?: Array<ChartSimple>;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    valueCurrency?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    changePercent?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    changeValue?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    changeValueCurrency?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardChartValue
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface DashboardPortfolioEvent
 */
export interface DashboardPortfolioEvent {
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    assetId?: string;
    /**
     * 
     * @type {Date}
     * @memberof DashboardPortfolioEvent
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardPortfolioEvent
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    currency?: DashboardPortfolioEvent.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    type?: DashboardPortfolioEvent.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardPortfolioEvent
     */
    assetType?: DashboardPortfolioEvent.AssetTypeEnum;
}

/**
 * @export
 * @namespace DashboardPortfolioEvent
 */
export namespace DashboardPortfolioEvent {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        All,
        Invest,
        Withdraw,
        Profit,
        Loss,
        Reinvest,
        Cancelled,
        Ended
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AssetTypeEnum {
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface DashboardPortfolioEvents
 */
export interface DashboardPortfolioEvents {
    /**
     * 
     * @type {Array<DashboardPortfolioEvent>}
     * @memberof DashboardPortfolioEvents
     */
    events?: Array<DashboardPortfolioEvent>;
    /**
     * 
     * @type {number}
     * @memberof DashboardPortfolioEvents
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface DashboardProgramDetails
 */
export interface DashboardProgramDetails {
    /**
     * 
     * @type {number}
     * @memberof DashboardProgramDetails
     */
    share?: number;
}

/**
 * 
 * @export
 * @interface DashboardSummary
 */
export interface DashboardSummary {
    /**
     * 
     * @type {DashboardChartValue}
     * @memberof DashboardSummary
     */
    chart?: DashboardChartValue;
    /**
     * 
     * @type {DashboardPortfolioEvents}
     * @memberof DashboardSummary
     */
    events?: DashboardPortfolioEvents;
    /**
     * 
     * @type {ProfileHeaderViewModel}
     * @memberof DashboardSummary
     */
    profileHeader?: ProfileHeaderViewModel;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummary
     */
    programsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummary
     */
    fundsCount?: number;
    /**
     * 
     * @type {ProgramRequests}
     * @memberof DashboardSummary
     */
    requests?: ProgramRequests;
}

/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    property?: string;
}

/**
 * 
 * @export
 * @interface ErrorViewModel
 */
export interface ErrorViewModel {
    /**
     * 
     * @type {Array<ErrorMessage>}
     * @memberof ErrorViewModel
     */
    errors?: Array<ErrorMessage>;
    /**
     * 
     * @type {string}
     * @memberof ErrorViewModel
     */
    code?: ErrorViewModel.CodeEnum;
}

/**
 * @export
 * @namespace ErrorViewModel
 */
export namespace ErrorViewModel {
    /**
     * @export
     * @enum {string}
     */
    export enum CodeEnum {
        InternalServerError,
        ValidationError,
        RequiresTwoFactor
    }
}

/**
 * 
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof Facet
     */
    sortType?: Facet.SortTypeEnum;
}

/**
 * @export
 * @namespace Facet
 */
export namespace Facet {
    /**
     * @export
     * @enum {string}
     */
    export enum SortTypeEnum {
        New,
        Top,
        WeeklyTop,
        Popular,
        ToLevelUp
    }
}

/**
 * 
 * @export
 * @interface ForgotPasswordViewModel
 */
export interface ForgotPasswordViewModel {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordViewModel
     */
    email: string;
}

/**
 * 
 * @export
 * @interface FundAssetInfo
 */
export interface FundAssetInfo {
    /**
     * 
     * @type {string}
     * @memberof FundAssetInfo
     */
    asset?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetInfo
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetInfo
     */
    icon?: string;
    /**
     * 
     * @type {number}
     * @memberof FundAssetInfo
     */
    target?: number;
    /**
     * 
     * @type {number}
     * @memberof FundAssetInfo
     */
    current?: number;
}

/**
 * 
 * @export
 * @interface FundAssetPart
 */
export interface FundAssetPart {
    /**
     * 
     * @type {string}
     * @memberof FundAssetPart
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof FundAssetPart
     */
    percent?: number;
}

/**
 * 
 * @export
 * @interface FundAssetPartWithIcon
 */
export interface FundAssetPartWithIcon {
    /**
     * 
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetPartWithIcon
     */
    asset?: string;
    /**
     * 
     * @type {number}
     * @memberof FundAssetPartWithIcon
     */
    percent?: number;
}

/**
 * 
 * @export
 * @interface FundAssetPercent
 */
export interface FundAssetPercent {
    /**
     * 
     * @type {string}
     * @memberof FundAssetPercent
     */
    asset?: string;
    /**
     * 
     * @type {string}
     * @memberof FundAssetPercent
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof FundAssetPercent
     */
    percent?: number;
    /**
     * 
     * @type {string}
     * @memberof FundAssetPercent
     */
    icon?: string;
}

/**
 * 
 * @export
 * @interface FundAssetsListInfo
 */
export interface FundAssetsListInfo {
    /**
     * 
     * @type {Array<FundAssetInfo>}
     * @memberof FundAssetsListInfo
     */
    assets?: Array<FundAssetInfo>;
}

/**
 * 
 * @export
 * @interface FundBalanceChart
 */
export interface FundBalanceChart {
    /**
     * 
     * @type {number}
     * @memberof FundBalanceChart
     */
    usdBalance?: number;
    /**
     * 
     * @type {Array<BalanceChartElement>}
     * @memberof FundBalanceChart
     */
    balanceChart?: Array<BalanceChartElement>;
    /**
     * 
     * @type {number}
     * @memberof FundBalanceChart
     */
    gvtBalance?: number;
}

/**
 * 
 * @export
 * @interface FundDetails
 */
export interface FundDetails {
    /**
     * 
     * @type {number}
     * @memberof FundDetails
     */
    totalAssetsCount?: number;
    /**
     * 
     * @type {Array<FundAssetPercent>}
     * @memberof FundDetails
     */
    topFundAssets?: Array<FundAssetPercent>;
    /**
     * 
     * @type {FundDetailsListStatistic}
     * @memberof FundDetails
     */
    statistic?: FundDetailsListStatistic;
    /**
     * Fields for authorized user
     * @type {PersonalFundDetailsFull}
     * @memberof FundDetails
     */
    personalDetails?: PersonalFundDetailsFull;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetails
     */
    status?: FundDetails.StatusEnum;
    /**
     * 
     * @type {ProfilePublic}
     * @memberof FundDetails
     */
    manager?: ProfilePublic;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof FundDetails
     */
    chart?: Array<ChartSimple>;
    /**
     * Fields for dashboard
     * @type {DashboardProgramDetails}
     * @memberof FundDetails
     */
    dashboardAssetsDetails?: DashboardProgramDetails;
}

/**
 * @export
 * @namespace FundDetails
 */
export namespace FundDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        None,
        Pending,
        ErrorCreating,
        Active,
        Closed,
        Archived,
        ClosedDueToInactivity
    }
}

/**
 * 
 * @export
 * @interface FundDetailsFull
 */
export interface FundDetailsFull {
    /**
     * 
     * @type {number}
     * @memberof FundDetailsFull
     */
    entryFee?: number;
    /**
     * 
     * @type {number}
     * @memberof FundDetailsFull
     */
    exitFee?: number;
    /**
     * 
     * @type {number}
     * @memberof FundDetailsFull
     */
    managementFee?: number;
    /**
     * 
     * @type {Array<FundAssetPartWithIcon>}
     * @memberof FundDetailsFull
     */
    currentAssets?: Array<FundAssetPartWithIcon>;
    /**
     * 
     * @type {FundStatistic}
     * @memberof FundDetailsFull
     */
    statistic?: FundStatistic;
    /**
     * Fields for authorized user
     * @type {PersonalFundDetailsFull}
     * @memberof FundDetailsFull
     */
    personalFundDetails?: PersonalFundDetailsFull;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    ipfsHash?: string;
    /**
     * 
     * @type {string}
     * @memberof FundDetailsFull
     */
    status?: FundDetailsFull.StatusEnum;
    /**
     * 
     * @type {ProfilePublic}
     * @memberof FundDetailsFull
     */
    manager?: ProfilePublic;
}

/**
 * @export
 * @namespace FundDetailsFull
 */
export namespace FundDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        None,
        Pending,
        ErrorCreating,
        Active,
        Closed,
        Archived,
        ClosedDueToInactivity
    }
}

/**
 * 
 * @export
 * @interface FundDetailsListStatistic
 */
export interface FundDetailsListStatistic {
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof FundDetailsListStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof FundDetailsListStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     * 
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    profitPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    drawdownPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof FundDetailsListStatistic
     */
    investorsCount?: number;
}

/**
 * 
 * @export
 * @interface FundInvestInfo
 */
export interface FundInvestInfo {
    /**
     * 
     * @type {string}
     * @memberof FundInvestInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof FundInvestInfo
     */
    availableInWallet?: number;
    /**
     * 
     * @type {number}
     * @memberof FundInvestInfo
     */
    minInvestmentAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof FundInvestInfo
     */
    entryFee?: number;
    /**
     * 
     * @type {number}
     * @memberof FundInvestInfo
     */
    gvCommission?: number;
    /**
     * 
     * @type {number}
     * @memberof FundInvestInfo
     */
    rate?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FundInvestInfo
     */
    isOwnProgram?: boolean;
}

/**
 * 
 * @export
 * @interface FundNotificationSettingList
 */
export interface FundNotificationSettingList {
    /**
     * 
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof FundNotificationSettingList
     */
    logo?: string;
    /**
     * 
     * @type {Array<NotificationSettingViewModel>}
     * @memberof FundNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}

/**
 * 
 * @export
 * @interface FundProfitChart
 */
export interface FundProfitChart {
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    totalUsdProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    timeframeUsdProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    rebalances?: number;
    /**
     * 
     * @type {Date}
     * @memberof FundProfitChart
     */
    creationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    profitPercent?: number;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof FundProfitChart
     */
    equityChart?: Array<ChartSimple>;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    balance?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    investors?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    profitChangePercent?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    sharpeRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    sortinoRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    calmarRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    maxDrawdown?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    totalGvtProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    timeframeGvtProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof FundProfitChart
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface FundStatistic
 */
export interface FundStatistic {
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof FundStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof FundStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    profitPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    drawdownPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    investorsCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof FundStatistic
     */
    startDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    startBalance?: number;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    investedAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof FundStatistic
     */
    rebalancingCount?: number;
}

/**
 * 
 * @export
 * @interface FundWithdrawInfo
 */
export interface FundWithdrawInfo {
    /**
     * 
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    exitFee?: number;
    /**
     * 
     * @type {string}
     * @memberof FundWithdrawInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     * 
     * @type {number}
     * @memberof FundWithdrawInfo
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface FundsList
 */
export interface FundsList {
    /**
     * 
     * @type {Array<FundDetails>}
     * @memberof FundsList
     */
    funds?: Array<FundDetails>;
    /**
     * 
     * @type {number}
     * @memberof FundsList
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface IOsAppVersion
 */
export interface IOsAppVersion {
    /**
     * 
     * @type {string}
     * @memberof IOsAppVersion
     */
    minVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof IOsAppVersion
     */
    lastVersion?: string;
}

/**
 * 
 * @export
 * @interface KycCallback
 */
export interface KycCallback {
    /**
     * 
     * @type {string}
     * @memberof KycCallback
     */
    applicantId?: string;
    /**
     * 
     * @type {string}
     * @memberof KycCallback
     */
    inspectionId?: string;
    /**
     * 
     * @type {string}
     * @memberof KycCallback
     */
    correlationId?: string;
    /**
     * 
     * @type {string}
     * @memberof KycCallback
     */
    externalUserId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KycCallback
     */
    success?: boolean;
    /**
     * 
     * @type {any}
     * @memberof KycCallback
     */
    details?: any;
    /**
     * 
     * @type {string}
     * @memberof KycCallback
     */
    type?: string;
    /**
     * 
     * @type {Review}
     * @memberof KycCallback
     */
    review?: Review;
}

/**
 * 
 * @export
 * @interface LevelInfo
 */
export interface LevelInfo {
    /**
     * 
     * @type {number}
     * @memberof LevelInfo
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof LevelInfo
     */
    investmentLimit?: number;
}

/**
 * 
 * @export
 * @interface LevelUpData
 */
export interface LevelUpData {
    /**
     * 
     * @type {number}
     * @memberof LevelUpData
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof LevelUpData
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof LevelUpData
     */
    totalOwn?: number;
    /**
     * 
     * @type {number}
     * @memberof LevelUpData
     */
    quota?: number;
    /**
     * 
     * @type {number}
     * @memberof LevelUpData
     */
    targetProfit?: number;
}

/**
 * 
 * @export
 * @interface LevelUpSummary
 */
export interface LevelUpSummary {
    /**
     * 
     * @type {Array<LevelUpData>}
     * @memberof LevelUpSummary
     */
    levelData?: Array<LevelUpData>;
}

/**
 * 
 * @export
 * @interface LoginViewModel
 */
export interface LoginViewModel {
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginViewModel
     */
    rememberMe?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    twoFactorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    recoveryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    client?: string;
}

/**
 * 
 * @export
 * @interface ManagerAssets
 */
export interface ManagerAssets {
    /**
     * 
     * @type {Array<ManagerSimpleProgram>}
     * @memberof ManagerAssets
     */
    programs?: Array<ManagerSimpleProgram>;
    /**
     * 
     * @type {Array<ManagerSimpleFund>}
     * @memberof ManagerAssets
     */
    funds?: Array<ManagerSimpleFund>;
}

/**
 * 
 * @export
 * @interface ManagerDashboard
 */
export interface ManagerDashboard {
    /**
     * 
     * @type {ManagerProfileDetails}
     * @memberof ManagerDashboard
     */
    profile?: ManagerProfileDetails;
    /**
     * 
     * @type {ProgramRequest}
     * @memberof ManagerDashboard
     */
    requests?: ProgramRequest;
    /**
     * 
     * @type {ManagerPortfolioEvents}
     * @memberof ManagerDashboard
     */
    events?: ManagerPortfolioEvents;
    /**
     * 
     * @type {Array<AssetSelection>}
     * @memberof ManagerDashboard
     */
    allAssets?: Array<AssetSelection>;
    /**
     * One of the charts will be null
     * @type {ProgramProfitChart}
     * @memberof ManagerDashboard
     */
    programChart?: ProgramProfitChart;
    /**
     * 
     * @type {FundProfitChart}
     * @memberof ManagerDashboard
     */
    fundChart?: FundProfitChart;
}

/**
 * 
 * @export
 * @interface ManagerFundWithdrawInfo
 */
export interface ManagerFundWithdrawInfo {
    /**
     * 
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    withheldInvestment?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    exitFee?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagerFundWithdrawInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerFundWithdrawInfo
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface ManagerNotificationSettingList
 */
export interface ManagerNotificationSettingList {
    /**
     * 
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    managerId?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerNotificationSettingList
     */
    about?: string;
    /**
     * 
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ManagerNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}

/**
 * 
 * @export
 * @interface ManagerOverview
 */
export interface ManagerOverview {
}

/**
 * 
 * @export
 * @interface ManagerPortfolioEvent
 */
export interface ManagerPortfolioEvent {
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    assetId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ManagerPortfolioEvent
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    feeValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    profitPercent?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    currency?: ManagerPortfolioEvent.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    type?: ManagerPortfolioEvent.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    programType?: ManagerPortfolioEvent.ProgramTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerPortfolioEvent
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagerPortfolioEvent
     */
    periodNumber?: number;
}

/**
 * @export
 * @namespace ManagerPortfolioEvent
 */
export namespace ManagerPortfolioEvent {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        All,
        AssetStarted,
        ProgramPeriodStats,
        ProgramPeriodEnds,
        InvestorInvest,
        InvestorWithdraw,
        ManagerInvest,
        ManagerWithdraw,
        AssetFinished,
        EntranceFee,
        ExitFee
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ProgramTypeEnum {
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface ManagerPortfolioEvents
 */
export interface ManagerPortfolioEvents {
    /**
     * 
     * @type {Array<ManagerPortfolioEvent>}
     * @memberof ManagerPortfolioEvents
     */
    events?: Array<ManagerPortfolioEvent>;
    /**
     * 
     * @type {number}
     * @memberof ManagerPortfolioEvents
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface ManagerProfile
 */
export interface ManagerProfile {
    /**
     * 
     * @type {string}
     * @memberof ManagerProfile
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerProfile
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerProfile
     */
    about?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerProfile
     */
    avatar?: string;
    /**
     * 
     * @type {Date}
     * @memberof ManagerProfile
     */
    regDate?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ManagerProfile
     */
    assets?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ManagerProfile
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface ManagerProfileDetails
 */
export interface ManagerProfileDetails {
    /**
     * 
     * @type {ManagerProfile}
     * @memberof ManagerProfileDetails
     */
    managerProfile?: ManagerProfile;
    /**
     * 
     * @type {ManagerOverview}
     * @memberof ManagerProfileDetails
     */
    overview?: ManagerOverview;
    /**
     * 
     * @type {number}
     * @memberof ManagerProfileDetails
     */
    programsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerProfileDetails
     */
    fundsCount?: number;
}

/**
 * 
 * @export
 * @interface ManagerProgramWithdrawInfo
 */
export interface ManagerProgramWithdrawInfo {
    /**
     * 
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    withheldInvestment?: number;
    /**
     * 
     * @type {Date}
     * @memberof ManagerProgramWithdrawInfo
     */
    periodEnds?: Date;
    /**
     * 
     * @type {string}
     * @memberof ManagerProgramWithdrawInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     * 
     * @type {number}
     * @memberof ManagerProgramWithdrawInfo
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface ManagerSimpleFund
 */
export interface ManagerSimpleFund {
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleFund
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface ManagerSimpleProgram
 */
export interface ManagerSimpleProgram {
    /**
     * 
     * @type {number}
     * @memberof ManagerSimpleProgram
     */
    level?: number;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerSimpleProgram
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface ManagersList
 */
export interface ManagersList {
    /**
     * 
     * @type {Array<ManagerProfile>}
     * @memberof ManagersList
     */
    managers?: Array<ManagerProfile>;
    /**
     * 
     * @type {number}
     * @memberof ManagersList
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface NewFundRequest
 */
export interface NewFundRequest {
    /**
     * 
     * @type {number}
     * @memberof NewFundRequest
     */
    exitFee?: number;
    /**
     * 
     * @type {number}
     * @memberof NewFundRequest
     */
    managementFee?: number;
    /**
     * 
     * @type {Array<FundAssetPart>}
     * @memberof NewFundRequest
     */
    assets?: Array<FundAssetPart>;
    /**
     * 
     * @type {string}
     * @memberof NewFundRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFundRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFundRequest
     */
    logo?: string;
    /**
     * 
     * @type {number}
     * @memberof NewFundRequest
     */
    entryFee?: number;
}

/**
 * 
 * @export
 * @interface NewProgramRequest
 */
export interface NewProgramRequest {
    /**
     * 
     * @type {string}
     * @memberof NewProgramRequest
     */
    currency?: NewProgramRequest.CurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof NewProgramRequest
     */
    periodLength?: number;
    /**
     * 
     * @type {number}
     * @memberof NewProgramRequest
     */
    successFee?: number;
    /**
     * 
     * @type {number}
     * @memberof NewProgramRequest
     */
    stopOutLevel?: number;
    /**
     * 
     * @type {number}
     * @memberof NewProgramRequest
     */
    leverage?: number;
    /**
     * 
     * @type {string}
     * @memberof NewProgramRequest
     */
    brokerAccountTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProgramRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProgramRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProgramRequest
     */
    logo?: string;
    /**
     * 
     * @type {number}
     * @memberof NewProgramRequest
     */
    entryFee?: number;
}

/**
 * @export
 * @namespace NewProgramRequest
 */
export namespace NewProgramRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface NotificationList
 */
export interface NotificationList {
    /**
     * 
     * @type {Array<NotificationViewModel>}
     * @memberof NotificationList
     */
    notifications?: Array<NotificationViewModel>;
    /**
     * 
     * @type {number}
     * @memberof NotificationList
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface NotificationSettingList
 */
export interface NotificationSettingList {
    /**
     * 
     * @type {Array<NotificationSettingViewModel>}
     * @memberof NotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
    /**
     * 
     * @type {Array<ProgramNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsProgram?: Array<ProgramNotificationSettingList>;
    /**
     * 
     * @type {Array<FundNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsFund?: Array<FundNotificationSettingList>;
    /**
     * 
     * @type {Array<ManagerNotificationSettingList>}
     * @memberof NotificationSettingList
     */
    settingsManager?: Array<ManagerNotificationSettingList>;
}

/**
 * 
 * @export
 * @interface NotificationSettingViewModel
 */
export interface NotificationSettingViewModel {
    /**
     * 
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSettingViewModel
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    managerId?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    type?: NotificationSettingViewModel.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationSettingViewModel
     */
    conditionType?: NotificationSettingViewModel.ConditionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof NotificationSettingViewModel
     */
    conditionAmount?: number;
}

/**
 * @export
 * @namespace NotificationSettingViewModel
 */
export namespace NotificationSettingViewModel {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        PlatformNewsAndUpdates,
        PlatformEmergency,
        PlatformOther,
        ProfileUpdated,
        ProfilePwdUpdated,
        ProfileVerification,
        Profile2FA,
        ProfileSecurity,
        ProgramNewsAndUpdates,
        ProgramEndOfPeriod,
        ProgramCondition,
        FundNewsAndUpdates,
        FundEndOfPeriod,
        FundRebalancing,
        ManagerNewProgram
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ConditionTypeEnum {
        Empty,
        Profit,
        Level
    }
}

/**
 * 
 * @export
 * @interface NotificationViewModel
 */
export interface NotificationViewModel {
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    text?: string;
    /**
     * 
     * @type {Date}
     * @memberof NotificationViewModel
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    type?: NotificationViewModel.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    managerId?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    url?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationViewModel
     */
    isUnread?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationViewModel
     */
    assetType?: NotificationViewModel.AssetTypeEnum;
}

/**
 * @export
 * @namespace NotificationViewModel
 */
export namespace NotificationViewModel {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        PlatformNewsAndUpdates,
        PlatformEmergency,
        PlatformOther,
        ProfileUpdated,
        ProfilePwdUpdated,
        ProfileVerification,
        Profile2FA,
        ProfileSecurity,
        ProgramNewsAndUpdates,
        ProgramEndOfPeriod,
        ProgramCondition,
        FundNewsAndUpdates,
        FundEndOfPeriod,
        FundRebalancing,
        ManagerNewProgram
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AssetTypeEnum {
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface OrderModel
 */
export interface OrderModel {
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    ticket?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    symbol?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderModel
     */
    volume?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderModel
     */
    profit?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    direction?: OrderModel.DirectionEnum;
    /**
     * 
     * @type {Date}
     * @memberof OrderModel
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrderModel
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderModel
     */
    entry?: OrderModel.EntryEnum;
}

/**
 * @export
 * @namespace OrderModel
 */
export namespace OrderModel {
    /**
     * @export
     * @enum {string}
     */
    export enum DirectionEnum {
        Buy,
        Sell,
        Balance,
        Credit,
        Undefined
    }
    /**
     * @export
     * @enum {string}
     */
    export enum EntryEnum {
        In,
        Out,
        InOut,
        OutBy
    }
}

/**
 * 
 * @export
 * @interface OtherAssetsValue
 */
export interface OtherAssetsValue {
    /**
     * 
     * @type {number}
     * @memberof OtherAssetsValue
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof OtherAssetsValue
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof OtherAssetsValue
     */
    changePercent?: number;
    /**
     * 
     * @type {number}
     * @memberof OtherAssetsValue
     */
    changeValue?: number;
}

/**
 * 
 * @export
 * @interface PasswordModel
 */
export interface PasswordModel {
    /**
     * 
     * @type {string}
     * @memberof PasswordModel
     */
    password: string;
}

/**
 * 
 * @export
 * @interface PeriodDate
 */
export interface PeriodDate {
    /**
     * 
     * @type {Date}
     * @memberof PeriodDate
     */
    dateFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PeriodDate
     */
    dateTo?: Date;
}

/**
 * 
 * @export
 * @interface PersonalFundDetailsFull
 */
export interface PersonalFundDetailsFull {
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    withdrawPercent?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canReallocate?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PersonalFundDetailsFull
     */
    possibleReallocationTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isInvested?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isOwnProgram?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canCloseProgram?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    isFinishing?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canInvest?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canWithdraw?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    canClosePeriod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalFundDetailsFull
     */
    hasNotifications?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    profit?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    invested?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    pendingInput?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalFundDetailsFull
     */
    pendingOutput?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonalFundDetailsFull
     */
    status?: PersonalFundDetailsFull.StatusEnum;
}

/**
 * @export
 * @namespace PersonalFundDetailsFull
 */
export namespace PersonalFundDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Pending,
        Active,
        Investing,
        Withdrawing,
        Ended
    }
}

/**
 * 
 * @export
 * @interface PersonalProgramDetailsFull
 */
export interface PersonalProgramDetailsFull {
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isReinvest?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    gvtValue?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isFavorite?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isInvested?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isOwnProgram?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canCloseProgram?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    isFinishing?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canInvest?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canWithdraw?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    canClosePeriod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalProgramDetailsFull
     */
    hasNotifications?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    profit?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    invested?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    pendingInput?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalProgramDetailsFull
     */
    pendingOutput?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonalProgramDetailsFull
     */
    status?: PersonalProgramDetailsFull.StatusEnum;
}

/**
 * @export
 * @namespace PersonalProgramDetailsFull
 */
export namespace PersonalProgramDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Pending,
        Active,
        Investing,
        Withdrawing,
        Ended
    }
}

/**
 * 
 * @export
 * @interface PlatformAsset
 */
export interface PlatformAsset {
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    asset?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformAsset
     */
    color?: string;
}

/**
 * 
 * @export
 * @interface PlatformAssets
 */
export interface PlatformAssets {
    /**
     * 
     * @type {Array<PlatformAsset>}
     * @memberof PlatformAssets
     */
    assets?: Array<PlatformAsset>;
}

/**
 * 
 * @export
 * @interface PlatformCurrency
 */
export interface PlatformCurrency {
    /**
     * 
     * @type {string}
     * @memberof PlatformCurrency
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformCurrency
     */
    rateToGvt?: number;
}

/**
 * 
 * @export
 * @interface PlatformInfo
 */
export interface PlatformInfo {
    /**
     * 
     * @type {IOsAppVersion}
     * @memberof PlatformInfo
     */
    iOSVersion?: IOsAppVersion;
    /**
     * 
     * @type {AndroidAppVersion}
     * @memberof PlatformInfo
     */
    androidVersion?: AndroidAppVersion;
    /**
     * 
     * @type {Array<Facet>}
     * @memberof PlatformInfo
     */
    programsFacets?: Array<Facet>;
    /**
     * 
     * @type {Array<Facet>}
     * @memberof PlatformInfo
     */
    fundsFacets?: Array<Facet>;
    /**
     * 
     * @type {ProgramsInfo}
     * @memberof PlatformInfo
     */
    programsInfo?: ProgramsInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlatformInfo
     */
    currencies?: Array<string>;
    /**
     * 
     * @type {Array<PlatformCurrency>}
     * @memberof PlatformInfo
     */
    platformCurrencies?: Array<PlatformCurrency>;
}

/**
 * 
 * @export
 * @interface PlatformStatistic
 */
export interface PlatformStatistic {
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    managers?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    investors?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    profitWeek?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    investmentAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    totalInvestorsProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformStatistic
     */
    totalProfit?: number;
}

/**
 * 
 * @export
 * @interface ProfileFullViewModel
 */
export interface ProfileFullViewModel {
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    phone?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileFullViewModel
     */
    phoneNumberConfirmed?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof ProfileFullViewModel
     */
    birthday?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileFullViewModel
     */
    gender?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    about?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    citizenship?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    refUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileFullViewModel
     */
    verificationStatus?: ProfileFullViewModel.VerificationStatusEnum;
}

/**
 * @export
 * @namespace ProfileFullViewModel
 */
export namespace ProfileFullViewModel {
    /**
     * @export
     * @enum {string}
     */
    export enum VerificationStatusEnum {
        NotVerified,
        Verified,
        UnderReview,
        Rejected
    }
}

/**
 * 
 * @export
 * @interface ProfileHeaderViewModel
 */
export interface ProfileHeaderViewModel {
    /**
     * 
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileHeaderViewModel
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    notificationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    favoritesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    totalBalanceGvt?: number;
    /**
     * 
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    investedGvt?: number;
    /**
     * 
     * @type {number}
     * @memberof ProfileHeaderViewModel
     */
    availableGvt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    kycConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    isTwoFactorEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileHeaderViewModel
     */
    isNewUser?: boolean;
}

/**
 * 
 * @export
 * @interface ProfilePublic
 */
export interface ProfilePublic {
    /**
     * 
     * @type {string}
     * @memberof ProfilePublic
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePublic
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePublic
     */
    avatar?: string;
    /**
     * 
     * @type {Date}
     * @memberof ProfilePublic
     */
    registrationDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ProfilePublic
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface ProgramBalanceChart
 */
export interface ProgramBalanceChart {
    /**
     * 
     * @type {number}
     * @memberof ProgramBalanceChart
     */
    programCurrencyBalance?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramBalanceChart
     */
    programCurrency?: ProgramBalanceChart.ProgramCurrencyEnum;
    /**
     * 
     * @type {Array<ProgramBalanceChartElement>}
     * @memberof ProgramBalanceChart
     */
    balanceChart?: Array<ProgramBalanceChartElement>;
    /**
     * 
     * @type {number}
     * @memberof ProgramBalanceChart
     */
    gvtBalance?: number;
}

/**
 * @export
 * @namespace ProgramBalanceChart
 */
export namespace ProgramBalanceChart {
    /**
     * @export
     * @enum {string}
     */
    export enum ProgramCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface ProgramBalanceChartElement
 */
export interface ProgramBalanceChartElement {
    /**
     * 
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    profit?: number;
    /**
     * 
     * @type {Date}
     * @memberof ProgramBalanceChartElement
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    managerFunds?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramBalanceChartElement
     */
    investorsFunds?: number;
}

/**
 * 
 * @export
 * @interface ProgramDetails
 */
export interface ProgramDetails {
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    currency?: ProgramDetails.CurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetails
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetails
     */
    periodDuration?: number;
    /**
     * 
     * @type {Date}
     * @memberof ProgramDetails
     */
    periodStarts?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProgramDetails
     */
    periodEnds?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetails
     */
    availableInvestment?: number;
    /**
     * 
     * @type {ProgramDetailsListStatistic}
     * @memberof ProgramDetails
     */
    statistic?: ProgramDetailsListStatistic;
    /**
     * 
     * @type {ProgramDetailsRating}
     * @memberof ProgramDetails
     */
    rating?: ProgramDetailsRating;
    /**
     * Fields for authorized user
     * @type {PersonalProgramDetailsFull}
     * @memberof ProgramDetails
     */
    personalDetails?: PersonalProgramDetailsFull;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetails
     */
    status?: ProgramDetails.StatusEnum;
    /**
     * 
     * @type {ProfilePublic}
     * @memberof ProgramDetails
     */
    manager?: ProfilePublic;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof ProgramDetails
     */
    chart?: Array<ChartSimple>;
    /**
     * Fields for dashboard
     * @type {DashboardProgramDetails}
     * @memberof ProgramDetails
     */
    dashboardAssetsDetails?: DashboardProgramDetails;
}

/**
 * @export
 * @namespace ProgramDetails
 */
export namespace ProgramDetails {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        None,
        Pending,
        ErrorCreating,
        Active,
        Closed,
        Archived,
        ClosedDueToInactivity
    }
}

/**
 * 
 * @export
 * @interface ProgramDetailsFull
 */
export interface ProgramDetailsFull {
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    currency?: ProgramDetailsFull.CurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    periodDuration?: number;
    /**
     * 
     * @type {Date}
     * @memberof ProgramDetailsFull
     */
    periodStarts?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProgramDetailsFull
     */
    periodEnds?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    entryFee?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    successFee?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramDetailsFull
     */
    isReinvesting?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsFull
     */
    availableInvestment?: number;
    /**
     * 
     * @type {ProgramStatistic}
     * @memberof ProgramDetailsFull
     */
    statistic?: ProgramStatistic;
    /**
     * 
     * @type {ProgramDetailsRating}
     * @memberof ProgramDetailsFull
     */
    rating?: ProgramDetailsRating;
    /**
     * Fields for authorized user
     * @type {PersonalProgramDetailsFull}
     * @memberof ProgramDetailsFull
     */
    personalProgramDetails?: PersonalProgramDetailsFull;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    ipfsHash?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramDetailsFull
     */
    status?: ProgramDetailsFull.StatusEnum;
    /**
     * 
     * @type {ProfilePublic}
     * @memberof ProgramDetailsFull
     */
    manager?: ProfilePublic;
}

/**
 * @export
 * @namespace ProgramDetailsFull
 */
export namespace ProgramDetailsFull {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        None,
        Pending,
        ErrorCreating,
        Active,
        Closed,
        Archived,
        ClosedDueToInactivity
    }
}

/**
 * 
 * @export
 * @interface ProgramDetailsListStatistic
 */
export interface ProgramDetailsListStatistic {
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceBase?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramDetailsListStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    currentValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    profitPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    profitValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    drawdownPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    investorsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsListStatistic
     */
    tradesCount?: number;
}

/**
 * 
 * @export
 * @interface ProgramDetailsRating
 */
export interface ProgramDetailsRating {
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    rating?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    profit?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramDetailsRating
     */
    canLevelUp?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProgramDetailsRating
     */
    topPercent?: number;
}

/**
 * 
 * @export
 * @interface ProgramInfo
 */
export interface ProgramInfo {
    /**
     * 
     * @type {string}
     * @memberof ProgramInfo
     */
    title?: string;
}

/**
 * 
 * @export
 * @interface ProgramInvestInfo
 */
export interface ProgramInvestInfo {
    /**
     * 
     * @type {Date}
     * @memberof ProgramInvestInfo
     */
    periodEnds?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    availableToInvest?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramInvestInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    availableInWallet?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    minInvestmentAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    entryFee?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    gvCommission?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramInvestInfo
     */
    rate?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramInvestInfo
     */
    isOwnProgram?: boolean;
}

/**
 * 
 * @export
 * @interface ProgramNotificationSettingList
 */
export interface ProgramNotificationSettingList {
    /**
     * 
     * @type {number}
     * @memberof ProgramNotificationSettingList
     */
    level?: number;
    /**
     * 
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ProgramNotificationSettingList
     */
    settingsCustom?: Array<NotificationSettingViewModel>;
    /**
     * 
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramNotificationSettingList
     */
    logo?: string;
    /**
     * 
     * @type {Array<NotificationSettingViewModel>}
     * @memberof ProgramNotificationSettingList
     */
    settingsGeneral?: Array<NotificationSettingViewModel>;
}

/**
 * 
 * @export
 * @interface ProgramProfitChart
 */
export interface ProgramProfitChart {
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    totalProgramCurrencyProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    timeframeProgramCurrencyProfit?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramProfitChart
     */
    programCurrency?: ProgramProfitChart.ProgramCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    trades?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    successTradesPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    profitFactor?: number;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof ProgramProfitChart
     */
    pnLChart?: Array<ChartSimple>;
    /**
     * 
     * @type {Array<PeriodDate>}
     * @memberof ProgramProfitChart
     */
    periods?: Array<PeriodDate>;
    /**
     * 
     * @type {Date}
     * @memberof ProgramProfitChart
     */
    lastPeriodStarts?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProgramProfitChart
     */
    lastPeriodEnds?: Date;
    /**
     * 
     * @type {Array<ChartSimple>}
     * @memberof ProgramProfitChart
     */
    equityChart?: Array<ChartSimple>;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    balance?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    investors?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    profitChangePercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    sharpeRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    sortinoRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    calmarRatio?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    maxDrawdown?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    totalGvtProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    timeframeGvtProfit?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramProfitChart
     */
    rate?: number;
}

/**
 * @export
 * @namespace ProgramProfitChart
 */
export namespace ProgramProfitChart {
    /**
     * @export
     * @enum {string}
     */
    export enum ProgramCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface ProgramRequest
 */
export interface ProgramRequest {
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    programId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ProgramRequest
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequest
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequest
     */
    valueGvt?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequest
     */
    feeEntry?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequest
     */
    feeExit?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    currency?: ProgramRequest.CurrencyEnum;
    /**
     * Used only in fund withdraw request
     * @type {number}
     * @memberof ProgramRequest
     */
    fundWithdrawPercent?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    type?: ProgramRequest.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    status?: ProgramRequest.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    color?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramRequest
     */
    canCancelRequest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProgramRequest
     */
    programType?: ProgramRequest.ProgramTypeEnum;
}

/**
 * @export
 * @namespace ProgramRequest
 */
export namespace ProgramRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Invest,
        Withdrawal
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        New,
        Executed,
        Cancelled
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ProgramTypeEnum {
        Program,
        Fund
    }
}

/**
 * 
 * @export
 * @interface ProgramRequests
 */
export interface ProgramRequests {
    /**
     * 
     * @type {Array<ProgramRequest>}
     * @memberof ProgramRequests
     */
    requests?: Array<ProgramRequest>;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequests
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramRequests
     */
    totalValue?: number;
}

/**
 * 
 * @export
 * @interface ProgramSets
 */
export interface ProgramSets {
    /**
     * 
     * @type {Array<Facet>}
     * @memberof ProgramSets
     */
    sets?: Array<Facet>;
    /**
     * 
     * @type {number}
     * @memberof ProgramSets
     */
    favoritesCount?: number;
}

/**
 * 
 * @export
 * @interface ProgramStatistic
 */
export interface ProgramStatistic {
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceBase?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceGVT?: AmountWithCurrency;
    /**
     * 
     * @type {AmountWithCurrency}
     * @memberof ProgramStatistic
     */
    balanceSecondary?: AmountWithCurrency;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    currentValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    drawdownPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    investorsCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramStatistic
     */
    hasNotifications?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof ProgramStatistic
     */
    startDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    startBalance?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramStatistic
     */
    startCurrency?: ProgramStatistic.StartCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    investedAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgramStatistic
     */
    investedCurrency?: ProgramStatistic.InvestedCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    tradesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    tradesSuccessCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    profitFactorPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramStatistic
     */
    sharpeRatioPercent?: number;
}

/**
 * @export
 * @namespace ProgramStatistic
 */
export namespace ProgramStatistic {
    /**
     * @export
     * @enum {string}
     */
    export enum StartCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum InvestedCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface ProgramUpdate
 */
export interface ProgramUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProgramUpdate
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramUpdate
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramUpdate
     */
    logo?: string;
}

/**
 * 
 * @export
 * @interface ProgramWithdrawInfo
 */
export interface ProgramWithdrawInfo {
    /**
     * 
     * @type {Date}
     * @memberof ProgramWithdrawInfo
     */
    periodEnds?: Date;
    /**
     * 
     * @type {string}
     * @memberof ProgramWithdrawInfo
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof ProgramWithdrawInfo
     */
    availableToWithdraw?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramWithdrawInfo
     */
    rate?: number;
}

/**
 * 
 * @export
 * @interface ProgramsInfo
 */
export interface ProgramsInfo {
    /**
     * 
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerProgramInvestment?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxEntryFee?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxSuccessFee?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerFundInvestment?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgramsInfo
     */
    managerMaxExitFee?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProgramsInfo
     */
    periods?: Array<number>;
}

/**
 * 
 * @export
 * @interface ProgramsLevelsInfo
 */
export interface ProgramsLevelsInfo {
    /**
     * 
     * @type {Array<LevelInfo>}
     * @memberof ProgramsLevelsInfo
     */
    levels?: Array<LevelInfo>;
}

/**
 * 
 * @export
 * @interface ProgramsList
 */
export interface ProgramsList {
    /**
     * 
     * @type {Array<ProgramDetails>}
     * @memberof ProgramsList
     */
    programs?: Array<ProgramDetails>;
    /**
     * 
     * @type {number}
     * @memberof ProgramsList
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface RateItem
 */
export interface RateItem {
    /**
     * 
     * @type {string}
     * @memberof RateItem
     */
    currency?: RateItem.CurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof RateItem
     */
    rate?: number;
}

/**
 * @export
 * @namespace RateItem
 */
export namespace RateItem {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface RatesModel
 */
export interface RatesModel {
    /**
     * 
     * @type {RatesModelRates}
     * @memberof RatesModel
     */
    rates?: RatesModelRates;
}

/**
 * 
 * @export
 * @interface RatesModelRates
 */
export interface RatesModelRates {
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    undefined?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    GVT?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    ETH?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BTC?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    ADA?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    USDT?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    XRP?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BCH?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    LTC?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    DOGE?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    BNB?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    USD?: Array<RateItem>;
    /**
     * 
     * @type {Array<RateItem>}
     * @memberof RatesModelRates
     */
    EUR?: Array<RateItem>;
}

/**
 * 
 * @export
 * @interface RecoveryCode
 */
export interface RecoveryCode {
    /**
     * 
     * @type {string}
     * @memberof RecoveryCode
     */
    code?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoveryCode
     */
    isActive?: boolean;
}

/**
 * 
 * @export
 * @interface RecoveryCodesViewModel
 */
export interface RecoveryCodesViewModel {
    /**
     * 
     * @type {Array<RecoveryCode>}
     * @memberof RecoveryCodesViewModel
     */
    codes?: Array<RecoveryCode>;
    /**
     * 
     * @type {string}
     * @memberof RecoveryCodesViewModel
     */
    authToken?: string;
}

/**
 * 
 * @export
 * @interface RegisterInvestorViewModel
 */
export interface RegisterInvestorViewModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    confirmPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInvestorViewModel
     */
    refCode?: string;
}

/**
 * 
 * @export
 * @interface RegisterManagerViewModel
 */
export interface RegisterManagerViewModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    confirmPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterManagerViewModel
     */
    refCode?: string;
}

/**
 * 
 * @export
 * @interface ResendConfirmationViewModel
 */
export interface ResendConfirmationViewModel {
    /**
     * 
     * @type {string}
     * @memberof ResendConfirmationViewModel
     */
    email: string;
}

/**
 * 
 * @export
 * @interface ResetPasswordViewModel
 */
export interface ResetPasswordViewModel {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordViewModel
     */
    confirmPassword?: string;
}

/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    moderationComment?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    clientComment?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    reviewAnswer?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Review
     */
    rejectLabels?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    reviewRejectType?: string;
}

/**
 * 
 * @export
 * @interface SearchViewModel
 */
export interface SearchViewModel {
    /**
     * 
     * @type {ProgramsList}
     * @memberof SearchViewModel
     */
    programs?: ProgramsList;
    /**
     * 
     * @type {FundsList}
     * @memberof SearchViewModel
     */
    funds?: FundsList;
    /**
     * 
     * @type {ManagersList}
     * @memberof SearchViewModel
     */
    managers?: ManagersList;
}

/**
 * 
 * @export
 * @interface TradesViewModel
 */
export interface TradesViewModel {
    /**
     * 
     * @type {Array<OrderModel>}
     * @memberof TradesViewModel
     */
    trades?: Array<OrderModel>;
    /**
     * 
     * @type {number}
     * @memberof TradesViewModel
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface TwoFactorAuthenticator
 */
export interface TwoFactorAuthenticator {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthenticator
     */
    sharedKey?: string;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthenticator
     */
    authenticatorUri?: string;
}

/**
 * 
 * @export
 * @interface TwoFactorAuthenticatorConfirm
 */
export interface TwoFactorAuthenticatorConfirm {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    sharedKey: string;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthenticatorConfirm
     */
    password: string;
}

/**
 * 
 * @export
 * @interface TwoFactorCodeModel
 */
export interface TwoFactorCodeModel {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorCodeModel
     */
    twoFactorCode: string;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorCodeModel
     */
    password: string;
}

/**
 * 
 * @export
 * @interface TwoFactorStatus
 */
export interface TwoFactorStatus {
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorStatus
     */
    twoFactorEnabled?: boolean;
}

/**
 * 
 * @export
 * @interface UpdatePersonalDetailViewModel
 */
export interface UpdatePersonalDetailViewModel {
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {Date}
     * @memberof UpdatePersonalDetailViewModel
     */
    birthday?: Date;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    citizenship?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePersonalDetailViewModel
     */
    gender?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalDetailViewModel
     */
    index?: string;
}

/**
 * 
 * @export
 * @interface UpdateProfileViewModel
 */
export interface UpdateProfileViewModel {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileViewModel
     */
    about?: string;
}

/**
 * 
 * @export
 * @interface UploadResult
 */
export interface UploadResult {
    /**
     * 
     * @type {string}
     * @memberof UploadResult
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface ValueChartBar
 */
export interface ValueChartBar {
    /**
     * 
     * @type {number}
     * @memberof ValueChartBar
     */
    value?: number;
    /**
     * 
     * @type {Date}
     * @memberof ValueChartBar
     */
    date?: Date;
    /**
     * 
     * @type {Array<AssetsValue>}
     * @memberof ValueChartBar
     */
    topAssets?: Array<AssetsValue>;
    /**
     * 
     * @type {OtherAssetsValue}
     * @memberof ValueChartBar
     */
    otherAssetsValue?: OtherAssetsValue;
}

/**
 * 
 * @export
 * @interface WalletInfo
 */
export interface WalletInfo {
    /**
     * 
     * @type {string}
     * @memberof WalletInfo
     */
    currency?: WalletInfo.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletInfo
     */
    address?: string;
    /**
     * 
     * @type {number}
     * @memberof WalletInfo
     */
    rateToGVT?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletInfo
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletInfo
     */
    logo?: string;
}

/**
 * @export
 * @namespace WalletInfo
 */
export namespace WalletInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface WalletPendingTransaction
 */
export interface WalletPendingTransaction {
    /**
     * 
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    hash?: string;
    /**
     * 
     * @type {number}
     * @memberof WalletPendingTransaction
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    currency?: WalletPendingTransaction.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    type?: WalletPendingTransaction.TypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof WalletPendingTransaction
     */
    dateCreated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WalletPendingTransaction
     */
    lastUpdated?: Date;
    /**
     * 
     * @type {string}
     * @memberof WalletPendingTransaction
     */
    address?: string;
}

/**
 * @export
 * @namespace WalletPendingTransaction
 */
export namespace WalletPendingTransaction {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Deposit,
        Withdrawn
    }
}

/**
 * 
 * @export
 * @interface WalletPendingTransactionsViewModel
 */
export interface WalletPendingTransactionsViewModel {
    /**
     * 
     * @type {Array<WalletPendingTransaction>}
     * @memberof WalletPendingTransactionsViewModel
     */
    transactions?: Array<WalletPendingTransaction>;
    /**
     * 
     * @type {number}
     * @memberof WalletPendingTransactionsViewModel
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface WalletSummary
 */
export interface WalletSummary {
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    totalBalanceGVT?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    totalBalanceCurrency?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    investedGVT?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    investedCurrency?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    availableGVT?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletSummary
     */
    availableCurrency?: number;
}

/**
 * 
 * @export
 * @interface WalletTransaction
 */
export interface WalletTransaction {
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof WalletTransaction
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletTransaction
     */
    amountConverted?: number;
    /**
     * 
     * @type {Date}
     * @memberof WalletTransaction
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof WalletTransaction
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceType?: WalletTransaction.SourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    sourceCurrency?: WalletTransaction.SourceCurrencyEnum;
    /**
     * 
     * @type {ProgramInfo}
     * @memberof WalletTransaction
     */
    sourceProgramInfo?: ProgramInfo;
    /**
     * 
     * @type {BlockchainInfo}
     * @memberof WalletTransaction
     */
    sourceBlockchainInfo?: BlockchainInfo;
    /**
     * 
     * @type {WithdrawalInfo}
     * @memberof WalletTransaction
     */
    sourceWithdrawalInfo?: WithdrawalInfo;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    action?: WalletTransaction.ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    information?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationId?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationType?: WalletTransaction.DestinationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletTransaction
     */
    destinationCurrency?: WalletTransaction.DestinationCurrencyEnum;
    /**
     * 
     * @type {ProgramInfo}
     * @memberof WalletTransaction
     */
    destinationProgramInfo?: ProgramInfo;
    /**
     * 
     * @type {BlockchainInfo}
     * @memberof WalletTransaction
     */
    destinationBlockchainInfo?: BlockchainInfo;
    /**
     * 
     * @type {WithdrawalInfo}
     * @memberof WalletTransaction
     */
    destinationWithdrawalInfo?: WithdrawalInfo;
}

/**
 * @export
 * @namespace WalletTransaction
 */
export namespace WalletTransaction {
    /**
     * @export
     * @enum {string}
     */
    export enum SourceTypeEnum {
        Wallet,
        Program,
        Fund,
        ProgramRequest,
        FundRequest,
        WithdrawalRequest,
        PaymentTransaction
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SourceCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ActionEnum {
        Transfer,
        ProgramOpen,
        ProgramProfit,
        ProgramInvest,
        ProgramWithdrawal,
        ProgramRefundPartialExecution,
        ProgramRefundClose,
        ProgramRequestInvest,
        ProgramRequestWithdrawal,
        ProgramRequestCancel
    }
    /**
     * @export
     * @enum {string}
     */
    export enum DestinationTypeEnum {
        Wallet,
        Program,
        Fund,
        ProgramRequest,
        FundRequest,
        WithdrawalRequest,
        PaymentTransaction
    }
    /**
     * @export
     * @enum {string}
     */
    export enum DestinationCurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface WalletTransactionsViewModel
 */
export interface WalletTransactionsViewModel {
    /**
     * 
     * @type {Array<WalletTransaction>}
     * @memberof WalletTransactionsViewModel
     */
    transactions?: Array<WalletTransaction>;
    /**
     * 
     * @type {number}
     * @memberof WalletTransactionsViewModel
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface WalletWithdrawalInfo
 */
export interface WalletWithdrawalInfo {
    /**
     * 
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    currency?: WalletWithdrawalInfo.CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletWithdrawalInfo
     */
    logo?: string;
    /**
     * 
     * @type {number}
     * @memberof WalletWithdrawalInfo
     */
    commission?: number;
    /**
     * 
     * @type {number}
     * @memberof WalletWithdrawalInfo
     */
    rateToGvt?: number;
}

/**
 * @export
 * @namespace WalletWithdrawalInfo
 */
export namespace WalletWithdrawalInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum CurrencyEnum {
        Undefined,
        GVT,
        ETH,
        BTC,
        ADA,
        USDT,
        XRP,
        BCH,
        LTC,
        DOGE,
        BNB,
        USD,
        EUR
    }
}

/**
 * 
 * @export
 * @interface WalletsInfo
 */
export interface WalletsInfo {
    /**
     * 
     * @type {Array<WalletInfo>}
     * @memberof WalletsInfo
     */
    wallets?: Array<WalletInfo>;
}

/**
 * 
 * @export
 * @interface WithdrawalInfo
 */
export interface WithdrawalInfo {
    /**
     * 
     * @type {string}
     * @memberof WithdrawalInfo
     */
    wallet?: string;
    /**
     * 
     * @type {string}
     * @memberof WithdrawalInfo
     */
    status?: WithdrawalInfo.StatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof WithdrawalInfo
     */
    canResendEmail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WithdrawalInfo
     */
    canCancelRequest?: boolean;
}

/**
 * @export
 * @namespace WithdrawalInfo
 */
export namespace WithdrawalInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        New,
        InProcess,
        Done,
        Error,
        Rejected,
        Cancelled
    }
}

/**
 * 
 * @export
 * @interface WithdrawalSummary
 */
export interface WithdrawalSummary {
    /**
     * 
     * @type {number}
     * @memberof WithdrawalSummary
     */
    availableToWithdrawal?: number;
    /**
     * 
     * @type {Array<WalletWithdrawalInfo>}
     * @memberof WithdrawalSummary
     */
    wallets?: Array<WalletWithdrawalInfo>;
}


/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faConfirmPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorAuthenticatorConfirm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faCreatePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faDisablePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/disable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorCodeModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faGet.');
            }
            const localVarPath = `/v1.0/auth/2fa`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesNewPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPasswordChangePost.');
            }
            const localVarPath = `/v1.0/auth/password/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangePasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/forgot/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/forgot/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPhoneCodePost.');
            }
            const localVarPath = `/v1.0/auth/phone/code`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost(authorization: string, code?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPhoneVerifyPost.');
            }
            const localVarPath = `/v1.0/auth/phone/verify`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/resendconfirmationlink`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResendConfirmationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost(model?: LoginViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signin/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost(model?: LoginViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signin/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm email after registration
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost(userId?: string, code?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterInvestorViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterManagerViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthTokenDevicesLogoutPost.');
            }
            const localVarPath = `/v1.0/auth/token/devices/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthTokenUpdatePost.');
            }
            const localVarPath = `/v1.0/auth/token/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faConfirmPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faCreatePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faDisablePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorStatus> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordChangePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordResetPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneCodePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneVerifyPost(authorization, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthResendconfirmationlinkPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Confirm email after registration
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupConfirmPost(userId, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenDevicesLogoutPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenUpdatePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any) {
            return AuthApiFp(configuration).v10Auth2faConfirmPost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost(authorization: string, options?: any) {
            return AuthApiFp(configuration).v10Auth2faCreatePost(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any) {
            return AuthApiFp(configuration).v10Auth2faDisablePost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet(authorization: string, options?: any) {
            return AuthApiFp(configuration).v10Auth2faGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any) {
            return AuthApiFp(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any) {
            return AuthApiFp(configuration).v10Auth2faRecoverycodesPost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthPasswordChangePost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthPasswordForgotInvestorPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthPasswordForgotManagerPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthPasswordResetPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost(authorization: string, options?: any) {
            return AuthApiFp(configuration).v10AuthPhoneCodePost(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any) {
            return AuthApiFp(configuration).v10AuthPhoneVerifyPost(authorization, code, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthResendconfirmationlinkPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthSigninInvestorPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Authorize
         * @param {LoginViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost(model?: LoginViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthSigninManagerPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Confirm email after registration
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any) {
            return AuthApiFp(configuration).v10AuthSignupConfirmPost(userId, code, options)(fetch, basePath);
        },
        /**
         * 
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthSignupInvestorPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any) {
            return AuthApiFp(configuration).v10AuthSignupManagerPost(model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost(authorization: string, options?: any) {
            return AuthApiFp(configuration).v10AuthTokenDevicesLogoutPost(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost(authorization: string, options?: any) {
            return AuthApiFp(configuration).v10AuthTokenUpdatePost(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
     * @param {TwoFactorAuthenticatorConfirm} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faConfirmPost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faCreatePost(authorization: string, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faCreatePost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 2FA disable
     * @param {string} authorization JWT access token
     * @param {TwoFactorCodeModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faDisablePost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faGet(authorization: string, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
     * @param {PasswordModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any) {
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesPost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Change password
     * @param {string} authorization JWT access token
     * @param {ChangePasswordViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPasswordChangePost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Forgot password for investor
     * @param {ForgotPasswordViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPasswordForgotInvestorPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Forgot password for manager
     * @param {ForgotPasswordViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPasswordForgotManagerPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Reset password
     * @param {ResetPasswordViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPasswordResetPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPhoneCodePost(authorization: string, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPhoneCodePost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Verify phone number
     * @param {string} authorization JWT access token
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any) {
        return AuthApiFp(this.configuration).v10AuthPhoneVerifyPost(authorization, code, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Resend Confirmation Link
     * @param {ResendConfirmationViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthResendconfirmationlinkPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Authorize
     * @param {LoginViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthSigninInvestorPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Authorize
     * @param {LoginViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthSigninManagerPost(model?: LoginViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthSigninManagerPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Confirm email after registration
     * @param {string} [userId] 
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any) {
        return AuthApiFp(this.configuration).v10AuthSignupConfirmPost(userId, code, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary New investor registration
     * @param {RegisterInvestorViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthSignupInvestorPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary New manager registration
     * @param {RegisterManagerViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any) {
        return AuthApiFp(this.configuration).v10AuthSignupManagerPost(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthTokenDevicesLogoutPost(authorization: string, options?: any) {
        return AuthApiFp(this.configuration).v10AuthTokenDevicesLogoutPost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v10AuthTokenUpdatePost(authorization: string, options?: any) {
        return AuthApiFp(this.configuration).v10AuthTokenUpdatePost(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * BrokersApi - fetch parameter creator
 * @export
 */
export const BrokersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/brokers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrokersApi - functional programming interface
 * @export
 */
export const BrokersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersInfo> {
            const localVarFetchArgs = BrokersApiFetchParamCreator(configuration).v10BrokersGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BrokersApi - factory interface
 * @export
 */
export const BrokersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet(options?: any) {
            return BrokersApiFp(configuration).v10BrokersGet(options)(fetch, basePath);
        },
    };
};

/**
 * BrokersApi - object-oriented interface
 * @export
 * @class BrokersApi
 * @extends {BaseAPI}
 */
export class BrokersApi extends BaseAPI {
    /**
     * 
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrokersApi
     */
    public v10BrokersGet(options?: any) {
        return BrokersApiFp(this.configuration).v10BrokersGet(options)(this.fetch, this.basePath);
    }

}

/**
 * FileApi - fetch parameter creator
 * @export
 */
export const FileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FileByIdGet.');
            }
            const localVarPath = `/v1.0/file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FileDocumentUploadPost.');
            }
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile','Required parameter uploadedFile was null or undefined when calling v10FileDocumentUploadPost.');
            }
            const localVarPath = `/v1.0/file/document/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost(uploadedFile: any, authorization?: string, options: any = {}): FetchArgs {
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile','Required parameter uploadedFile was null or undefined when calling v10FileUploadPost.');
            }
            const localVarPath = `/v1.0/file/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileByIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileUploadPost(uploadedFile, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Download file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet(id: string, options?: any) {
            return FileApiFp(configuration).v10FileByIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any) {
            return FileApiFp(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any) {
            return FileApiFp(configuration).v10FileUploadPost(uploadedFile, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @summary Download file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public v10FileByIdGet(id: string, options?: any) {
        return FileApiFp(this.configuration).v10FileByIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any) {
        return FileApiFp(this.configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upload file
     * @param {any} uploadedFile Upload File
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any) {
        return FileApiFp(this.configuration).v10FileUploadPost(uploadedFile, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * FundsApi - fetch parameter creator
 * @export
 */
export const FundsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/funds/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fund assets info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdAssetsGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/assets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fund balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = (dateFrom as any).toISOString();
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = (dateTo as any).toISOString();
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fund profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = (dateFrom as any).toISOString();
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = (dateTo as any).toISOString();
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Funds details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdGet.');
            }
            const localVarPath = `/v1.0/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Funds list
         * @param {string} [authorization] 
         * @param {string} [sorting] 
         * @param {string} [currencySecondary] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = (statisticDateFrom as any).toISOString();
            }

            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = (statisticDateTo as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }

            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }

            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }

            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsSetsGet.');
            }
            const localVarPath = `/v1.0/funds/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundsApi - functional programming interface
 * @export
 */
export const FundsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformAssets> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsAssetsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Fund assets info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundAssetsListInfo> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdAssetsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Fund balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundBalanceChart> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Fund profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundProfitChart> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Funds details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundDetailsFull> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Funds list
         * @param {string} [authorization] 
         * @param {string} [sorting] 
         * @param {string} [currencySecondary] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsGet(authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsSetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FundsApi - factory interface
 * @export
 */
export const FundsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet(options?: any) {
            return FundsApiFp(configuration).v10FundsAssetsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Fund assets info
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet(id: string, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdAssetsGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Fund balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Fund profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Funds details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any) {
            return FundsApiFp(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Funds list
         * @param {string} [authorization] 
         * @param {string} [sorting] 
         * @param {string} [currencySecondary] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any) {
            return FundsApiFp(configuration).v10FundsGet(authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet(authorization: string, options?: any) {
            return FundsApiFp(configuration).v10FundsSetsGet(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * FundsApi - object-oriented interface
 * @export
 * @class FundsApi
 * @extends {BaseAPI}
 */
export class FundsApi extends BaseAPI {
    /**
     * 
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsAssetsGet(options?: any) {
        return FundsApiFp(this.configuration).v10FundsAssetsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Fund assets info
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdAssetsGet(id: string, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdAssetsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Fund balance chart
     * @param {string} id 
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {number} [maxPointCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Fund profit chart
     * @param {string} id 
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {number} [maxPointCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add to favorites
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteAddPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove from favorites
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Funds details
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [currencySecondary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any) {
        return FundsApiFp(this.configuration).v10FundsByIdGet(id, authorization, currencySecondary, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Funds list
     * @param {string} [authorization] 
     * @param {string} [sorting] 
     * @param {string} [currencySecondary] 
     * @param {Date} [statisticDateFrom] 
     * @param {Date} [statisticDateTo] 
     * @param {number} [chartPointsCount] 
     * @param {string} [mask] 
     * @param {string} [facetId] 
     * @param {boolean} [isFavorite] 
     * @param {boolean} [isEnabled] 
     * @param {Array<string>} [ids] 
     * @param {string} [managerId] 
     * @param {string} [programManagerId] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any) {
        return FundsApiFp(this.configuration).v10FundsGet(authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    public v10FundsSetsGet(authorization: string, options?: any) {
        return FundsApiFp(this.configuration).v10FundsSetsGet(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * InvestorApi - fetch parameter creator
 * @export
 */
export const InvestorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Investing into the fund
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent','Required parameter percent was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsGet.');
            }
            const localVarPath = `/v1.0/investor/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {number} [eventsTake] 
         * @param {number} [requestsSkip] 
         * @param {number} [requestsTake] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorGet.');
            }
            const localVarPath = `/v1.0/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chartCurrency !== undefined) {
                localVarQueryParameter['chartCurrency'] = chartCurrency;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }

            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }

            if (eventsTake !== undefined) {
                localVarQueryParameter['eventsTake'] = eventsTake;
            }

            if (requestsSkip !== undefined) {
                localVarQueryParameter['requestsSkip'] = requestsSkip;
            }

            if (requestsTake !== undefined) {
                localVarQueryParameter['requestsTake'] = requestsTake;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorPortfolioChartGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/chart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }

            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorPortfolioEventsGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Investing into the program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/off`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/on`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Withdraw from investment program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsGet.');
            }
            const localVarPath = `/v1.0/investor/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel investment program request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/investor/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvestorApi - functional programming interface
 * @export
 */
export const InvestorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Investing into the fund
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundWithdrawInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {number} [eventsTake] 
         * @param {number} [requestsSkip] 
         * @param {number} [requestsTake] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardSummary> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardChartValue> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardPortfolioEvents> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Investing into the program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Disable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Enable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Withdraw from investment program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramWithdrawInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Cancel investment program request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InvestorApi - factory interface
 * @export
 */
export const InvestorApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Investing into the fund
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
            return InvestorApiFp(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {number} [eventsTake] 
         * @param {number} [requestsSkip] 
         * @param {number} [requestsTake] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any) {
            return InvestorApiFp(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [balancePoints] 
         * @param {number} [programsPoints] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any) {
            return InvestorApiFp(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
            return InvestorApiFp(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Investing into the program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Disable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Enable reinvesting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Withdraw from investment program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Cancel investment program request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any) {
            return InvestorApiFp(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * InvestorApi - object-oriented interface
 * @export
 * @class InvestorApi
 * @extends {BaseAPI}
 */
export class InvestorApi extends BaseAPI {
    /**
     * 
     * @summary Investing into the fund
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for investing into the fund
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get program/fund requests
     * @param {string} id 
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id 
     * @param {number} percent 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for withdrawal from fund
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Funds list
     * @param {string} authorization JWT access token
     * @param {string} [sorting] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [chartPointsCount] 
     * @param {string} [currencySecondary] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
     * @param {string} [chartCurrency] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [balancePoints] 
     * @param {number} [programsPoints] 
     * @param {number} [eventsTake] 
     * @param {number} [requestsSkip] 
     * @param {number} [requestsTake] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
     * @param {string} [currency] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [balancePoints] 
     * @param {number} [programsPoints] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Portfolio events
     * @param {string} authorization JWT access token
     * @param {string} [assetId] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {string} [type] 
     * @param {string} [assetType] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Investing into the program
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for investing into the program
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Disable reinvesting
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Enable reinvesting
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get program/fund requests
     * @param {string} id 
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Withdraw from investment program
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for withdrawal from investment program
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
     * @param {string} [sorting] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [chartPointsCount] 
     * @param {string} [currencySecondary] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Cancel investment program request
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all requests
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    public v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any) {
        return InvestorApiFp(this.configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * KycApi - fetch parameter creator
 * @export
 */
export const KycApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {KycCallback} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost(model?: KycCallback, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/kyc/callback`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"KycCallback" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KycApi - functional programming interface
 * @export
 */
export const KycApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {KycCallback} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost(model?: KycCallback, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = KycApiFetchParamCreator(configuration).v10KycCallbackPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * KycApi - factory interface
 * @export
 */
export const KycApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {KycCallback} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost(model?: KycCallback, options?: any) {
            return KycApiFp(configuration).v10KycCallbackPost(model, options)(fetch, basePath);
        },
    };
};

/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
export class KycApi extends BaseAPI {
    /**
     * 
     * @param {KycCallback} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public v10KycCallbackPost(model?: KycCallback, options?: any) {
        return KycApiFp(this.configuration).v10KycCallbackPost(model, options)(this.fetch, this.basePath);
    }

}

/**
 * ManagerApi - fetch parameter creator
 * @export
 */
export const ManagerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerAssetsGet.');
            }
            const localVarPath = `/v1.0/manager/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager details
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerByIdDetailsGet.');
            }
            const localVarPath = `/v1.0/manager/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager profile
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerByIdGet.');
            }
            const localVarPath = `/v1.0/manager/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerEventsGet.');
            }
            const localVarPath = `/v1.0/manager/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update fund assets parts
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/assets/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;FundAssetPart&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(assets || {}) : (assets || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Close existing fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent','Required parameter percent was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewFundRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsGet.');
            }
            const localVarPath = `/v1.0/manager/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/funds/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/funds/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerGet.');
            }
            const localVarPath = `/v1.0/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Close existing investment program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Close current period
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/period/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Withdraw from program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsGet.');
            }
            const localVarPath = `/v1.0/manager/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/programs/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerApi - functional programming interface
 * @export
 */
export const ManagerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerAssets> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerAssetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager details
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfileDetails> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdDetailsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager profile
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfile> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerPortfolioEvents> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update fund assets parts
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Close existing fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerFundWithdrawInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsCreatePost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerDashboard> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Close existing investment program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Close current period
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Withdraw from program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramWithdrawInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsCreatePost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ManagerApi - factory interface
 * @export
 */
export const ManagerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet(authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerAssetsGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager details
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet(id: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerByIdDetailsGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager profile
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet(id: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerByIdGet(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
            return ManagerApiFp(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update fund assets parts
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Close existing fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for investing into the fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id 
         * @param {number} percent 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for withdrawal from fund
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsCreatePost(authorization, request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [type] 
         * @param {string} [assetType] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
            return ManagerApiFp(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Close existing investment program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deposit
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for investing into the program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Close current period
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get investment program/fund requests
         * @param {string} id 
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update investment program/fund details
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Withdraw from program
         * @param {string} id 
         * @param {number} amount 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Data for withdrawal from investment program
         * @param {string} id 
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsCreatePost(authorization, request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {number} [chartPointsCount] 
         * @param {string} [currencySecondary] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Cancel investment program/fund request
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all requests
         * @param {number} skip 
         * @param {number} take 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any) {
            return ManagerApiFp(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export class ManagerApi extends BaseAPI {
    /**
     * 
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerAssetsGet(authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerAssetsGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager details
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerByIdDetailsGet(id: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerByIdDetailsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager profile
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerByIdGet(id: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerByIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager events
     * @param {string} authorization JWT access token
     * @param {string} [assetId] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {string} [type] 
     * @param {string} [assetType] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update fund assets parts
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {Array<FundAssetPart>} [assets] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Close existing fund
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deposit
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for investing into the fund
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get investment program/fund requests
     * @param {string} id 
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update investment program/fund details
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id 
     * @param {number} percent 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for withdrawal from fund
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create fund
     * @param {string} authorization JWT access token
     * @param {NewFundRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsCreatePost(authorization, request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager funds
     * @param {string} authorization JWT access token
     * @param {string} [sorting] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [chartPointsCount] 
     * @param {string} [currencySecondary] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsInvestmentAmountGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Cancel investment program/fund request
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
     * @param {string} [assetId] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {string} [type] 
     * @param {string} [assetType] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Close existing investment program
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {string} [twoFactorCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deposit
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for investing into the program
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Close current period
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get investment program/fund requests
     * @param {string} id 
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update investment program/fund details
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {ProgramUpdate} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Withdraw from program
     * @param {string} id 
     * @param {number} amount 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Data for withdrawal from investment program
     * @param {string} id 
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create an investment program
     * @param {string} authorization JWT access token
     * @param {NewProgramRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsCreatePost(authorization, request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manager programs
     * @param {string} authorization JWT access token
     * @param {string} [sorting] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {number} [chartPointsCount] 
     * @param {string} [currencySecondary] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsInvestmentAmountGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Cancel investment program/fund request
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all requests
     * @param {number} skip 
     * @param {number} take 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any) {
        return ManagerApiFp(this.configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationsApi - fetch parameter creator
 * @export
 */
export const NotificationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet(authorization: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsGet.');
            }
            const localVarPath = `/v1.0/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsNewGet.');
            }
            const localVarPath = `/v1.0/notifications/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {string} [managerId] 
         * @param {string} [type] 
         * @param {string} [conditionType] 
         * @param {number} [conditionAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsAddPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (conditionType !== undefined) {
                localVarQueryParameter['ConditionType'] = conditionType;
            }

            if (conditionAmount !== undefined) {
                localVarQueryParameter['ConditionAmount'] = conditionAmount;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable/disable setting
         * @param {string} id 
         * @param {boolean} enable 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'enable' is not null or undefined
            if (enable === null || enable === undefined) {
                throw new RequiredError('enable','Required parameter enable was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            const localVarPath = `/v1.0/notifications/settings/{id}/{enable}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"enable"}}`, encodeURIComponent(String(enable)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User settings for fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsGet.');
            }
            const localVarPath = `/v1.0/notifications/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User settings for manager
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/managers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User settings for program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove setting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsGet(authorization, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsNewGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {string} [managerId] 
         * @param {string} [type] 
         * @param {string} [conditionType] 
         * @param {number} [conditionAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Enable/disable setting
         * @param {string} id 
         * @param {boolean} enable 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary User settings for fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary User settings for manager
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary User settings for program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove setting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsGet(authorization, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet(authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsNewGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {string} [managerId] 
         * @param {string} [type] 
         * @param {string} [conditionType] 
         * @param {number} [conditionAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Enable/disable setting
         * @param {string} id 
         * @param {boolean} enable 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary User settings for fund
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet(authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary User settings for manager
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary User settings for program
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove setting
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any) {
            return NotificationsApiFp(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @summary User notifications
     * @param {string} authorization JWT access token
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsGet(authorization, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsNewGet(authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsNewGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add new setting
     * @param {string} authorization JWT access token
     * @param {string} [assetId] 
     * @param {string} [managerId] 
     * @param {string} [type] 
     * @param {string} [conditionType] 
     * @param {number} [conditionAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Enable/disable setting
     * @param {string} id 
     * @param {boolean} enable 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary User settings for fund
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsGet(authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary User settings for manager
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary User settings for program
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove setting
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * PlatformApi - fetch parameter creator
 * @export
 */
export const PlatformApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Investment programs levels
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet(currency?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/levels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/statistic`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlatformApi - functional programming interface
 * @export
 */
export const PlatformApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformInfo> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformInfoGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Investment programs levels
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsLevelsInfo> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformLevelsGet(currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformStatistic> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformStatisticGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PlatformApi - factory interface
 * @export
 */
export const PlatformApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet(options?: any) {
            return PlatformApiFp(configuration).v10PlatformInfoGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Investment programs levels
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet(currency?: string, options?: any) {
            return PlatformApiFp(configuration).v10PlatformLevelsGet(currency, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet(options?: any) {
            return PlatformApiFp(configuration).v10PlatformStatisticGet(options)(fetch, basePath);
        },
    };
};

/**
 * PlatformApi - object-oriented interface
 * @export
 * @class PlatformApi
 * @extends {BaseAPI}
 */
export class PlatformApi extends BaseAPI {
    /**
     * 
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public v10PlatformInfoGet(options?: any) {
        return PlatformApiFp(this.configuration).v10PlatformInfoGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Investment programs levels
     * @param {string} [currency] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public v10PlatformLevelsGet(currency?: string, options?: any) {
        return PlatformApiFp(this.configuration).v10PlatformLevelsGet(currency, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public v10PlatformStatisticGet(options?: any) {
        return PlatformApiFp(this.configuration).v10PlatformStatisticGet(options)(this.fetch, this.basePath);
    }

}

/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export const ProfileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileAvatarRemovePost.');
            }
            const localVarPath = `/v1.0/profile/avatar/remove`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update avatar
         * @param {string} fileId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            const localVarPath = `/v1.0/profile/avatar/update/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileGet.');
            }
            const localVarPath = `/v1.0/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileHeaderGet.');
            }
            const localVarPath = `/v1.0/profile/header`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfilePersonalUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/personal/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdatePersonalDetailViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateProfileViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileVerificationTokenPost.');
            }
            const localVarPath = `/v1.0/profile/verification/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarRemovePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update avatar
         * @param {string} fileId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileFullViewModel> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileHeaderViewModel> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileHeaderGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfilePersonalUpdatePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileUpdatePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileVerificationTokenPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost(authorization: string, options?: any) {
            return ProfileApiFp(configuration).v10ProfileAvatarRemovePost(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update avatar
         * @param {string} fileId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any) {
            return ProfileApiFp(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet(authorization: string, options?: any) {
            return ProfileApiFp(configuration).v10ProfileGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet(authorization: string, options?: any) {
            return ProfileApiFp(configuration).v10ProfileHeaderGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any) {
            return ProfileApiFp(configuration).v10ProfilePersonalUpdatePost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any) {
            return ProfileApiFp(configuration).v10ProfileUpdatePost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost(authorization: string, options?: any) {
            return ProfileApiFp(configuration).v10ProfileVerificationTokenPost(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileAvatarRemovePost(authorization: string, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarRemovePost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update avatar
     * @param {string} fileId 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileGet(authorization: string, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileHeaderGet(authorization: string, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileHeaderGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user personal details
     * @param {string} authorization JWT access token
     * @param {UpdatePersonalDetailViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfilePersonalUpdatePost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update profile
     * @param {string} authorization JWT access token
     * @param {UpdateProfileViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileUpdatePost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public v10ProfileVerificationTokenPost(authorization: string, options?: any) {
        return ProfileApiFp(this.configuration).v10ProfileVerificationTokenPost(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * ProgramsApi - fetch parameter creator
 * @export
 */
export const ProgramsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Program balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = (dateFrom as any).toISOString();
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = (dateTo as any).toISOString();
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Program profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = (dateFrom as any).toISOString();
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = (dateTo as any).toISOString();
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Program details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trade history
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {string} [symbol] 
         * @param {string} [sorting] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdTradesGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = (dateFrom as any).toISOString();
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = (dateTo as any).toISOString();
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Programs list
         * @param {string} [authorization] 
         * @param {number} [levelMin] 
         * @param {number} [levelMax] 
         * @param {number} [profitAvgMin] 
         * @param {number} [profitAvgMax] 
         * @param {string} [sorting] 
         * @param {string} [programCurrency] 
         * @param {string} [currencySecondary] 
         * @param {number} [levelUpFrom] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (levelMin !== undefined) {
                localVarQueryParameter['LevelMin'] = levelMin;
            }

            if (levelMax !== undefined) {
                localVarQueryParameter['LevelMax'] = levelMax;
            }

            if (profitAvgMin !== undefined) {
                localVarQueryParameter['ProfitAvgMin'] = profitAvgMin;
            }

            if (profitAvgMax !== undefined) {
                localVarQueryParameter['ProfitAvgMax'] = profitAvgMax;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (programCurrency !== undefined) {
                localVarQueryParameter['ProgramCurrency'] = programCurrency;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (levelUpFrom !== undefined) {
                localVarQueryParameter['LevelUpFrom'] = levelUpFrom;
            }

            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = (statisticDateFrom as any).toISOString();
            }

            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = (statisticDateTo as any).toISOString();
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }

            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }

            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }

            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Level up summary
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet(authorization?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/programs/levelup/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsSetsGet.');
            }
            const localVarPath = `/v1.0/programs/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Program balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramBalanceChart> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Program profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramProfitChart> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Program details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramDetailsFull> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Trade history
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {string} [symbol] 
         * @param {string} [sorting] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Programs list
         * @param {string} [authorization] 
         * @param {number} [levelMin] 
         * @param {number} [levelMax] 
         * @param {number} [profitAvgMin] 
         * @param {number} [profitAvgMax] 
         * @param {string} [sorting] 
         * @param {string} [programCurrency] 
         * @param {string} [currencySecondary] 
         * @param {number} [levelUpFrom] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsGet(authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Level up summary
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelUpSummary> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsLevelupSummaryGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsSetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Program balance chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Program profit chart
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {number} [maxPointCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add to favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove from favorites
         * @param {string} id 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Program details
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [currencySecondary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Trade history
         * @param {string} id 
         * @param {Date} [dateFrom] 
         * @param {Date} [dateTo] 
         * @param {string} [symbol] 
         * @param {string} [sorting] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Programs list
         * @param {string} [authorization] 
         * @param {number} [levelMin] 
         * @param {number} [levelMax] 
         * @param {number} [profitAvgMin] 
         * @param {number} [profitAvgMax] 
         * @param {string} [sorting] 
         * @param {string} [programCurrency] 
         * @param {string} [currencySecondary] 
         * @param {number} [levelUpFrom] 
         * @param {Date} [statisticDateFrom] 
         * @param {Date} [statisticDateTo] 
         * @param {number} [chartPointsCount] 
         * @param {string} [mask] 
         * @param {string} [facetId] 
         * @param {boolean} [isFavorite] 
         * @param {boolean} [isEnabled] 
         * @param {Array<string>} [ids] 
         * @param {string} [managerId] 
         * @param {string} [programManagerId] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsGet(authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Level up summary
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet(authorization?: string, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsLevelupSummaryGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet(authorization: string, options?: any) {
            return ProgramsApiFp(configuration).v10ProgramsSetsGet(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * 
     * @summary Program balance chart
     * @param {string} id 
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {number} [maxPointCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Program profit chart
     * @param {string} id 
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {number} [maxPointCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add to favorites
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove from favorites
     * @param {string} id 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Program details
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [currencySecondary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Trade history
     * @param {string} id 
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {string} [symbol] 
     * @param {string} [sorting] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, skip?: number, take?: number, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Programs list
     * @param {string} [authorization] 
     * @param {number} [levelMin] 
     * @param {number} [levelMax] 
     * @param {number} [profitAvgMin] 
     * @param {number} [profitAvgMax] 
     * @param {string} [sorting] 
     * @param {string} [programCurrency] 
     * @param {string} [currencySecondary] 
     * @param {number} [levelUpFrom] 
     * @param {Date} [statisticDateFrom] 
     * @param {Date} [statisticDateTo] 
     * @param {number} [chartPointsCount] 
     * @param {string} [mask] 
     * @param {string} [facetId] 
     * @param {boolean} [isFavorite] 
     * @param {boolean} [isEnabled] 
     * @param {Array<string>} [ids] 
     * @param {string} [managerId] 
     * @param {string} [programManagerId] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, skip?: number, take?: number, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsGet(authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Level up summary
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsLevelupSummaryGet(authorization?: string, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsLevelupSummaryGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public v10ProgramsSetsGet(authorization: string, options?: any) {
        return ProgramsApiFp(this.configuration).v10ProgramsSetsGet(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * RateApi - fetch parameter creator
 * @export
 */
export const RateApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get rate
         * @param {string} exchange 
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options: any = {}): FetchArgs {
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange','Required parameter exchange was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{exchange}/{from}/{to}`
                .replace(`{${"exchange"}}`, encodeURIComponent(String(exchange)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get rate
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet(from: string, to: string, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling v10RateByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling v10RateByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{from}/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get rates
         * @param {Array<string>} [from] 
         * @param {Array<string>} [to] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet(from?: Array<string>, to?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/rate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from) {
                localVarQueryParameter['from'] = from;
            }

            if (to) {
                localVarQueryParameter['to'] = to;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RateApi - functional programming interface
 * @export
 */
export const RateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get rate
         * @param {string} exchange 
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get rate
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet(from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByFromByToGet(from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get rates
         * @param {Array<string>} [from] 
         * @param {Array<string>} [to] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet(from?: Array<string>, to?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatesModel> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateGet(from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RateApi - factory interface
 * @export
 */
export const RateApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get rate
         * @param {string} exchange 
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any) {
            return RateApiFp(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get rate
         * @param {string} from 
         * @param {string} to 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet(from: string, to: string, options?: any) {
            return RateApiFp(configuration).v10RateByFromByToGet(from, to, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get rates
         * @param {Array<string>} [from] 
         * @param {Array<string>} [to] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet(from?: Array<string>, to?: Array<string>, options?: any) {
            return RateApiFp(configuration).v10RateGet(from, to, options)(fetch, basePath);
        },
    };
};

/**
 * RateApi - object-oriented interface
 * @export
 * @class RateApi
 * @extends {BaseAPI}
 */
export class RateApi extends BaseAPI {
    /**
     * 
     * @summary Get rate
     * @param {string} exchange 
     * @param {string} from 
     * @param {string} to 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    public v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any) {
        return RateApiFp(this.configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get rate
     * @param {string} from 
     * @param {string} to 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    public v10RateByFromByToGet(from: string, to: string, options?: any) {
        return RateApiFp(this.configuration).v10RateByFromByToGet(from, to, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get rates
     * @param {Array<string>} [from] 
     * @param {Array<string>} [to] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    public v10RateGet(from?: Array<string>, to?: Array<string>, options?: any) {
        return RateApiFp(this.configuration).v10RateGet(from, to, options)(this.fetch, this.basePath);
    }

}

/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Program / fund / manager search
         * @param {string} [mask] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet(mask?: string, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mask !== undefined) {
                localVarQueryParameter['mask'] = mask;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Program / fund / manager search
         * @param {string} [mask] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet(mask?: string, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchViewModel> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).v10SearchGet(mask, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Program / fund / manager search
         * @param {string} [mask] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet(mask?: string, take?: number, options?: any) {
            return SearchApiFp(configuration).v10SearchGet(mask, take, options)(fetch, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Program / fund / manager search
     * @param {string} [mask] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public v10SearchGet(mask?: string, take?: number, options?: any) {
        return SearchApiFp(this.configuration).v10SearchGet(mask, take, options)(this.fetch, this.basePath);
    }

}

/**
 * WalletApi - fetch parameter creator
 * @export
 */
export const WalletApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletAddressesGet.');
            }
            const localVarPath = `/v1.0/wallet/addresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Wallet summary
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet(currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10WalletByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [assetType] 
         * @param {string} [txAction] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletTransactionsGet.');
            }
            const localVarPath = `/v1.0/wallet/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any).toISOString();
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any).toISOString();
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (txAction !== undefined) {
                localVarQueryParameter['TxAction'] = txAction;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletTransactionsPendingGet.');
            }
            const localVarPath = `/v1.0/wallet/transactions/pending`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawInfoGet.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/cancel/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [requestId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/wallet/withdraw/request/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestNewPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateWithdrawalRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/resend/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = (<any>Object).assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = (<any>Object).assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = (<any>Object).assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletsInfo> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletAddressesGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Wallet summary
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletSummary> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletByCurrencyGet(currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [assetType] 
         * @param {string} [txAction] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletTransactionsViewModel> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletPendingTransactionsViewModel> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionsPendingGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WithdrawalSummary> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawInfoGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [requestId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet(authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletAddressesGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Wallet summary
         * @param {string} currency 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet(currency: string, authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletByCurrencyGet(currency, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId] 
         * @param {Date} [from] 
         * @param {Date} [to] 
         * @param {string} [assetType] 
         * @param {string} [txAction] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any) {
            return WalletApiFp(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, skip, take, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet(authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletTransactionsPendingGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet(authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletWithdrawInfoGet(authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [requestId] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any) {
            return WalletApiFp(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any) {
            return WalletApiFp(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} txId 
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any) {
            return WalletApiFp(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options)(fetch, basePath);
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletAddressesGet(authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletAddressesGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Wallet summary
     * @param {string} currency 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletByCurrencyGet(currency: string, authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletByCurrencyGet(currency, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
     * @param {string} [assetId] 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {string} [assetType] 
     * @param {string} [txAction] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, skip?: number, take?: number, options?: any) {
        return WalletApiFp(this.configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, skip, take, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletTransactionsPendingGet(authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletTransactionsPendingGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletWithdrawInfoGet(authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletWithdrawInfoGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} txId 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [requestId] 
     * @param {string} [code] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} authorization JWT access token
     * @param {CreateWithdrawalRequestModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestNewPost(authorization, model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} txId 
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options)(this.fetch, this.basePath);
    }

}

