/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import SearchViewModelOld from '../model/SearchViewModelOld';

/**
* Search service.
* @class SearchApi
* @version v1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @function SearchApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {SearchApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      searchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'mask': opts['mask'],
        'take': opts['take']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SearchViewModelOld;

      return this.apiClient.callApi(
        '/v1.0/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program / fund / manager search
     * @function SearchApi#search
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.authorization] 
     * @param {String} [opts.mask] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<SearchViewModelOld>} a Promise, with an object containing data of type SearchViewModelOld and HTTP response
     */
      search(opts) {
      return this.searchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
