/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import ManagerDashboard from '../model/ManagerDashboard';

/**
* Manager service.
* @module api/ManagerApi
* @version v1.0
*/
export default class ManagerApi {

    /**
    * Constructs a new ManagerApi. 
    * @alias module:api/ManagerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Manager dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.eventsTake 
     * @param {Number} opts.requestsSkip 
     * @param {Number} opts.requestsTake 
     * @param {Date} opts.chartFrom 
     * @param {Date} opts.chartTo 
     * @param {Number} opts.pointsCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ManagerDashboard} and HTTP response
     */
    v10ManagerGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'eventsTake': opts['eventsTake'],
        'requestsSkip': opts['requestsSkip'],
        'requestsTake': opts['requestsTake'],
        'chartFrom': opts['chartFrom'],
        'chartTo': opts['chartTo'],
        'pointsCount': opts['pointsCount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerDashboard;

      return this.apiClient.callApi(
        '/v1.0/manager', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager dashboard
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.eventsTake 
     * @param {Number} opts.requestsSkip 
     * @param {Number} opts.requestsTake 
     * @param {Date} opts.chartFrom 
     * @param {Date} opts.chartTo 
     * @param {Number} opts.pointsCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ManagerDashboard}
     */
    v10ManagerGet(authorization, opts) {
      return this.v10ManagerGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
