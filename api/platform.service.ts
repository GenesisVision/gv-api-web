/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { CaptchaDetails } from "../model/captchaDetails";
import { ErrorViewModel } from "../model/errorViewModel";
import { LevelsParamsInfo } from "../model/levelsParamsInfo";
import { PlatformAssets } from "../model/platformAssets";
import { PlatformInfo } from "../model/platformInfo";
import { ProgramsLevelsInfo } from "../model/programsLevelsInfo";

export class PlatformService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getAllPlatformAssets(): CancelablePromise<PlatformAssets>{
    return this.getAllPlatformAssetsWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getAllPlatformAssetsWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformAssets;

    return this.apiClient.callApi<PlatformAssets>(
      '/v2.0/platform/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformDate(): CancelablePromise<string>{
    return this.getPlatformDateWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformDateWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/platform/date', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformInfo(): CancelablePromise<PlatformInfo>{
    return this.getPlatformInfoWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformInfoWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformInfo;

    return this.apiClient.callApi<PlatformInfo>(
      '/v2.0/platform/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramLevels(opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<ProgramsLevelsInfo>{
    return this.getProgramLevelsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramLevelsWithHttpInfo(opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramsLevelsInfo;

    return this.apiClient.callApi<ProgramsLevelsInfo>(
      '/v2.0/platform/levels', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramLevelsParams(opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<LevelsParamsInfo>{
    return this.getProgramLevelsParamsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramLevelsParamsWithHttpInfo(opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = LevelsParamsInfo;

    return this.apiClient.callApi<LevelsParamsInfo>(
      '/v2.0/platform/levels/parameters', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRiskControlInfo(route: string, opts?: { 
    client?: string, 
    version?: string
  }): CancelablePromise<CaptchaDetails>{
    return this.getRiskControlInfoWithHttpInfo(route, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRiskControlInfoWithHttpInfo(route: string, opts: { 
    client?: string, 
    version?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "route" is set
    if (route === undefined || route === null) {
      throw new Error("Missing the required parameter \"route\" when calling getRiskControlInfo");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Route": route,
      "Client": opts["client"],
      "Version": opts["version"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = CaptchaDetails;

    return this.apiClient.callApi<CaptchaDetails>(
      '/v2.0/platform/riskcontrol', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
