/**
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import Token from './Token';





/**
* The InvestmentProgramDashboardManager model module.
* @module model/InvestmentProgramDashboardManager
* @version v1
*/
export default class InvestmentProgramDashboardManager {
    /**
    * Constructs a new <code>InvestmentProgramDashboardManager</code>.
    * @alias module:model/InvestmentProgramDashboardManager
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>InvestmentProgramDashboardManager</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/InvestmentProgramDashboardManager} obj Optional instance to populate.
    * @return {module:model/InvestmentProgramDashboardManager} The populated <code>InvestmentProgramDashboardManager</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvestmentProgramDashboardManager();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('tradesCount')) {
                obj['tradesCount'] = ApiClient.convertToType(data['tradesCount'], 'Number');
            }
            if (data.hasOwnProperty('periodDuration')) {
                obj['periodDuration'] = ApiClient.convertToType(data['periodDuration'], 'Number');
            }
            if (data.hasOwnProperty('investorsCount')) {
                obj['investorsCount'] = ApiClient.convertToType(data['investorsCount'], 'Number');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('startOfPeriod')) {
                obj['startOfPeriod'] = ApiClient.convertToType(data['startOfPeriod'], 'Date');
            }
            if (data.hasOwnProperty('profitTotal')) {
                obj['profitTotal'] = ApiClient.convertToType(data['profitTotal'], 'Number');
            }
            if (data.hasOwnProperty('profitTotalGvt')) {
                obj['profitTotalGvt'] = ApiClient.convertToType(data['profitTotalGvt'], 'Number');
            }
            if (data.hasOwnProperty('profitCurrent')) {
                obj['profitCurrent'] = ApiClient.convertToType(data['profitCurrent'], 'Number');
            }
            if (data.hasOwnProperty('isInvestEnable')) {
                obj['isInvestEnable'] = ApiClient.convertToType(data['isInvestEnable'], 'Boolean');
            }
            if (data.hasOwnProperty('isWithdrawEnable')) {
                obj['isWithdrawEnable'] = ApiClient.convertToType(data['isWithdrawEnable'], 'Boolean');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = Token.constructFromObject(data['token']);
            }
            if (data.hasOwnProperty('ownBalance')) {
                obj['ownBalance'] = ApiClient.convertToType(data['ownBalance'], 'Number');
            }
            if (data.hasOwnProperty('minAccountBalanceUsd')) {
                obj['minAccountBalanceUsd'] = ApiClient.convertToType(data['minAccountBalanceUsd'], 'Number');
            }
            if (data.hasOwnProperty('minAccountBalance')) {
                obj['minAccountBalance'] = ApiClient.convertToType(data['minAccountBalance'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('canCloseProgram')) {
                obj['canCloseProgram'] = ApiClient.convertToType(data['canCloseProgram'], 'Boolean');
            }
            if (data.hasOwnProperty('canClosePeriod')) {
                obj['canClosePeriod'] = ApiClient.convertToType(data['canClosePeriod'], 'Boolean');
            }
            if (data.hasOwnProperty('isFavorite')) {
                obj['isFavorite'] = ApiClient.convertToType(data['isFavorite'], 'Boolean');
            }
            if (data.hasOwnProperty('isPending')) {
                obj['isPending'] = ApiClient.convertToType(data['isPending'], 'Boolean');
            }
            if (data.hasOwnProperty('isTournament')) {
                obj['isTournament'] = ApiClient.convertToType(data['isTournament'], 'Boolean');
            }
            if (data.hasOwnProperty('roundNumber')) {
                obj['roundNumber'] = ApiClient.convertToType(data['roundNumber'], 'Number');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = ApiClient.convertToType(data['place'], 'Number');
            }
        }
        return obj;
    }

    /**
    * @member {String} id
    */
    id = undefined;
    /**
    * @member {String} title
    */
    title = undefined;
    /**
    * @member {String} description
    */
    description = undefined;
    /**
    * @member {Number} level
    */
    level = undefined;
    /**
    * @member {String} logo
    */
    logo = undefined;
    /**
    * @member {Number} balance
    */
    balance = undefined;
    /**
    * @member {module:model/InvestmentProgramDashboardManager.CurrencyEnum} currency
    */
    currency = undefined;
    /**
    * @member {Number} tradesCount
    */
    tradesCount = undefined;
    /**
    * @member {Number} periodDuration
    */
    periodDuration = undefined;
    /**
    * @member {Number} investorsCount
    */
    investorsCount = undefined;
    /**
    * @member {Boolean} isEnabled
    */
    isEnabled = undefined;
    /**
    * @member {Date} startOfPeriod
    */
    startOfPeriod = undefined;
    /**
    * @member {Number} profitTotal
    */
    profitTotal = undefined;
    /**
    * @member {Number} profitTotalGvt
    */
    profitTotalGvt = undefined;
    /**
    * @member {Number} profitCurrent
    */
    profitCurrent = undefined;
    /**
    * @member {Boolean} isInvestEnable
    */
    isInvestEnable = undefined;
    /**
    * @member {Boolean} isWithdrawEnable
    */
    isWithdrawEnable = undefined;
    /**
    * @member {module:model/Token} token
    */
    token = undefined;
    /**
    * @member {Number} ownBalance
    */
    ownBalance = undefined;
    /**
    * @member {Number} minAccountBalanceUsd
    */
    minAccountBalanceUsd = undefined;
    /**
    * @member {Number} minAccountBalance
    */
    minAccountBalance = undefined;
    /**
    * @member {String} login
    */
    login = undefined;
    /**
    * @member {Boolean} canCloseProgram
    */
    canCloseProgram = undefined;
    /**
    * @member {Boolean} canClosePeriod
    */
    canClosePeriod = undefined;
    /**
    * @member {Boolean} isFavorite
    */
    isFavorite = undefined;
    /**
    * @member {Boolean} isPending
    */
    isPending = undefined;
    /**
    * @member {Boolean} isTournament
    */
    isTournament = undefined;
    /**
    * @member {Number} roundNumber
    */
    roundNumber = undefined;
    /**
    * @member {Number} place
    */
    place = undefined;






    /**
    * Allowed values for the <code>currency</code> property.
    * @enum {String}
    * @readonly
    */
    static CurrencyEnum = {
    
        /**
         * value: "Undefined"
         * @const
         */
        "Undefined": "Undefined",
    
        /**
         * value: "GVT"
         * @const
         */
        "GVT": "GVT",
    
        /**
         * value: "ETH"
         * @const
         */
        "ETH": "ETH",
    
        /**
         * value: "BTC"
         * @const
         */
        "BTC": "BTC",
    
        /**
         * value: "ADA"
         * @const
         */
        "ADA": "ADA",
    
        /**
         * value: "USD"
         * @const
         */
        "USD": "USD",
    
        /**
         * value: "EUR"
         * @const
         */
        "EUR": "EUR"    
    };



}


