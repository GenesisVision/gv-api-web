/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoreApiV10);
  }
}(this, function(expect, CoreApiV10) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CoreApiV10.WalletData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WalletData', function() {
    it('should create an instance of WalletData', function() {
      // uncomment below and update the code to test WalletData
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be.a(CoreApiV10.WalletData);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property logo (base name: "logo")', function() {
      // uncomment below and update the code to test the property logo
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property rateToGVT (base name: "rateToGVT")', function() {
      // uncomment below and update the code to test the property rateToGVT
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property isDepositEnabled (base name: "isDepositEnabled")', function() {
      // uncomment below and update the code to test the property isDepositEnabled
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property isWithdrawalEnabled (base name: "isWithdrawalEnabled")', function() {
      // uncomment below and update the code to test the property isWithdrawalEnabled
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property withdrawalCommission (base name: "withdrawalCommission")', function() {
      // uncomment below and update the code to test the property withdrawalCommission
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property depositAddress (base name: "depositAddress")', function() {
      // uncomment below and update the code to test the property depositAddress
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property available (base name: "available")', function() {
      // uncomment below and update the code to test the property available
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property invested (base name: "invested")', function() {
      // uncomment below and update the code to test the property invested
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property pending (base name: "pending")', function() {
      // uncomment below and update the code to test the property pending
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property currencyCcy (base name: "currencyCcy")', function() {
      // uncomment below and update the code to test the property currencyCcy
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property availableCcy (base name: "availableCcy")', function() {
      // uncomment below and update the code to test the property availableCcy
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property investedCcy (base name: "investedCcy")', function() {
      // uncomment below and update the code to test the property investedCcy
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property pendingCcy (base name: "pendingCcy")', function() {
      // uncomment below and update the code to test the property pendingCcy
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

    it('should have the property totalCcy (base name: "totalCcy")', function() {
      // uncomment below and update the code to test the property totalCcy
      //var instance = new CoreApiV10.WalletData();
      //expect(instance).to.be();
    });

  });

}));
