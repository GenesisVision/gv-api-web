'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BrokerInitData = require('../model/BrokerInitData');

var _BrokerInitData2 = _interopRequireDefault(_BrokerInitData);

var _ChangePasswordViewModel = require('../model/ChangePasswordViewModel');

var _ChangePasswordViewModel2 = _interopRequireDefault(_ChangePasswordViewModel);

var _ClosePeriodData = require('../model/ClosePeriodData');

var _ClosePeriodData2 = _interopRequireDefault(_ClosePeriodData);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _InvestmentProgramAccrual = require('../model/InvestmentProgramAccrual');

var _InvestmentProgramAccrual2 = _interopRequireDefault(_InvestmentProgramAccrual);

var _LoginViewModel = require('../model/LoginViewModel');

var _LoginViewModel2 = _interopRequireDefault(_LoginViewModel);

var _ManagerAccountOnlineInfo = require('../model/ManagerAccountOnlineInfo');

var _ManagerAccountOnlineInfo2 = _interopRequireDefault(_ManagerAccountOnlineInfo);

var _ManagerHistoryIpfsHash = require('../model/ManagerHistoryIpfsHash');

var _ManagerHistoryIpfsHash2 = _interopRequireDefault(_ManagerHistoryIpfsHash);

var _NewManager = require('../model/NewManager');

var _NewManager2 = _interopRequireDefault(_NewManager);

var _NewOpenTradesEvent = require('../model/NewOpenTradesEvent');

var _NewOpenTradesEvent2 = _interopRequireDefault(_NewOpenTradesEvent);

var _NewTradeEvent = require('../model/NewTradeEvent');

var _NewTradeEvent2 = _interopRequireDefault(_NewTradeEvent);

var _StartValues = require('../model/StartValues');

var _StartValues2 = _interopRequireDefault(_StartValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Broker service.
* @module api/BrokerApi
* @version v1
*/
var BrokerApi = function () {

  /**
  * Constructs a new BrokerApi. 
  * @alias module:api/BrokerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function BrokerApi(apiClient) {
    _classCallCheck(this, BrokerApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Create manager
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/NewManager} opts.request 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */


  _createClass(BrokerApi, [{
    key: 'apiBrokerAccountCreatePostWithHttpInfo',
    value: function apiBrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/account/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAccountCreatePost',
    value: function apiBrokerAccountCreatePost(authorization, opts) {
      return this.apiBrokerAccountCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerAuthChangePasswordPostWithHttpInfo',
    value: function apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthChangePasswordPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/auth/changePassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerAuthChangePasswordPost',
    value: function apiBrokerAuthChangePasswordPost(authorization, opts) {
      return this.apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthConfirmEmailPostWithHttpInfo',
    value: function apiBrokerAuthConfirmEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/confirmEmail', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthConfirmEmailPost',
    value: function apiBrokerAuthConfirmEmailPost(opts) {
      return this.apiBrokerAuthConfirmEmailPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthSignInPostWithHttpInfo',
    value: function apiBrokerAuthSignInPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/signIn', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthSignInPost',
    value: function apiBrokerAuthSignInPost(opts) {
      return this.apiBrokerAuthSignInPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthUpdateTokenGetWithHttpInfo',
    value: function apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthUpdateTokenGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/updateToken', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthUpdateTokenGet',
    value: function apiBrokerAuthUpdateTokenGet(authorization) {
      return this.apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get broker initial data
     * @param {String} brokerTradeServerId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */

  }, {
    key: 'apiBrokerInitDataGetWithHttpInfo',
    value: function apiBrokerInitDataGetWithHttpInfo(brokerTradeServerId, authorization) {
      var postBody = null;

      // verify the required parameter 'brokerTradeServerId' is set
      if (brokerTradeServerId === undefined || brokerTradeServerId === null) {
        throw new Error("Missing the required parameter 'brokerTradeServerId' when calling apiBrokerInitDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerInitDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': brokerTradeServerId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokerInitData2.default;

      return this.apiClient.callApi('/api/broker/initData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get broker initial data
     * @param {String} brokerTradeServerId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */

  }, {
    key: 'apiBrokerInitDataGet',
    value: function apiBrokerInitDataGet(brokerTradeServerId, authorization) {
      return this.apiBrokerInitDataGetWithHttpInfo(brokerTradeServerId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo',
    value: function apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerManagersAccountsOnlineInfoUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/managersAccounts/onlineInfo/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerManagersAccountsOnlineInfoUpdatePost',
    value: function apiBrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodAccrueProfitsPostWithHttpInfo',
    value: function apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodAccrueProfitsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/accrueProfits', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodAccrueProfitsPost',
    value: function apiBrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment period
     * @param {String} investmentProgramId 
     * @param {Number} currentBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodClosePostWithHttpInfo',
    value: function apiBrokerPeriodClosePostWithHttpInfo(investmentProgramId, currentBalance, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'currentBalance' is set
      if (currentBalance === undefined || currentBalance === null) {
        throw new Error("Missing the required parameter 'currentBalance' when calling apiBrokerPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodClosePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'currentBalance': currentBalance
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment period
     * @param {String} investmentProgramId 
     * @param {Number} currentBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodClosePost',
    value: function apiBrokerPeriodClosePost(investmentProgramId, currentBalance, authorization) {
      return this.apiBrokerPeriodClosePostWithHttpInfo(investmentProgramId, currentBalance, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment program
     * @param {String} investmentProgramId 
     * @param {Number} managerBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodProcessClosingProgramPostWithHttpInfo',
    value: function apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(investmentProgramId, managerBalance, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'managerBalance' is set
      if (managerBalance === undefined || managerBalance === null) {
        throw new Error("Missing the required parameter 'managerBalance' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'managerBalance': managerBalance
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/processClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment program
     * @param {String} investmentProgramId 
     * @param {Number} managerBalance 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodProcessClosingProgramPost',
    value: function apiBrokerPeriodProcessClosingProgramPost(investmentProgramId, managerBalance, authorization) {
      return this.apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(investmentProgramId, managerBalance, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Process investment requests
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo',
    value: function apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/period/processInvestmentRequests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Process investment requests
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerPeriodProcessInvestmentRequestsPost',
    value: function apiBrokerPeriodProcessInvestmentRequestsPost(investmentProgramId, authorization) {
      return this.apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} investmentProgramId 
     * @param {Number} investorLossShare 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo',
    value: function apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(investmentProgramId, investorLossShare, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'investorLossShare' is set
      if (investorLossShare === undefined || investorLossShare === null) {
        throw new Error("Missing the required parameter 'investorLossShare' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId,
        'investorLossShare': investorLossShare
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/reevaluateManagerToken', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} investmentProgramId 
     * @param {Number} investorLossShare 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodReevaluateManagerTokenPost',
    value: function apiBrokerPeriodReevaluateManagerTokenPost(investmentProgramId, investorLossShare, authorization) {
      return this.apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(investmentProgramId, investorLossShare, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodSetStartValuesPostWithHttpInfo',
    value: function apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodSetStartValuesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/setStartValues', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodSetStartValuesPost',
    value: function apiBrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Terminate program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodTerminatePostWithHttpInfo',
    value: function apiBrokerPeriodTerminatePostWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodTerminatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodTerminatePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/terminate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Terminate program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodTerminatePost',
    value: function apiBrokerPeriodTerminatePost(investmentProgramId, authorization) {
      return this.apiBrokerPeriodTerminatePostWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get data for closing investment period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */

  }, {
    key: 'apiBrokerPeriodlosingDataGetWithHttpInfo',
    value: function apiBrokerPeriodlosingDataGetWithHttpInfo(investmentProgramId, authorization) {
      var postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiBrokerPeriodlosingDataGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodlosingDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': investmentProgramId
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ClosePeriodData2.default;

      return this.apiClient.callApi('/api/broker/period/сlosingData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get data for closing investment period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */

  }, {
    key: 'apiBrokerPeriodlosingDataGet',
    value: function apiBrokerPeriodlosingDataGet(investmentProgramId, authorization) {
      return this.apiBrokerPeriodlosingDataGetWithHttpInfo(investmentProgramId, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerTradesIpfsHashUpdatePostWithHttpInfo',
    value: function apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesIpfsHashUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/trades/ipfsHash/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerTradesIpfsHashUpdatePost',
    value: function apiBrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerTradesNewPostWithHttpInfo',
    value: function apiBrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/trades/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerTradesNewPost',
    value: function apiBrokerTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesNewPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * New open trades event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewOpenTradesEvent} opts.trades 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerTradesOpenTradesNewPostWithHttpInfo',
    value: function apiBrokerTradesOpenTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['trades'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesOpenTradesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/trades/openTrades/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * New open trades event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewOpenTradesEvent} opts.trades 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerTradesOpenTradesNewPost',
    value: function apiBrokerTradesOpenTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesOpenTradesNewPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return BrokerApi;
}();

exports.default = BrokerApi;