/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CopyTradingAccountsList from '../model/CopyTradingAccountsList';
import ErrorViewModel from '../model/ErrorViewModel';
import TradesSignalSlaveViewModel from '../model/TradesSignalSlaveViewModel';

/**
* Signal service.
* @class SignalApi
* @version v1.0
*/
export default class SignalApi {

    /**
    * Constructs a new SignalApi. 
    * @function SignalApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {SignalApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      v10SignalAccountsGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalAccountsGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CopyTradingAccountsList;

      return this.apiClient.callApi(
        '/v1.0/signal/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get copytrading accounts
     * @function SignalApi#v10SignalAccountsGet
     * @param {String} authorization JWT access token
     * @return {Promise<CopyTradingAccountsList>} a Promise, with an object containing data of type CopyTradingAccountsList and HTTP response
     */
      v10SignalAccountsGet(authorization) {
      return this.v10SignalAccountsGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10SignalAttachByIdPostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalAttachByIdPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalAttachByIdPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Mode': opts['mode'],
        'Percent': opts['percent'],
        'OpenTolerancePercent': opts['openTolerancePercent'],
        'FixedVolume': opts['fixedVolume'],
        'FixedCurrency': opts['fixedCurrency'],
        'InitialDepositCurrency': opts['initialDepositCurrency'],
        'InitialDepositAmount': opts['initialDepositAmount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/attach/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribe to programs signals
     * @function SignalApi#v10SignalAttachByIdPost
     * @param {String} id Program Id
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.mode] 
     * @param {Number} [opts.percent] 
     * @param {Number} [opts.openTolerancePercent] 
     * @param {Number} [opts.fixedVolume] 
     * @param {String} [opts.fixedCurrency] 
     * @param {String} [opts.initialDepositCurrency] 
     * @param {Number} [opts.initialDepositAmount] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10SignalAttachByIdPost(id, authorization, opts) {
      return this.v10SignalAttachByIdPostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10SignalDetachByIdPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10SignalDetachByIdPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalDetachByIdPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/detach/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribe from program signals
     * @function SignalApi#v10SignalDetachByIdPost
     * @param {String} id Program id
     * @param {String} authorization JWT access token
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10SignalDetachByIdPost(id, authorization) {
      return this.v10SignalDetachByIdPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10SignalTradesOpenGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesSignalSlaveViewModel;

      return this.apiClient.callApi(
        '/v1.0/signal/trades/open', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investors signals open trades
     * @function SignalApi#v10SignalTradesOpenGet
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {Promise<TradesSignalSlaveViewModel>} a Promise, with an object containing data of type TradesSignalSlaveViewModel and HTTP response
     */
      v10SignalTradesOpenGet(opts) {
      return this.v10SignalTradesOpenGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10SignalUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10SignalUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'Mode': opts['mode'],
        'Percent': opts['percent'],
        'OpenTolerancePercent': opts['openTolerancePercent'],
        'FixedVolume': opts['fixedVolume'],
        'FixedCurrency': opts['fixedCurrency'],
        'InitialDepositCurrency': opts['initialDepositCurrency'],
        'InitialDepositAmount': opts['initialDepositAmount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/signal/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update signal subscription settings
     * @function SignalApi#v10SignalUpdatePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.id] Program id
     * @param {String} [opts.mode] 
     * @param {Number} [opts.percent] 
     * @param {Number} [opts.openTolerancePercent] 
     * @param {Number} [opts.fixedVolume] 
     * @param {String} [opts.fixedCurrency] 
     * @param {String} [opts.initialDepositCurrency] 
     * @param {Number} [opts.initialDepositAmount] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10SignalUpdatePost(authorization, opts) {
      return this.v10SignalUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
