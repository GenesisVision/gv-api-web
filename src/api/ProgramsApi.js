/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import ProgramBalanceChartOld from '../model/ProgramBalanceChartOld';
import ProgramDetailsFullOld from '../model/ProgramDetailsFullOld';
import ProgramPeriodsViewModel from '../model/ProgramPeriodsViewModel';
import ProgramProfitChartOld from '../model/ProgramProfitChartOld';
import ProgramSets from '../model/ProgramSets';
import ProgramsListOld from '../model/ProgramsListOld';
import SignalProviderSubscribers from '../model/SignalProviderSubscribers';
import TradesViewModel from '../model/TradesViewModel';

/**
* Programs service.
* @class ProgramsApi
* @version v1.0
*/
export default class ProgramsApi {

    /**
    * Constructs a new ProgramsApi. 
    * @function ProgramsApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {ProgramsApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      addToFavoritesWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addToFavorites");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addToFavorites");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/favorite/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add to favorites
     * @function ProgramsApi#addToFavorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      addToFavorites(id, authorization) {
      return this.addToFavoritesWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      exportProgramPeriodsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportProgramPeriods");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'NumberMin': opts['numberMin'],
        'NumberMax': opts['numberMax'],
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/periods/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export periods
     * @function ProgramsApi#exportProgramPeriods
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {Number} [opts.numberMin] 
     * @param {Number} [opts.numberMax] 
     * @param {String} [opts.status] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<'Blob'>} a Promise, with an object containing data of type 'Blob' and HTTP response
     */
      exportProgramPeriods(id, opts) {
      return this.exportProgramPeriodsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      exportProgramPeriodsFinStatisticWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportProgramPeriodsFinStatistic");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling exportProgramPeriodsFinStatistic");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'NumberMin': opts['numberMin'],
        'NumberMax': opts['numberMax'],
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/periods/export/statistic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export period financial statistic
     * @function ProgramsApi#exportProgramPeriodsFinStatistic
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {Number} [opts.numberMin] 
     * @param {Number} [opts.numberMax] 
     * @param {String} [opts.status] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<'Blob'>} a Promise, with an object containing data of type 'Blob' and HTTP response
     */
      exportProgramPeriodsFinStatistic(id, authorization, opts) {
      return this.exportProgramPeriodsFinStatisticWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      exportTradesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportTrades");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'Symbol': opts['symbol'],
        'Sorting': opts['sorting'],
        'AccountId': opts['accountId'],
        'AccountCurrency': opts['accountCurrency'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/trades/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export trades
     * @function ProgramsApi#exportTrades
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {String} [opts.symbol] 
     * @param {String} [opts.sorting] 
     * @param {String} [opts.accountId] 
     * @param {String} [opts.accountCurrency] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<'Blob'>} a Promise, with an object containing data of type 'Blob' and HTTP response
     */
      exportTrades(id, opts) {
      return this.exportTradesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramBalanceChartWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramBalanceChart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'MaxPointCount': opts['maxPointCount'],
        'Currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramBalanceChartOld;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/charts/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program balance chart
     * @function ProgramsApi#getProgramBalanceChart
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {Number} [opts.maxPointCount] 
     * @param {String} [opts.currency] 
     * @return {CancelablePromise<ProgramBalanceChartOld>} a Promise, with an object containing data of type ProgramBalanceChartOld and HTTP response
     */
      getProgramBalanceChart(id, opts) {
      return this.getProgramBalanceChartWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramDetailsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramDetails");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'currencySecondary': opts['currencySecondary']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramDetailsFullOld;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program details
     * @function ProgramsApi#getProgramDetails
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.authorization] 
     * @param {String} [opts.currencySecondary] 
     * @return {CancelablePromise<ProgramDetailsFullOld>} a Promise, with an object containing data of type ProgramDetailsFullOld and HTTP response
     */
      getProgramDetails(id, opts) {
      return this.getProgramDetailsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramOpenTradesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramOpenTrades");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Symbol': opts['symbol'],
        'AccountId': opts['accountId'],
        'AccountCurrency': opts['accountCurrency'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/trades/open', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Open positions
     * @function ProgramsApi#getProgramOpenTrades
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {String} [opts.symbol] 
     * @param {String} [opts.accountId] 
     * @param {String} [opts.accountCurrency] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<TradesViewModel>} a Promise, with an object containing data of type TradesViewModel and HTTP response
     */
      getProgramOpenTrades(id, opts) {
      return this.getProgramOpenTradesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramPeriodsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramPeriods");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'NumberMin': opts['numberMin'],
        'NumberMax': opts['numberMax'],
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramPeriodsViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/periods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program periods
     * @function ProgramsApi#getProgramPeriods
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.authorization] 
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {Number} [opts.numberMin] 
     * @param {Number} [opts.numberMax] 
     * @param {String} [opts.status] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ProgramPeriodsViewModel>} a Promise, with an object containing data of type ProgramPeriodsViewModel and HTTP response
     */
      getProgramPeriods(id, opts) {
      return this.getProgramPeriodsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramProfitChartWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramProfitChart");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'MaxPointCount': opts['maxPointCount'],
        'Currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramProfitChartOld;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/charts/profit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program profit chart
     * @function ProgramsApi#getProgramProfitChart
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {Number} [opts.maxPointCount] 
     * @param {String} [opts.currency] 
     * @return {CancelablePromise<ProgramProfitChartOld>} a Promise, with an object containing data of type ProgramProfitChartOld and HTTP response
     */
      getProgramProfitChart(id, opts) {
      return this.getProgramProfitChartWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramSetsWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramSets");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramSets;

      return this.apiClient.callApi(
        '/v1.0/programs/sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs sets
     * @function ProgramsApi#getProgramSets
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramSets>} a Promise, with an object containing data of type ProgramSets and HTTP response
     */
      getProgramSets(authorization) {
      return this.getProgramSetsWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramSubscribersWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramSubscribers");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramSubscribers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignalProviderSubscribers;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/subscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Signal subscribers
     * @function ProgramsApi#getProgramSubscribers
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.status] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<SignalProviderSubscribers>} a Promise, with an object containing data of type SignalProviderSubscribers and HTTP response
     */
      getProgramSubscribers(id, authorization, opts) {
      return this.getProgramSubscribersWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramTradesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramTrades");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'Symbol': opts['symbol'],
        'Sorting': opts['sorting'],
        'AccountId': opts['accountId'],
        'AccountCurrency': opts['accountCurrency'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Trade history
     * @function ProgramsApi#getProgramTrades
     * @param {String} id 
     * @param {Object} [opts] Optional parameters
     * @param {Date} [opts.dateFrom] 
     * @param {Date} [opts.dateTo] 
     * @param {String} [opts.symbol] 
     * @param {String} [opts.sorting] 
     * @param {String} [opts.accountId] 
     * @param {String} [opts.accountCurrency] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<TradesViewModel>} a Promise, with an object containing data of type TradesViewModel and HTTP response
     */
      getProgramTrades(id, opts) {
      return this.getProgramTradesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'LevelMin': opts['levelMin'],
        'LevelMax': opts['levelMax'],
        'LevelsSet': this.apiClient.buildCollectionParam(opts['levelsSet'], 'multi'),
        'ProfitAvgMin': opts['profitAvgMin'],
        'ProfitAvgMax': opts['profitAvgMax'],
        'Sorting': opts['sorting'],
        'ProgramCurrency': opts['programCurrency'],
        'CurrencySecondary': opts['currencySecondary'],
        'Currency': opts['currency'],
        'LevelUpFrom': opts['levelUpFrom'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'IsSignal': opts['isSignal'],
        'StatisticDateFrom': opts['statisticDateFrom'],
        'StatisticDateTo': opts['statisticDateTo'],
        'ChartPointsCount': opts['chartPointsCount'],
        'Mask': opts['mask'],
        'FacetId': opts['facetId'],
        'IsFavorite': opts['isFavorite'],
        'IsEnabled': opts['isEnabled'],
        'HasInvestorsForAll': opts['hasInvestorsForAll'],
        'HasInvestorsForClosed': opts['hasInvestorsForClosed'],
        'Ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'ForceUseIdsList': opts['forceUseIdsList'],
        'ManagerId': opts['managerId'],
        'ProgramManagerId': opts['programManagerId'],
        'Status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsListOld;

      return this.apiClient.callApi(
        '/v1.0/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs list
     * @function ProgramsApi#getPrograms
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.authorization] 
     * @param {Number} [opts.levelMin] 
     * @param {Number} [opts.levelMax] 
     * @param {Array<Number>} [opts.levelsSet] 
     * @param {Number} [opts.profitAvgMin] 
     * @param {Number} [opts.profitAvgMax] 
     * @param {String} [opts.sorting] 
     * @param {String} [opts.programCurrency] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.currency] 
     * @param {Number} [opts.levelUpFrom] 
     * @param {Array<String>} [opts.tags] 
     * @param {Boolean} [opts.isSignal] 
     * @param {Date} [opts.statisticDateFrom] 
     * @param {Date} [opts.statisticDateTo] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.mask] 
     * @param {String} [opts.facetId] 
     * @param {Boolean} [opts.isFavorite] 
     * @param {Boolean} [opts.isEnabled] 
     * @param {Boolean} [opts.hasInvestorsForAll] 
     * @param {Boolean} [opts.hasInvestorsForClosed] 
     * @param {Array<String>} [opts.ids] 
     * @param {Boolean} [opts.forceUseIdsList] 
     * @param {String} [opts.managerId] 
     * @param {String} [opts.programManagerId] 
     * @param {Array<String>} [opts.status] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ProgramsListOld>} a Promise, with an object containing data of type ProgramsListOld and HTTP response
     */
      getPrograms(opts) {
      return this.getProgramsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      removeFromFavoritesWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeFromFavorites");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeFromFavorites");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/favorite/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove from favorites
     * @function ProgramsApi#removeFromFavorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      removeFromFavorites(id, authorization) {
      return this.removeFromFavoritesWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
