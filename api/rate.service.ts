/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/errorViewModel";
import { RatesModel } from "../model/ratesModel";

export class RateService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getRate(from: string, to: string): CancelablePromise<number>{
    return this.getRateWithHttpInfo(from, to)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRateWithHttpInfo(from: string, to: string){
    let postBody = null;
    
    // verify the required parameter "from" is set
    if (from === undefined || from === null) {
      throw new Error("Missing the required parameter \"from\" when calling getRate");
    }
    // verify the required parameter "to" is set
    if (to === undefined || to === null) {
      throw new Error("Missing the required parameter \"to\" when calling getRate");
    }

    let pathParams = { 
      "from": from,
      "to": to
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'number';

    return this.apiClient.callApi<number>(
      '/v1.0/rate/{from}/{to}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRateExchange(exchange: string, from: string, to: string): CancelablePromise<number>{
    return this.getRateExchangeWithHttpInfo(exchange, from, to)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRateExchangeWithHttpInfo(exchange: string, from: string, to: string){
    let postBody = null;
    
    // verify the required parameter "exchange" is set
    if (exchange === undefined || exchange === null) {
      throw new Error("Missing the required parameter \"exchange\" when calling getRateExchange");
    }
    // verify the required parameter "from" is set
    if (from === undefined || from === null) {
      throw new Error("Missing the required parameter \"from\" when calling getRateExchange");
    }
    // verify the required parameter "to" is set
    if (to === undefined || to === null) {
      throw new Error("Missing the required parameter \"to\" when calling getRateExchange");
    }

    let pathParams = { 
      "exchange": exchange,
      "from": from,
      "to": to
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'number';

    return this.apiClient.callApi<number>(
      '/v1.0/rate/{exchange}/{from}/{to}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRates(opts?: { 
    from?: Array<string>, 
    to?: Array<string>
  }): CancelablePromise<RatesModel>{
    return this.getRatesWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRatesWithHttpInfo(opts: { 
    from?: Array<string>, 
    to?: Array<string>
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "from": this.apiClient.buildCollectionParam(opts["from"], "multi"),
      "to": this.apiClient.buildCollectionParam(opts["to"], "multi")
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = RatesModel;

    return this.apiClient.callApi<RatesModel>(
      '/v1.0/rate', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
