/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import FundAssetPart from '../model/FundAssetPart';
import FundInvestInfo from '../model/FundInvestInfo';
import FundsList from '../model/FundsList';
import ManagerAssets from '../model/ManagerAssets';
import ManagerDashboard from '../model/ManagerDashboard';
import ManagerFundWithdrawInfo from '../model/ManagerFundWithdrawInfo';
import ManagerPortfolioEvents from '../model/ManagerPortfolioEvents';
import ManagerProfile from '../model/ManagerProfile';
import ManagerProfileDetails from '../model/ManagerProfileDetails';
import ManagerProgramCreateResult from '../model/ManagerProgramCreateResult';
import ManagerProgramWithdrawInfo from '../model/ManagerProgramWithdrawInfo';
import NewFundRequest from '../model/NewFundRequest';
import NewProgramRequest from '../model/NewProgramRequest';
import ProgramInvestInfo from '../model/ProgramInvestInfo';
import ProgramMinimumDeposit from '../model/ProgramMinimumDeposit';
import ProgramPwdUpdate from '../model/ProgramPwdUpdate';
import ProgramRequests from '../model/ProgramRequests';
import ProgramUpdate from '../model/ProgramUpdate';
import ProgramsList from '../model/ProgramsList';
import TwoFactorAuthenticator from '../model/TwoFactorAuthenticator';

/**
* Manager service.
* @class ManagerApi
* @version v1.0
*/
export default class ManagerApi {

    /**
    * Constructs a new ManagerApi. 
    * @function ManagerApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {ManagerApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      v10ManagerAssetsGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerAssetsGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerAssets;

      return this.apiClient.callApi(
        '/v1.0/manager/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager assets list
     * @function ManagerApi#v10ManagerAssetsGet
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerAssets>} a Promise, with an object containing data of type ManagerAssets and HTTP response
     */
      v10ManagerAssetsGet(authorization) {
      return this.v10ManagerAssetsGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerByIdDetailsGetWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerByIdDetailsGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProfileDetails;

      return this.apiClient.callApi(
        '/v1.0/manager/{id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager details
     * @function ManagerApi#v10ManagerByIdDetailsGet
     * @param {String} id 
     * @return {CancelablePromise<ManagerProfileDetails>} a Promise, with an object containing data of type ManagerProfileDetails and HTTP response
     */
      v10ManagerByIdDetailsGet(id) {
      return this.v10ManagerByIdDetailsGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerByIdGetWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerByIdGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProfile;

      return this.apiClient.callApi(
        '/v1.0/manager/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager profile
     * @function ManagerApi#v10ManagerByIdGet
     * @param {String} id 
     * @return {CancelablePromise<ManagerProfile>} a Promise, with an object containing data of type ManagerProfile and HTTP response
     */
      v10ManagerByIdGet(id) {
      return this.v10ManagerByIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerEventsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerEventsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerPortfolioEvents;

      return this.apiClient.callApi(
        '/v1.0/manager/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager events
     * @function ManagerApi#v10ManagerEventsGet
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.assetId] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.type] 
     * @param {String} [opts.assetType] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ManagerPortfolioEvents>} a Promise, with an object containing data of type ManagerPortfolioEvents and HTTP response
     */
      v10ManagerEventsGet(authorization, opts) {
      return this.v10ManagerEventsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdAssetsUpdatePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['assets'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdAssetsUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdAssetsUpdatePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/assets/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update fund assets parts
     * @function ManagerApi#v10ManagerFundsByIdAssetsUpdatePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Array<FundAssetPart>} [opts.assets] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsByIdAssetsUpdatePost(id, authorization, opts) {
      return this.v10ManagerFundsByIdAssetsUpdatePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdClosePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdClosePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close existing fund
     * @function ManagerApi#v10ManagerFundsByIdClosePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.twoFactorCode] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsByIdClosePost(id, authorization, opts) {
      return this.v10ManagerFundsByIdClosePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagerFundsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdInvestByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deposit.  Invest in GVT if currency is empty
     * @function ManagerApi#v10ManagerFundsByIdInvestByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, opts) {
      return this.v10ManagerFundsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagerFundsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdInvestInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundInvestInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the fund
     * @function ManagerApi#v10ManagerFundsByIdInvestInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<FundInvestInfo>} a Promise, with an object containing data of type FundInvestInfo and HTTP response
     */
      v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagerFundsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10ManagerFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10ManagerFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment program/fund requests
     * @function ManagerApi#v10ManagerFundsByIdRequestsBySkipByTakeGet
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */
      v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10ManagerFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdUpdatePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdUpdatePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update investment program/fund details
     * @function ManagerApi#v10ManagerFundsByIdUpdatePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsByIdUpdatePost(id, authorization, opts) {
      return this.v10ManagerFundsByIdUpdatePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling v10ManagerFundsByIdWithdrawByPercentPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdWithdrawByPercentPost");
      }


      let pathParams = {
        'id': id,
        'percent': percent
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/withdraw/{percent}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from fund. Percent is % of manager total money.  Withdraw in GVT if currency is empty
     * @function ManagerApi#v10ManagerFundsByIdWithdrawByPercentPost
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, opts) {
      return this.v10ManagerFundsByIdWithdrawByPercentPostWithHttpInfo(id, percent, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerFundWithdrawInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from fund
     * @function ManagerApi#v10ManagerFundsByIdWithdrawInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerFundWithdrawInfo>} a Promise, with an object containing data of type ManagerFundWithdrawInfo and HTTP response
     */
      v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagerFundsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create fund
     * @function ManagerApi#v10ManagerFundsCreatePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {NewFundRequest} [opts.request] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsCreatePost(authorization, opts) {
      return this.v10ManagerFundsCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundsList;

      return this.apiClient.callApi(
        '/v1.0/manager/funds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager funds
     * @function ManagerApi#v10ManagerFundsGet
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<FundsList>} a Promise, with an object containing data of type FundsList and HTTP response
     */
      v10ManagerFundsGet(authorization, opts) {
      return this.v10ManagerFundsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsInvestmentAmountGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsInvestmentAmountGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/manager/funds/investment/amount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get GVT investment to create fund
     * @function ManagerApi#v10ManagerFundsInvestmentAmountGet
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<'Number'>} a Promise, with an object containing data of type 'Number' and HTTP response
     */
      v10ManagerFundsInvestmentAmountGet(authorization) {
      return this.v10ManagerFundsInvestmentAmountGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerFundsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerFundsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerFundsRequestsByIdCancelPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/funds/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel investment program/fund request
     * @function ManagerApi#v10ManagerFundsRequestsByIdCancelPost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerFundsRequestsByIdCancelPost(id, authorization) {
      return this.v10ManagerFundsRequestsByIdCancelPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerDashboard;

      return this.apiClient.callApi(
        '/v1.0/manager', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager dashboard
     * @function ManagerApi#v10ManagerGet
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.assetId] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.type] 
     * @param {String} [opts.assetType] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ManagerDashboard>} a Promise, with an object containing data of type ManagerDashboard and HTTP response
     */
      v10ManagerGet(authorization, opts) {
      return this.v10ManagerGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerPrograms2faConfirmPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerPrograms2faConfirmPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId'],
        'code': opts['code']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/2fa/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm 2FA for program if required (for brokers like Huobi)
     * @function ManagerApi#v10ManagerPrograms2faConfirmPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {String} [opts.code] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerPrograms2faConfirmPost(authorization, opts) {
      return this.v10ManagerPrograms2faConfirmPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerPrograms2faGetGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerPrograms2faGetGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorAuthenticator;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/2fa/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get 2FA for program if needed
     * @function ManagerApi#v10ManagerPrograms2faGetGet
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @return {CancelablePromise<TwoFactorAuthenticator>} a Promise, with an object containing data of type TwoFactorAuthenticator and HTTP response
     */
      v10ManagerPrograms2faGetGet(authorization, opts) {
      return this.v10ManagerPrograms2faGetGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdClosePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdClosePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'twoFactorCode': opts['twoFactorCode']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close existing investment program
     * @function ManagerApi#v10ManagerProgramsByIdClosePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.twoFactorCode] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdClosePost(id, authorization, opts) {
      return this.v10ManagerProgramsByIdClosePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagerProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdInvestByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deposit  Invest in GVT if currency is empty
     * @function ManagerApi#v10ManagerProgramsByIdInvestByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, opts) {
      return this.v10ManagerProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramInvestInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the program
     * @function ManagerApi#v10ManagerProgramsByIdInvestInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramInvestInfo>} a Promise, with an object containing data of type ProgramInvestInfo and HTTP response
     */
      v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagerProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdPasswordChangePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdPasswordChangePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdPasswordChangePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/password/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change program password
     * @function ManagerApi#v10ManagerProgramsByIdPasswordChangePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramPwdUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdPasswordChangePost(id, authorization, opts) {
      return this.v10ManagerProgramsByIdPasswordChangePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdPeriodClosePostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdPeriodClosePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close current period
     * @function ManagerApi#v10ManagerProgramsByIdPeriodClosePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdPeriodClosePost(id, authorization) {
      return this.v10ManagerProgramsByIdPeriodClosePostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment program/fund requests
     * @function ManagerApi#v10ManagerProgramsByIdRequestsBySkipByTakeGet
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */
      v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10ManagerProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdUpdatePostWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdUpdatePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdUpdatePost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update investment program/fund details
     * @function ManagerApi#v10ManagerProgramsByIdUpdatePost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ProgramUpdate} [opts.model] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdUpdatePost(id, authorization, opts) {
      return this.v10ManagerProgramsByIdUpdatePostWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagerProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdWithdrawByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/withdraw/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from investment program in GVT
     * @function ManagerApi#v10ManagerProgramsByIdWithdrawByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization) {
      return this.v10ManagerProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProgramWithdrawInfo;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from investment program
     * @function ManagerApi#v10ManagerProgramsByIdWithdrawInfoByCurrencyGet
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerProgramWithdrawInfo>} a Promise, with an object containing data of type ManagerProgramWithdrawInfo and HTTP response
     */
      v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10ManagerProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsByIdWithdrawMultiByAmountPostWithHttpInfo(id, amount, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/{id}/withdraw/multi/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from investment program in program currency
     * @function ManagerApi#v10ManagerProgramsByIdWithdrawMultiByAmountPost
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization) {
      return this.v10ManagerProgramsByIdWithdrawMultiByAmountPostWithHttpInfo(id, amount, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerProgramCreateResult;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an investment program
     * @function ManagerApi#v10ManagerProgramsCreatePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {NewProgramRequest} [opts.request] 
     * @return {CancelablePromise<ManagerProgramCreateResult>} a Promise, with an object containing data of type ManagerProgramCreateResult and HTTP response
     */
      v10ManagerProgramsCreatePost(authorization, opts) {
      return this.v10ManagerProgramsCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsList;

      return this.apiClient.callApi(
        '/v1.0/manager/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Manager programs
     * @function ManagerApi#v10ManagerProgramsGet
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ProgramsList>} a Promise, with an object containing data of type ProgramsList and HTTP response
     */
      v10ManagerProgramsGet(authorization, opts) {
      return this.v10ManagerProgramsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsInvestmentAmountGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsInvestmentAmountGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramMinimumDeposit;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/investment/amount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get investment amount to create program
     * @function ManagerApi#v10ManagerProgramsInvestmentAmountGet
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramMinimumDeposit>} a Promise, with an object containing data of type ProgramMinimumDeposit and HTTP response
     */
      v10ManagerProgramsInvestmentAmountGet(authorization) {
      return this.v10ManagerProgramsInvestmentAmountGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ManagerProgramsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerProgramsRequestsByIdCancelPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/programs/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel investment program/fund request
     * @function ManagerApi#v10ManagerProgramsRequestsByIdCancelPost
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerProgramsRequestsByIdCancelPost(id, authorization) {
      return this.v10ManagerProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10ManagerRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10ManagerRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/manager/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all requests
     * @function ManagerApi#v10ManagerRequestsBySkipByTakeGet
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequests>} a Promise, with an object containing data of type ProgramRequests and HTTP response
     */
      v10ManagerRequestsBySkipByTakeGet(skip, take, authorization) {
      return this.v10ManagerRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerSignalCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerSignalCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'ProgramId': opts['programId'],
        'SubscriptionFee': opts['subscriptionFee'],
        'SuccessFee': opts['successFee']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/signal/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Make manager&#39;s program signal provider
     * @function ManagerApi#v10ManagerSignalCreatePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {Number} [opts.subscriptionFee] 
     * @param {Number} [opts.successFee] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerSignalCreatePost(authorization, opts) {
      return this.v10ManagerSignalCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10ManagerSignalEditPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ManagerSignalEditPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'ProgramId': opts['programId'],
        'SubscriptionFee': opts['subscriptionFee'],
        'SuccessFee': opts['successFee']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/manager/signal/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Make manager&#39;s program signal provider
     * @function ManagerApi#v10ManagerSignalEditPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.programId] 
     * @param {Number} [opts.subscriptionFee] 
     * @param {Number} [opts.successFee] 
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      v10ManagerSignalEditPost(authorization, opts) {
      return this.v10ManagerSignalEditPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
