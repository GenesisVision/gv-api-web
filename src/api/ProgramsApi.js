/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorViewModel', 'model/LevelUpSummary', 'model/ProgramBalanceChart', 'model/ProgramDetailsFull', 'model/ProgramPeriodsViewModel', 'model/ProgramProfitChart', 'model/ProgramSets', 'model/ProgramsList', 'model/SignalProviderSubscribers', 'model/TradesViewModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorViewModel'), require('../model/LevelUpSummary'), require('../model/ProgramBalanceChart'), require('../model/ProgramDetailsFull'), require('../model/ProgramPeriodsViewModel'), require('../model/ProgramProfitChart'), require('../model/ProgramSets'), require('../model/ProgramsList'), require('../model/SignalProviderSubscribers'), require('../model/TradesViewModel'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.ProgramsApi = factory(root.CoreApiV10.ApiClient, root.CoreApiV10.ErrorViewModel, root.CoreApiV10.LevelUpSummary, root.CoreApiV10.ProgramBalanceChart, root.CoreApiV10.ProgramDetailsFull, root.CoreApiV10.ProgramPeriodsViewModel, root.CoreApiV10.ProgramProfitChart, root.CoreApiV10.ProgramSets, root.CoreApiV10.ProgramsList, root.CoreApiV10.SignalProviderSubscribers, root.CoreApiV10.TradesViewModel);
  }
}(this, function(ApiClient, ErrorViewModel, LevelUpSummary, ProgramBalanceChart, ProgramDetailsFull, ProgramPeriodsViewModel, ProgramProfitChart, ProgramSets, ProgramsList, SignalProviderSubscribers, TradesViewModel) {
  'use strict';

  /**
   * Programs service.
   * @module api/ProgramsApi
   * @version v1.0
   */

  /**
   * Constructs a new ProgramsApi. 
   * @alias module:api/ProgramsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Program balance chart
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.maxPointCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramBalanceChart} and HTTP response
     */
    this.v10ProgramsByIdChartsBalanceGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdChartsBalanceGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'MaxPointCount': opts['maxPointCount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramBalanceChart;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/charts/balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program balance chart
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.maxPointCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramBalanceChart}
     */
    this.v10ProgramsByIdChartsBalanceGet = function(id, opts) {
      return this.v10ProgramsByIdChartsBalanceGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Program profit chart
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.maxPointCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramProfitChart} and HTTP response
     */
    this.v10ProgramsByIdChartsProfitGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdChartsProfitGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'MaxPointCount': opts['maxPointCount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramProfitChart;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/charts/profit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program profit chart
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.maxPointCount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramProfitChart}
     */
    this.v10ProgramsByIdChartsProfitGet = function(id, opts) {
      return this.v10ProgramsByIdChartsProfitGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add to favorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10ProgramsByIdFavoriteAddPostWithHttpInfo = function(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdFavoriteAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ProgramsByIdFavoriteAddPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/favorite/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add to favorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10ProgramsByIdFavoriteAddPost = function(id, authorization) {
      return this.v10ProgramsByIdFavoriteAddPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove from favorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10ProgramsByIdFavoriteRemovePostWithHttpInfo = function(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdFavoriteRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ProgramsByIdFavoriteRemovePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/favorite/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove from favorites
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10ProgramsByIdFavoriteRemovePost = function(id, authorization) {
      return this.v10ProgramsByIdFavoriteRemovePostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Program details
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/String} opts.currencySecondary 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramDetailsFull} and HTTP response
     */
    this.v10ProgramsByIdGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'currencySecondary': opts['currencySecondary'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramDetailsFull;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program details
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/String} opts.currencySecondary 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramDetailsFull}
     */
    this.v10ProgramsByIdGet = function(id, opts) {
      return this.v10ProgramsByIdGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Program periods
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.numberMin 
     * @param {Number} opts.numberMax 
     * @param {module:model/String} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramPeriodsViewModel} and HTTP response
     */
    this.v10ProgramsByIdPeriodsGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdPeriodsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'NumberMin': opts['numberMin'],
        'NumberMax': opts['numberMax'],
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramPeriodsViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/periods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Program periods
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.numberMin 
     * @param {Number} opts.numberMax 
     * @param {module:model/String} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramPeriodsViewModel}
     */
    this.v10ProgramsByIdPeriodsGet = function(id, opts) {
      return this.v10ProgramsByIdPeriodsGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Signal subscribers
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignalProviderSubscribers} and HTTP response
     */
    this.v10ProgramsByIdSubscribersGetWithHttpInfo = function(id, authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdSubscribersGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ProgramsByIdSubscribersGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'Status': opts['status'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = SignalProviderSubscribers;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/subscribers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Signal subscribers
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignalProviderSubscribers}
     */
    this.v10ProgramsByIdSubscribersGet = function(id, authorization, opts) {
      return this.v10ProgramsByIdSubscribersGetWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Trade history
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesViewModel} and HTTP response
     */
    this.v10ProgramsByIdTradesGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdTradesGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'Symbol': opts['symbol'],
        'Sorting': opts['sorting'],
        'AccountId': opts['accountId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Trade history
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {String} opts.symbol 
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesViewModel}
     */
    this.v10ProgramsByIdTradesGet = function(id, opts) {
      return this.v10ProgramsByIdTradesGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Open positions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.symbol 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TradesViewModel} and HTTP response
     */
    this.v10ProgramsByIdTradesOpenGetWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10ProgramsByIdTradesOpenGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'Sorting': opts['sorting'],
        'Symbol': opts['symbol'],
        'AccountId': opts['accountId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/v1.0/programs/{id}/trades/open', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Open positions
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {String} opts.symbol 
     * @param {String} opts.accountId 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TradesViewModel}
     */
    this.v10ProgramsByIdTradesOpenGet = function(id, opts) {
      return this.v10ProgramsByIdTradesOpenGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export trades
     * @param {String} programId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10ProgramsByProgramIdTradesExportGetWithHttpInfo = function(programId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling v10ProgramsByProgramIdTradesExportGet");
      }


      var pathParams = {
        'programId': programId
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/programs/{programId}/trades/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Export trades
     * @param {String} programId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10ProgramsByProgramIdTradesExportGet = function(programId, opts) {
      return this.v10ProgramsByProgramIdTradesExportGetWithHttpInfo(programId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Programs list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {Number} opts.levelMin 
     * @param {Number} opts.levelMax 
     * @param {Array.<Number>} opts.levelsSet 
     * @param {Number} opts.profitAvgMin 
     * @param {Number} opts.profitAvgMax 
     * @param {module:model/String} opts.sorting 
     * @param {module:model/String} opts.programCurrency 
     * @param {module:model/String} opts.currencySecondary 
     * @param {Number} opts.levelUpFrom 
     * @param {Array.<String>} opts.tags 
     * @param {Boolean} opts.isSignal 
     * @param {Date} opts.statisticDateFrom 
     * @param {Date} opts.statisticDateTo 
     * @param {Number} opts.chartPointsCount 
     * @param {String} opts.mask 
     * @param {String} opts.facetId 
     * @param {Boolean} opts.isFavorite 
     * @param {Boolean} opts.isEnabled 
     * @param {Boolean} opts.hasInvestorsForAll 
     * @param {Boolean} opts.hasInvestorsForClosed 
     * @param {Array.<String>} opts.ids 
     * @param {String} opts.managerId 
     * @param {String} opts.programManagerId 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramsList} and HTTP response
     */
    this.v10ProgramsGetWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'LevelMin': opts['levelMin'],
        'LevelMax': opts['levelMax'],
        'ProfitAvgMin': opts['profitAvgMin'],
        'ProfitAvgMax': opts['profitAvgMax'],
        'Sorting': opts['sorting'],
        'ProgramCurrency': opts['programCurrency'],
        'CurrencySecondary': opts['currencySecondary'],
        'LevelUpFrom': opts['levelUpFrom'],
        'IsSignal': opts['isSignal'],
        'StatisticDateFrom': opts['statisticDateFrom'],
        'StatisticDateTo': opts['statisticDateTo'],
        'ChartPointsCount': opts['chartPointsCount'],
        'Mask': opts['mask'],
        'FacetId': opts['facetId'],
        'IsFavorite': opts['isFavorite'],
        'IsEnabled': opts['isEnabled'],
        'HasInvestorsForAll': opts['hasInvestorsForAll'],
        'HasInvestorsForClosed': opts['hasInvestorsForClosed'],
        'ManagerId': opts['managerId'],
        'ProgramManagerId': opts['programManagerId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
      };
      var collectionQueryParams = {
        'LevelsSet': {
          value: opts['levelsSet'],
          collectionFormat: 'multi'
        },
        'Tags': {
          value: opts['tags'],
          collectionFormat: 'multi'
        },
        'Ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
        'Status': {
          value: opts['status'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramsList;

      return this.apiClient.callApi(
        '/v1.0/programs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {Number} opts.levelMin 
     * @param {Number} opts.levelMax 
     * @param {Array.<Number>} opts.levelsSet 
     * @param {Number} opts.profitAvgMin 
     * @param {Number} opts.profitAvgMax 
     * @param {module:model/String} opts.sorting 
     * @param {module:model/String} opts.programCurrency 
     * @param {module:model/String} opts.currencySecondary 
     * @param {Number} opts.levelUpFrom 
     * @param {Array.<String>} opts.tags 
     * @param {Boolean} opts.isSignal 
     * @param {Date} opts.statisticDateFrom 
     * @param {Date} opts.statisticDateTo 
     * @param {Number} opts.chartPointsCount 
     * @param {String} opts.mask 
     * @param {String} opts.facetId 
     * @param {Boolean} opts.isFavorite 
     * @param {Boolean} opts.isEnabled 
     * @param {Boolean} opts.hasInvestorsForAll 
     * @param {Boolean} opts.hasInvestorsForClosed 
     * @param {Array.<String>} opts.ids 
     * @param {String} opts.managerId 
     * @param {String} opts.programManagerId 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramsList}
     */
    this.v10ProgramsGet = function(opts) {
      return this.v10ProgramsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Level up summary
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LevelUpSummary} and HTTP response
     */
    this.v10ProgramsLevelupSummaryGetWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = LevelUpSummary;

      return this.apiClient.callApi(
        '/v1.0/programs/levelup/summary', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Level up summary
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LevelUpSummary}
     */
    this.v10ProgramsLevelupSummaryGet = function(opts) {
      return this.v10ProgramsLevelupSummaryGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Programs sets
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramSets} and HTTP response
     */
    this.v10ProgramsSetsGetWithHttpInfo = function(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10ProgramsSetsGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ProgramSets;

      return this.apiClient.callApi(
        '/v1.0/programs/sets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs sets
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramSets}
     */
    this.v10ProgramsSetsGet = function(authorization) {
      return this.v10ProgramsSetsGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
