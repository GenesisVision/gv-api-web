/**
 * Core API v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DExchangeRequest from '../model/DExchangeRequest';
import DExchangeResponse from '../model/DExchangeResponse';
import ErrorViewModel from '../model/ErrorViewModel';

/**
* Dexchange service.
* @module api/DexchangeApi
* @version v2.0
*/
export default class DexchangeApi {

    /**
    * Constructs a new DexchangeApi. 
    * @alias module:api/DexchangeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/DExchangeRequest} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DExchangeResponse} and HTTP response
     */
    apiDexchangeNodePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiDexchangeNodePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DExchangeResponse;

      return this.apiClient.callApi(
        '/api/dexchange/node', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/DExchangeRequest} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DExchangeResponse}
     */
    apiDexchangeNodePost(authorization, opts) {
      return this.apiDexchangeNodePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
