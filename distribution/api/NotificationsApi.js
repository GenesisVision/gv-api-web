'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v1.0
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v1.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _NotificationList = require('../model/NotificationList');

var _NotificationList2 = _interopRequireDefault(_NotificationList);

var _NotificationSettingList = require('../model/NotificationSettingList');

var _NotificationSettingList2 = _interopRequireDefault(_NotificationSettingList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Notifications service.
* @module api/NotificationsApi
* @version v1.0
*/
var NotificationsApi = function () {

  /**
  * Constructs a new NotificationsApi. 
  * @alias module:api/NotificationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function NotificationsApi(apiClient) {
    _classCallCheck(this, NotificationsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * User notifications
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {Number} opts.skip 
   * @param {Number} opts.take 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationList} and HTTP response
   */


  _createClass(NotificationsApi, [{
    key: 'v10NotificationsGetWithHttpInfo',
    value: function v10NotificationsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10NotificationsGet");
      }

      var pathParams = {};
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _NotificationList2.default;

      return this.apiClient.callApi('/v1.0/notifications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * User notifications
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationList}
     */

  }, {
    key: 'v10NotificationsGet',
    value: function v10NotificationsGet(authorization, opts) {
      return this.v10NotificationsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Unread notifications count
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */

  }, {
    key: 'v10NotificationsNewGetWithHttpInfo',
    value: function v10NotificationsNewGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10NotificationsNewGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'Number';

      return this.apiClient.callApi('/v1.0/notifications/new', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Unread notifications count
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */

  }, {
    key: 'v10NotificationsNewGet',
    value: function v10NotificationsNewGet(authorization) {
      return this.v10NotificationsNewGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Add new setting
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.programId 
     * @param {String} opts.managerId 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.conditionType 
     * @param {Number} opts.conditionAmount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'v10NotificationsSettingsAddPostWithHttpInfo',
    value: function v10NotificationsSettingsAddPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10NotificationsSettingsAddPost");
      }

      var pathParams = {};
      var queryParams = {
        'Id': opts['id'],
        'ProgramId': opts['programId'],
        'ManagerId': opts['managerId'],
        'Type': opts['type'],
        'ConditionType': opts['conditionType'],
        'ConditionAmount': opts['conditionAmount']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/v1.0/notifications/settings/add', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Add new setting
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.programId 
     * @param {String} opts.managerId 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.conditionType 
     * @param {Number} opts.conditionAmount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'v10NotificationsSettingsAddPost',
    value: function v10NotificationsSettingsAddPost(authorization, opts) {
      return this.v10NotificationsSettingsAddPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * User settings
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationSettingList} and HTTP response
     */

  }, {
    key: 'v10NotificationsSettingsGetWithHttpInfo',
    value: function v10NotificationsSettingsGetWithHttpInfo(authorization) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10NotificationsSettingsGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _NotificationSettingList2.default;

      return this.apiClient.callApi('/v1.0/notifications/settings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * User settings
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationSettingList}
     */

  }, {
    key: 'v10NotificationsSettingsGet',
    value: function v10NotificationsSettingsGet(authorization) {
      return this.v10NotificationsSettingsGetWithHttpInfo(authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Remove setting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'v10NotificationsSettingsRemoveByIdPostWithHttpInfo',
    value: function v10NotificationsSettingsRemoveByIdPostWithHttpInfo(id, authorization) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10NotificationsSettingsRemoveByIdPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10NotificationsSettingsRemoveByIdPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/v1.0/notifications/settings/remove/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Remove setting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'v10NotificationsSettingsRemoveByIdPost',
    value: function v10NotificationsSettingsRemoveByIdPost(id, authorization) {
      return this.v10NotificationsSettingsRemoveByIdPostWithHttpInfo(id, authorization).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return NotificationsApi;
}();

exports.default = NotificationsApi;