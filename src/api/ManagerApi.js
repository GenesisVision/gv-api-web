/**
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokersFilter from '../model/BrokersFilter';
import BrokersViewModel from '../model/BrokersViewModel';
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ErrorViewModel from '../model/ErrorViewModel';
import ForgotPasswordViewModel from '../model/ForgotPasswordViewModel';
import Invest from '../model/Invest';
import InvestmentProgramBuyToken from '../model/InvestmentProgramBuyToken';
import InvestmentProgramRequests from '../model/InvestmentProgramRequests';
import InvestmentProgramRequestsFilter from '../model/InvestmentProgramRequestsFilter';
import InvestmentProgramUpdate from '../model/InvestmentProgramUpdate';
import InvestmentProgramViewModel from '../model/InvestmentProgramViewModel';
import InvestmentProgramsFilter from '../model/InvestmentProgramsFilter';
import InvestmentProgramsViewModel from '../model/InvestmentProgramsViewModel';
import LoginViewModel from '../model/LoginViewModel';
import ManagerDashboardProgramsFilter from '../model/ManagerDashboardProgramsFilter';
import ManagerDashboardStatistic from '../model/ManagerDashboardStatistic';
import ManagerInvestmentPrograms from '../model/ManagerInvestmentPrograms';
import NewInvestmentRequest from '../model/NewInvestmentRequest';
import PasswordModel from '../model/PasswordModel';
import ProfileFullViewModel from '../model/ProfileFullViewModel';
import ProfilePublicViewModel from '../model/ProfilePublicViewModel';
import RecoveryCodesViewModel from '../model/RecoveryCodesViewModel';
import RegisterManagerViewModel from '../model/RegisterManagerViewModel';
import ResetPasswordViewModel from '../model/ResetPasswordViewModel';
import TradesChartViewModel from '../model/TradesChartViewModel';
import TradesFilter from '../model/TradesFilter';
import TradesViewModel from '../model/TradesViewModel';
import TransactionsFilter from '../model/TransactionsFilter';
import TwoFactorAuthenticator from '../model/TwoFactorAuthenticator';
import TwoFactorAuthenticatorConfirm from '../model/TwoFactorAuthenticatorConfirm';
import TwoFactorStatus from '../model/TwoFactorStatus';
import UpdateProfileViewModel from '../model/UpdateProfileViewModel';
import WalletAddressViewModel from '../model/WalletAddressViewModel';
import WalletInvestmentPrograms from '../model/WalletInvestmentPrograms';
import WalletStatistic from '../model/WalletStatistic';
import WalletStatisticFilter from '../model/WalletStatisticFilter';
import WalletTransactionsViewModel from '../model/WalletTransactionsViewModel';
import WalletWithdrawRequestModel from '../model/WalletWithdrawRequestModel';
import WalletsViewModel from '../model/WalletsViewModel';

/**
* Manager service.
* @module api/ManagerApi
* @version v1
*/
export default class ManagerApi {

    /**
    * Constructs a new ManagerApi. 
    * @alias module:api/ManagerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiManagerAccountNewInvestmentRequestPost operation.
     * @callback module:api/ManagerApi~apiManagerAccountNewInvestmentRequestPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new investment request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewInvestmentRequest} opts.request 
     * @param {module:api/ManagerApi~apiManagerAccountNewInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiManagerAccountNewInvestmentRequestPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAccountNewInvestmentRequestPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/manager/account/newInvestmentRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faConfirmPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faConfirmPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA confirm
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TwoFactorAuthenticatorConfirm} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faConfirmPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiManagerAuth2faConfirmPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faConfirmPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faCreatePost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorAuthenticator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA create
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorAuthenticator}
     */
    apiManagerAuth2faCreatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorAuthenticator;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faDisablePost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA disable
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerAuth2faDisablePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faDisablePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faGet operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA status
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerAuth2faGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorStatus}
     */
    apiManagerAuth2faGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorStatus;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faRecoveryCodesNewPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faRecoveryCodesNewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA generate new recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faRecoveryCodesNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiManagerAuth2faRecoveryCodesNewPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faRecoveryCodesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa/recoveryCodes/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuth2faRecoveryCodesPost operation.
     * @callback module:api/ManagerApi~apiManagerAuth2faRecoveryCodesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryCodesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2FA recovery codes
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuth2faRecoveryCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryCodesViewModel}
     */
    apiManagerAuth2faRecoveryCodesPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuth2faRecoveryCodesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/api/manager/auth/2fa/recoveryCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthChangePasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerAuthChangePasswordPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuthChangePasswordPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthConfirmEmailPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthConfirmEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/ManagerApi~apiManagerAuthConfirmEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiManagerAuthConfirmEmailPost(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/manager/auth/confirmEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthForgotPasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password manager
     * @param {Object} opts Optional parameters
     * @param {module:model/ForgotPasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerAuthForgotPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/auth/forgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthResetPasswordPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * @param {Object} opts Optional parameters
     * @param {module:model/ResetPasswordViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiManagerAuthResetPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/manager/auth/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthSignInPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiManagerAuthSignInPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/manager/auth/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthSignUpPost operation.
     * @callback module:api/ManagerApi~apiManagerAuthSignUpPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register new manager
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterManagerViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerAuthSignUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerAuthSignUpPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/auth/signUp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerAuthUpdateTokenGet operation.
     * @callback module:api/ManagerApi~apiManagerAuthUpdateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerAuthUpdateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    apiManagerAuthUpdateTokenGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerAuthUpdateTokenGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/manager/auth/updateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerBrokersPost operation.
     * @callback module:api/ManagerApi~apiManagerBrokersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrokersViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all enabled trade servers
     * @param {Object} opts Optional parameters
     * @param {module:model/BrokersFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerBrokersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrokersViewModel}
     */
    apiManagerBrokersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokersViewModel;

      return this.apiClient.callApi(
        '/api/manager/brokers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardPendingProgramsGet operation.
     * @callback module:api/ManagerApi~apiManagerDashboardPendingProgramsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard pending programs
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerDashboardPendingProgramsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerInvestmentPrograms}
     */
    apiManagerDashboardPendingProgramsGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardPendingProgramsGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerInvestmentPrograms;

      return this.apiClient.callApi(
        '/api/manager/dashboard/pendingPrograms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardProgramsPost operation.
     * @callback module:api/ManagerApi~apiManagerDashboardProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard programs
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerDashboardProgramsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerDashboardProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerInvestmentPrograms}
     */
    apiManagerDashboardProgramsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardProgramsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerInvestmentPrograms;

      return this.apiClient.callApi(
        '/api/manager/dashboard/programs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerDashboardStatisticGet operation.
     * @callback module:api/ManagerApi~apiManagerDashboardStatisticGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerDashboardStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dashboard statistic
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerDashboardStatisticGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerDashboardStatistic}
     */
    apiManagerDashboardStatisticGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerDashboardStatisticGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerDashboardStatistic;

      return this.apiClient.callApi(
        '/api/manager/dashboard/statistic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentCancelInvestmentRequestPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentCancelInvestmentRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel investment request
     * @param {String} requestId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentCancelInvestmentRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentCancelInvestmentRequestPost(requestId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling apiManagerInvestmentCancelInvestmentRequestPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentCancelInvestmentRequestPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'requestId': requestId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investment/cancelInvestmentRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentClosePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close existing investment program
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentClosePost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investment/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentInvestPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentInvestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manager deposit in his own investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentInvestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentInvestPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentInvestPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investment/invest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramBuyTokensGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramBuyTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramBuyToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program buy token model
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramBuyTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramBuyToken}
     */
    apiManagerInvestmentProgramBuyTokensGet(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramBuyTokensGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramBuyTokensGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramBuyToken;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/buyTokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramEquityChartGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramEquityChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager equity chart
     * @param {String} investmentProgramId 
     * @param {module:model/String} timeFrame 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramEquityChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */
    apiManagerInvestmentProgramEquityChartGet(investmentProgramId, timeFrame, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramEquityChartGet");
      }

      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling apiManagerInvestmentProgramEquityChartGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId,
        'timeFrame': timeFrame
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesChartViewModel;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/equity/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program details by id
     * @param {String} investmentProgramId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramViewModel}
     */
    apiManagerInvestmentProgramGet(investmentProgramId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramViewModel;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramPeriodClosePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramPeriodClosePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close current period
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramPeriodClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentProgramPeriodClosePost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramPeriodClosePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramPeriodClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramRequestsPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment program&#39;s requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramRequestsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramRequests}
     */
    apiManagerInvestmentProgramRequestsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramRequests;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramTradesChartGet operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramTradesChartGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesChartViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trades chart
     * @param {String} investmentProgramId 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramTradesChartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesChartViewModel}
     */
    apiManagerInvestmentProgramTradesChartGet(investmentProgramId, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramTradesChartGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'InvestmentProgramId': investmentProgramId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesChartViewModel;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/trades/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramTradesPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramTradesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TradesViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get manager trade history
     * @param {Object} opts Optional parameters
     * @param {module:model/TradesFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramTradesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TradesViewModel}
     */
    apiManagerInvestmentProgramTradesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TradesViewModel;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/trades', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramUpdatePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update investment program details
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramUpdate} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentProgramUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investmentProgram/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsFavoritesAddPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentProgramsFavoritesAddPost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramsFavoritesAddPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramsFavoritesAddPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investmentPrograms/favorites/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsFavoritesRemovePost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from favorites
     * @param {String} investmentProgramId 
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsFavoritesRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentProgramsFavoritesRemovePost(investmentProgramId, authorization, callback) {
      let postBody = null;

      // verify the required parameter 'investmentProgramId' is set
      if (investmentProgramId === undefined || investmentProgramId === null) {
        throw new Error("Missing the required parameter 'investmentProgramId' when calling apiManagerInvestmentProgramsFavoritesRemovePost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentProgramsFavoritesRemovePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': investmentProgramId
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investmentPrograms/favorites/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentProgramsPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentProgramsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentProgramsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public investment program&#39;s list
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @param {module:model/InvestmentProgramsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerInvestmentProgramsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentProgramsViewModel}
     */
    apiManagerInvestmentProgramsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentProgramsViewModel;

      return this.apiClient.callApi(
        '/api/manager/investmentPrograms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerInvestmentWithdrawPost operation.
     * @callback module:api/ManagerApi~apiManagerInvestmentWithdrawPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manager withdrawal from his own investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Invest} opts.model 
     * @param {module:api/ManagerApi~apiManagerInvestmentWithdrawPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerInvestmentWithdrawPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerInvestmentWithdrawPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/investment/withdraw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerProfileFullGet operation.
     * @callback module:api/ManagerApi~apiManagerProfileFullGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileFullViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full profile
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerProfileFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileFullViewModel}
     */
    apiManagerProfileFullGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerProfileFullGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProfileFullViewModel;

      return this.apiClient.callApi(
        '/api/manager/profile/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerProfilePublicGet operation.
     * @callback module:api/ManagerApi~apiManagerProfilePublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePublicViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public profile
     * @param {String} userId 
     * @param {module:api/ManagerApi~apiManagerProfilePublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePublicViewModel}
     */
    apiManagerProfilePublicGet(userId, callback) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiManagerProfilePublicGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProfilePublicViewModel;

      return this.apiClient.callApi(
        '/api/manager/profile/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerProfileUpdatePost operation.
     * @callback module:api/ManagerApi~apiManagerProfileUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update profile
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateProfileViewModel} opts.model 
     * @param {module:api/ManagerApi~apiManagerProfileUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerProfileUpdatePost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerProfileUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/profile/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletAddressGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletAddressViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get eth address for GVT depositing
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerWalletAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletAddressViewModel}
     */
    apiManagerWalletAddressGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletAddressGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletAddressViewModel;

      return this.apiClient.callApi(
        '/api/manager/wallet/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallets
     * @param {String} authorization JWT access token
     * @param {module:api/ManagerApi~apiManagerWalletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletsViewModel}
     */
    apiManagerWalletGet(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletsViewModel;

      return this.apiClient.callApi(
        '/api/manager/wallet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletStatisticPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletStatisticPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletStatistic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet statistic
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletStatisticFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerWalletStatisticPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletStatistic}
     */
    apiManagerWalletStatisticPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletStatisticPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletStatistic;

      return this.apiClient.callApi(
        '/api/manager/wallet/statistic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletTransactionsInvestmentProgramsListGet operation.
     * @callback module:api/ManagerApi~apiManagerWalletTransactionsInvestmentProgramsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletInvestmentPrograms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user investment programs with tx
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.mask 
     * @param {module:api/ManagerApi~apiManagerWalletTransactionsInvestmentProgramsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletInvestmentPrograms}
     */
    apiManagerWalletTransactionsInvestmentProgramsListGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletTransactionsInvestmentProgramsListGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'mask': opts['mask']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletInvestmentPrograms;

      return this.apiClient.callApi(
        '/api/manager/wallet/transactions/investmentProgramsList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletTransactionsPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionsViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user wallet transactions
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsFilter} opts.filter 
     * @param {module:api/ManagerApi~apiManagerWalletTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionsViewModel}
     */
    apiManagerWalletTransactionsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['filter'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletTransactionsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WalletTransactionsViewModel;

      return this.apiClient.callApi(
        '/api/manager/wallet/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerWalletWithdrawRequestPost operation.
     * @callback module:api/ManagerApi~apiManagerWalletWithdrawRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw request
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletWithdrawRequestModel} opts.request 
     * @param {module:api/ManagerApi~apiManagerWalletWithdrawRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiManagerWalletWithdrawRequestPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiManagerWalletWithdrawRequestPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/manager/wallet/withdrawRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
