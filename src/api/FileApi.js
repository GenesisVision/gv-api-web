/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorViewModel', 'model/UploadResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorViewModel'), require('../model/UploadResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.FileApi = factory(root.CoreApiV10.ApiClient, root.CoreApiV10.ErrorViewModel, root.CoreApiV10.UploadResult);
  }
}(this, function(ApiClient, ErrorViewModel, UploadResult) {
  'use strict';

  /**
   * File service.
   * @module api/FileApi
   * @version v1.0
   */

  /**
   * Constructs a new FileApi. 
   * @alias module:api/FileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Download file
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.v10FileByIdGetWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10FileByIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/file/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download file
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.v10FileByIdGet = function(id) {
      return this.v10FileByIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload document
     * @param {String} authorization JWT access token
     * @param {File} uploadedFile Upload File
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResult} and HTTP response
     */
    this.v10FileDocumentUploadPostWithHttpInfo = function(authorization, uploadedFile) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10FileDocumentUploadPost");
      }

      // verify the required parameter 'uploadedFile' is set
      if (uploadedFile === undefined || uploadedFile === null) {
        throw new Error("Missing the required parameter 'uploadedFile' when calling v10FileDocumentUploadPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
        'uploadedFile': uploadedFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = UploadResult;

      return this.apiClient.callApi(
        '/v1.0/file/document/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload document
     * @param {String} authorization JWT access token
     * @param {File} uploadedFile Upload File
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResult}
     */
    this.v10FileDocumentUploadPost = function(authorization, uploadedFile) {
      return this.v10FileDocumentUploadPostWithHttpInfo(authorization, uploadedFile)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload file
     * @param {File} uploadedFile Upload File
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResult} and HTTP response
     */
    this.v10FileUploadPostWithHttpInfo = function(uploadedFile, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadedFile' is set
      if (uploadedFile === undefined || uploadedFile === null) {
        throw new Error("Missing the required parameter 'uploadedFile' when calling v10FileUploadPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
        'uploadedFile': uploadedFile
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = UploadResult;

      return this.apiClient.callApi(
        '/v1.0/file/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload file
     * @param {File} uploadedFile Upload File
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResult}
     */
    this.v10FileUploadPost = function(uploadedFile, opts) {
      return this.v10FileUploadPostWithHttpInfo(uploadedFile, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
