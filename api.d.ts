/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="custom.d.ts" />
import { Configuration } from "./configuration";
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
export interface FetchArgs {
    url: string;
    options: any;
}
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
export interface AmountWithCurrency {
    amount: number;
    currency: AmountWithCurrencyCurrencyEnum;
}
export declare type AmountWithCurrencyCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface AndroidAppVersion {
    minVersion: AndroidVersion;
    lastVersion: AndroidVersion;
}
export interface AndroidVersion {
    versionCode: string;
    versionName: string;
}
export interface AssetEvent {
    programs: Array<string>;
    funds: Array<string>;
}
export interface AssetSelection {
    id: string;
    title: string;
    logo: string;
    type: AssetSelectionTypeEnum;
}
export declare type AssetSelectionTypeEnum = 'Program' | 'Fund';
export interface AssetsValue {
    type: AssetsValueTypeEnum;
    id: string;
    title: string;
    avatar: string;
    color: string;
    value: number;
    changePercent: number;
    changeValue: number;
}
export declare type AssetsValueTypeEnum = 'All' | 'Program' | 'Fund';
export interface AttachToSignalProvider {
    mode: AttachToSignalProviderModeEnum;
    percent: number;
    openTolerancePercent: number;
    fixedVolume: number;
    fixedCurrency: AttachToSignalProviderFixedCurrencyEnum;
    initialDepositCurrency: AttachToSignalProviderInitialDepositCurrencyEnum;
    initialDepositAmount: number;
}
export declare type AttachToSignalProviderModeEnum = 'ByBalance' | 'Percent' | 'Fixed';
export declare type AttachToSignalProviderFixedCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type AttachToSignalProviderInitialDepositCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface AttachToSignalProviderInfo {
    hasSignalAccount: boolean;
    hasActiveSubscription: boolean;
    volumeFee: number;
    minDeposit: number;
    minDepositCurrency: AttachToSignalProviderInfoMinDepositCurrencyEnum;
}
export declare type AttachToSignalProviderInfoMinDepositCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface BalanceChartElement {
    date: Date;
    managerFunds: number;
    investorsFunds: number;
}
export interface BlockchainInfo {
    hash: string;
    status: BlockchainInfoStatusEnum;
}
export declare type BlockchainInfoStatusEnum = 'Undefined' | 'New' | 'Pending' | 'ConfirmedByGate' | 'ConfirmedAndValidated' | 'Error' | 'Cancelled';
export interface Broker {
    name: string;
    description: string;
    logo: string;
    terms: string;
    assets: string;
    fee: number;
    leverageMin: number;
    leverageMax: number;
    accountTypes: Array<BrokerAccountType>;
    isForex: boolean;
    isSignalsAvailable: boolean;
    tags: Array<ProgramTag>;
}
export interface BrokerAccountType {
    id: string;
    name: string;
    description: string;
    type: BrokerAccountTypeTypeEnum;
    leverages: Array<number>;
    currencies: Array<string>;
    minimumDepositsAmount: {
        [key: string]: number;
    };
    isForex: boolean;
    isSignalsAvailable: boolean;
}
export declare type BrokerAccountTypeTypeEnum = 'Undefined' | 'MetaTrader4' | 'MetaTrader5' | 'NinjaTrader' | 'cTrader' | 'Rumus' | 'Metastock' | 'IDEX' | 'Huobi' | 'Exante';
export interface BrokerDetails {
    isForex: boolean;
    logo: string;
    showSwaps: boolean;
    showTickets: boolean;
    name: string;
}
export interface BrokersInfo {
    brokers: Array<Broker>;
}
export interface BrokersProgramInfo {
    brokers: Array<Broker>;
    currentAccountTypeId: string;
}
export interface CaptchaCheckResult {
    id: string;
    pow: PowResult;
    geeTest: GeeTestResult;
}
export interface CaptchaDetails {
    captchaType: CaptchaDetailsCaptchaTypeEnum;
    id: string;
    route: string;
    pow: PowDetails;
    geeTest: GeeTestDetails;
}
export declare type CaptchaDetailsCaptchaTypeEnum = 'None' | 'Pow' | 'GeeTest';
export interface ChangeBrokerProgramRequest {
    programId: string;
    newBrokerAccountTypeId: string;
    newLeverage: number;
}
export interface ChangePasswordViewModel {
    oldPassword: string;
    password: string;
    confirmPassword: string;
}
export interface ChartSimple {
    value: number;
    date: Date;
}
export interface ConvertingDetails {
    currencyTo: ConvertingDetailsCurrencyToEnum;
    currencyToName: string;
    amountTo: number;
    rateValue: number;
    currencyToLogo: string;
}
export declare type ConvertingDetailsCurrencyToEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface CopyTradingAccountInfo {
    id: string;
    currency: CopyTradingAccountInfoCurrencyEnum;
    logo: string;
    title: string;
    balance: number;
    equity: number;
    freeMargin: number;
    marginLevel: number;
    available: number;
}
export declare type CopyTradingAccountInfoCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface CopyTradingAccountsList {
    accounts: Array<CopyTradingAccountInfo>;
    total: number;
}
export interface CreateWithdrawalRequestModel {
    amount: number;
    currency: CreateWithdrawalRequestModelCurrencyEnum;
    address: string;
    twoFactorCode: string;
}
export declare type CreateWithdrawalRequestModelCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface DashboardChartValue {
    investedProgramsInfo: Array<ValueChartBar>;
    balanceChart: Array<ChartSimple>;
    value: number;
    valueCurrency: number;
    changePercent: number;
    changeValue: number;
    changeValueCurrency: number;
    rate: number;
}
export interface DashboardPortfolioEvent {
    assetId: string;
    date: Date;
    title: string;
    url: string;
    value: number;
    valueTotal: number;
    feeSuccessManager: number;
    feeSuccessManagerCurrency: DashboardPortfolioEventFeeSuccessManagerCurrencyEnum;
    feeSuccessPlatform: number;
    feeSuccessPlatformCurrency: DashboardPortfolioEventFeeSuccessPlatformCurrencyEnum;
    profitPercent: number;
    currency: DashboardPortfolioEventCurrencyEnum;
    type: DashboardPortfolioEventTypeEnum;
    logo: string;
    color: string;
    description: string;
    assetType: DashboardPortfolioEventAssetTypeEnum;
}
export declare type DashboardPortfolioEventFeeSuccessManagerCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type DashboardPortfolioEventFeeSuccessPlatformCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type DashboardPortfolioEventCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type DashboardPortfolioEventTypeEnum = 'Invest' | 'Canceled' | 'WithdrawByStopOut' | 'Loss' | 'Reinvest' | 'Profit' | 'All' | 'Withdraw' | 'Ended';
export declare type DashboardPortfolioEventAssetTypeEnum = 'Program' | 'Fund';
export interface DashboardPortfolioEvents {
    events: Array<DashboardPortfolioEvent>;
    total: number;
}
export interface DashboardProgramDetails {
    share: number;
}
export interface DashboardSummary {
    chart: DashboardChartValue;
    events: DashboardPortfolioEvents;
    profileHeader: ProfileHeaderViewModel;
    programsCount: number;
    fundsCount: number;
    signalsCount: number;
    requests: ProgramRequests;
}
export interface DetachFromSignalProvider {
    mode: DetachFromSignalProviderModeEnum;
}
export declare type DetachFromSignalProviderModeEnum = 'None' | 'ProviderCloseOnly' | 'CloseAllImmediately';
export interface Enums {
    multiWallet: MultiWalletFilters;
    program: ProgramFilters;
    fund: FundFilters;
}
export interface ErrorMessage {
    message: string;
    property: string;
}
export interface ErrorViewModel {
    errors: Array<ErrorMessage>;
    code: ErrorViewModelCodeEnum;
}
export declare type ErrorViewModelCodeEnum = 'InternalServerError' | 'ValidationError' | 'RequiresTwoFactor' | 'WrongCaptcha';
export interface ExternalTransactionDetails {
    description: string;
    descriptionUrl: string;
    fromAddress: string;
    isEnableActions: boolean;
}
export interface FcmTokenViewModel {
    token: string;
}
export interface FinancialStatistic {
    deposit: number;
    withdraw: number;
    commissionRebate: number;
    successFee: number;
    entryFee: number;
    profit: number;
    balance: number;
}
export interface ForgotPasswordViewModel {
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface FundAssetInfo {
    asset: string;
    symbol: string;
    icon: string;
    target: number;
    current: number;
}
export interface FundAssetPart {
    id: string;
    percent: number;
}
export interface FundAssetPartWithIcon {
    icon: string;
    color: string;
    name: string;
    asset: string;
    percent: number;
}
export interface FundAssetPercent {
    asset: string;
    name: string;
    percent: number;
    icon: string;
}
export interface FundAssetsListInfo {
    assets: Array<FundAssetInfo>;
}
export interface FundBalanceChart {
    usdBalance: number;
    balanceChart: Array<BalanceChartElement>;
    gvtBalance: number;
}
export interface FundDetails {
    totalAssetsCount: number;
    topFundAssets: Array<FundAssetPercent>;
    statistic: FundDetailsListStatistic;
    personalDetails: PersonalFundDetailsFull;
    dashboardAssetsDetails: DashboardProgramDetails;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: FundDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}
export declare type FundDetailsStatusEnum = 'None' | 'Pending' | 'ErrorCreating' | 'Active' | 'Closed' | 'Archived' | 'ClosedDueToInactivity';
export interface FundDetailsFull {
    entryFee: number;
    exitFee: number;
    managementFee: number;
    currentAssets: Array<FundAssetPartWithIcon>;
    statistic: FundStatistic;
    personalFundDetails: PersonalFundDetailsFull;
    id: string;
    logo: string;
    url: string;
    color: string;
    description: string;
    title: string;
    ipfsHash: string;
    creationDate: Date;
    status: FundDetailsFullStatusEnum;
    manager: ProfilePublic;
}
export declare type FundDetailsFullStatusEnum = 'None' | 'Pending' | 'ErrorCreating' | 'Active' | 'Closed' | 'Archived' | 'ClosedDueToInactivity';
export interface FundDetailsListStatistic {
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    profitPercent: number;
    drawdownPercent: number;
    investorsCount: number;
}
export interface FundFacet {
    sorting: FundFacetSortingEnum;
    id: string;
    title: string;
    description: string;
    logo: string;
    url: string;
    sortType: FundFacetSortTypeEnum;
    timeframe: FundFacetTimeframeEnum;
}
export declare type FundFacetSortingEnum = 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc';
export declare type FundFacetSortTypeEnum = 'New' | 'Top' | 'WeeklyTop' | 'Popular' | 'ToLevelUp' | 'MostReliable';
export declare type FundFacetTimeframeEnum = 'Day' | 'Week' | 'Month' | 'ThreeMonths' | 'Year' | 'AllTime';
export interface FundFilters {
    assets: Array<PlatformAsset>;
}
export interface FundInvestInfo {
    title: string;
    availableInWallet: number;
    minInvestmentAmount: number;
    entryFee: number;
    gvCommission: number;
    rate: number;
    isOwnProgram: boolean;
}
export interface FundNotificationSettingList {
    assetId: string;
    title: string;
    url: string;
    logo: string;
    color: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface FundProfitChart {
    totalUsdProfit: number;
    timeframeUsdProfit: number;
    rebalances: number;
    creationDate: Date;
    profitPercent: number;
    equityChart: Array<ChartSimple>;
    balance: number;
    investors: number;
    profitChangePercent: number;
    sharpeRatio: number;
    sortinoRatio: number;
    calmarRatio: number;
    maxDrawdown: number;
    totalGvtProfit: number;
    timeframeGvtProfit: number;
    rate: number;
}
export interface FundSets {
    sets: Array<FundFacet>;
    favoritesCount: number;
}
export interface FundStatistic {
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    profitPercent: number;
    drawdownPercent: number;
    investorsCount: number;
    startDate: Date;
    startBalance: number;
    investedAmount: number;
    rebalancingCount: number;
}
export interface FundWithdrawInfo {
    exitFee: number;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface FundsList {
    funds: Array<FundDetails>;
    total: number;
}
export interface GeeTestDetails {
}
export interface GeeTestResult {
}
export interface IOsAppVersion {
    minVersion: string;
    lastVersion: string;
}
export interface InternalTransferRequest {
    sourceId: string;
    sourceType: InternalTransferRequestSourceTypeEnum;
    destinationId: string;
    destinationType: InternalTransferRequestDestinationTypeEnum;
    amount: number;
    transferAll: boolean;
}
export declare type InternalTransferRequestSourceTypeEnum = 'Undefined' | 'Wallet' | 'CopyTradingAccount' | 'GenesisVisionPlatform' | 'SignalProviderSettings';
export declare type InternalTransferRequestDestinationTypeEnum = 'Undefined' | 'Wallet' | 'CopyTradingAccount' | 'GenesisVisionPlatform' | 'SignalProviderSettings';
export interface LevelInfo {
    level: number;
    investmentLimit: number;
}
export interface LevelUpData {
    level: number;
    total: number;
    totalOwn: number;
    quota: number;
    targetProfit: number;
}
export interface LevelUpSummary {
    levelData: Array<LevelUpData>;
}
export interface LevelsParamsInfo {
    minAvailableToInvest: number;
    maxAvailableToInvest: number;
    unverifiedAvailableToInvest: number;
    genesisRatioMin: number;
    genesisRatioMax: number;
    genesisRatioHighRisk: number;
    volumeScaleMin: number;
    volumeScaleMax: number;
    programAgeMax: number;
    ageByVolumeMax: number;
    investmentScaleMin: number;
    investmentScaleMax: number;
    investmentScaleHighRisk: number;
}
export interface LoginViewModel {
    password: string;
    rememberMe: boolean;
    twoFactorCode: string;
    recoveryCode: string;
    client: string;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ManagerAssets {
    programs: Array<ManagerSimpleProgram>;
    funds: Array<ManagerSimpleFund>;
}
export interface ManagerDashboard {
    profile: ManagerProfileDetails;
    requests: ProgramRequest;
    events: ManagerPortfolioEvents;
    allAssets: Array<AssetSelection>;
    programChart: ProgramProfitChart;
    fundChart: FundProfitChart;
}
export interface ManagerFundWithdrawInfo {
    withheldInvestment: number;
    exitFee: number;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ManagerNotificationSettingList {
    managerId: string;
    url: string;
    username: string;
    avatar: string;
    about: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface ManagerOverview {
}
export interface ManagerPortfolioEvent {
    assetId: string;
    date: Date;
    title: string;
    value: number;
    feeValue: number;
    profitPercent: number;
    currency: ManagerPortfolioEventCurrencyEnum;
    type: ManagerPortfolioEventTypeEnum;
    programType: ManagerPortfolioEventProgramTypeEnum;
    logo: string;
    color: string;
    description: string;
    url: string;
    periodNumber: number;
}
export declare type ManagerPortfolioEventCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type ManagerPortfolioEventTypeEnum = 'All' | 'AssetStarted' | 'ProgramPeriodStarts' | 'ProgramPeriodEnds' | 'InvestorInvest' | 'InvestorWithdraw' | 'ManagerInvest' | 'ManagerWithdraw' | 'AssetFinished' | 'EntranceFee' | 'ExitFee' | 'ProgramStopOut' | 'ProgramManagerTradingFeeAccrual' | 'ProgramSignalSubscribe' | 'ProgramBrokerChanged';
export declare type ManagerPortfolioEventProgramTypeEnum = 'Program' | 'Fund';
export interface ManagerPortfolioEvents {
    events: Array<ManagerPortfolioEvent>;
    total: number;
}
export interface ManagerProfile {
    id: string;
    username: string;
    about: string;
    avatar: string;
    regDate: Date;
    assets: Array<string>;
    url: string;
    socialLinks: Array<SocialLinkViewModel>;
}
export interface ManagerProfileDetails {
    managerProfile: ManagerProfile;
    overview: ManagerOverview;
    programsCount: number;
    fundsCount: number;
}
export interface ManagerProgramCreateResult {
    programId: string;
    twoFactorRequired: boolean;
    twoFactor: TwoFactorAuthenticator;
}
export interface ManagerProgramWithdrawInfo {
    withheldInvestment: number;
    periodEnds: Date;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ManagerSimpleFund {
    id: string;
    title: string;
    color: string;
    logo: string;
    url: string;
}
export interface ManagerSimpleProgram {
    level: number;
    levelProgress: number;
    id: string;
    title: string;
    color: string;
    logo: string;
    url: string;
}
export interface ManagersList {
    managers: Array<ManagerProfile>;
    total: number;
}
export interface MigrationRequest {
    dateCreate: Date;
    newLeverage: number;
    newBroker: Broker;
}
export interface MultiWalletExternalTransaction {
    id: string;
    currency: MultiWalletExternalTransactionCurrencyEnum;
    logo: string;
    date: Date;
    amount: number;
    type: MultiWalletExternalTransactionTypeEnum;
    status: string;
    isEnableActions: boolean;
    statusUrl: string;
}
export declare type MultiWalletExternalTransactionCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type MultiWalletExternalTransactionTypeEnum = 'All' | 'Deposit' | 'Withdrawal';
export interface MultiWalletExternalTransactionsViewModel {
    transactions: Array<MultiWalletExternalTransaction>;
    total: number;
}
export interface MultiWalletFilters {
    transactionType: Array<string>;
    externalTransactionType: Array<string>;
}
export interface MultiWalletTransaction {
    id: string;
    currencyFrom: MultiWalletTransactionCurrencyFromEnum;
    currencyTo: MultiWalletTransactionCurrencyToEnum;
    type: MultiWalletTransactionTypeEnum;
    date: Date;
    status: MultiWalletTransactionStatusEnum;
    logoFrom: string;
    logoTo: string;
    description: string;
    amount: number;
    amountTo: number;
}
export declare type MultiWalletTransactionCurrencyFromEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type MultiWalletTransactionCurrencyToEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type MultiWalletTransactionTypeEnum = 'All' | 'Investment' | 'Converting' | 'Withdrawal' | 'Close' | 'Open' | 'Fee' | 'Profits' | 'SubscribeSignal' | 'ReceiveSignal' | 'DepositSignal' | 'WithdrawalSignal' | 'Platform';
export declare type MultiWalletTransactionStatusEnum = 'Done' | 'Pending' | 'Canceled' | 'Error';
export interface MultiWalletTransactionsViewModel {
    transactions: Array<MultiWalletTransaction>;
    total: number;
}
export interface NewFundRequest {
    exitFee: number;
    managementFee: number;
    assets: Array<FundAssetPart>;
    title: string;
    description: string;
    logo: string;
    entryFee: number;
    depositAmount: number;
    depositWalletId: string;
}
export interface NewProgramRequest {
    currency: NewProgramRequestCurrencyEnum;
    periodLength: number;
    successFee: number;
    stopOutLevel: number;
    leverage: number;
    brokerAccountTypeId: string;
    signalSuccessFee: number;
    signalVolumeFee: number;
    isSignalProgram: boolean;
    investmentLimit: number;
    title: string;
    description: string;
    logo: string;
    entryFee: number;
    depositAmount: number;
    depositWalletId: string;
}
export declare type NewProgramRequestCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface NotificationList {
    notifications: Array<NotificationViewModel>;
    total: number;
}
export interface NotificationSettingList {
    settingsGeneral: Array<NotificationSettingViewModel>;
    settingsProgram: Array<ProgramNotificationSettingList>;
    settingsFund: Array<FundNotificationSettingList>;
    settingsManager: Array<ManagerNotificationSettingList>;
}
export interface NotificationSettingViewModel {
    id: string;
    isEnabled: boolean;
    assetId: string;
    managerId: string;
    type: NotificationSettingViewModelTypeEnum;
    conditionType: NotificationSettingViewModelConditionTypeEnum;
    conditionAmount: number;
}
export declare type NotificationSettingViewModelTypeEnum = 'PlatformNewsAndUpdates' | 'PlatformEmergency' | 'PlatformOther' | 'ProfileUpdated' | 'ProfilePwdUpdated' | 'ProfileVerification' | 'Profile2FA' | 'ProfileSecurity' | 'TradingAccountPwdUpdated' | 'ProgramNewsAndUpdates' | 'ProgramEndOfPeriod' | 'ProgramCondition' | 'ProgramExceedInvestmentLimit' | 'FundNewsAndUpdates' | 'FundEndOfPeriod' | 'FundRebalancing' | 'ManagerNewProgram' | 'Signals';
export declare type NotificationSettingViewModelConditionTypeEnum = 'Empty' | 'Profit' | 'Level' | 'AvailableToInvest';
export interface NotificationViewModel {
    id: string;
    text: string;
    date: Date;
    type: NotificationViewModelTypeEnum;
    assetId: string;
    managerId: string;
    logo: string;
    url: string;
    color: string;
    isUnread: boolean;
    assetType: NotificationViewModelAssetTypeEnum;
}
export declare type NotificationViewModelTypeEnum = 'PlatformNewsAndUpdates' | 'PlatformEmergency' | 'PlatformOther' | 'ProfileUpdated' | 'ProfilePwdUpdated' | 'ProfileVerification' | 'Profile2FA' | 'ProfileSecurity' | 'TradingAccountPwdUpdated' | 'ProgramNewsAndUpdates' | 'ProgramEndOfPeriod' | 'ProgramCondition' | 'ProgramExceedInvestmentLimit' | 'FundNewsAndUpdates' | 'FundEndOfPeriod' | 'FundRebalancing' | 'ManagerNewProgram' | 'Signals';
export declare type NotificationViewModelAssetTypeEnum = 'Program' | 'Fund';
export interface OrderModel {
    id: string;
    login: string;
    ticket: string;
    symbol: string;
    volume: number;
    profit: number;
    direction: OrderModelDirectionEnum;
    date: Date;
    price: number;
    priceCurrent: number;
    entry: OrderModelEntryEnum;
    baseVolume: number;
    originalCommission: number;
    originalCommissionCurrency: string;
    commission: number;
    swap: number;
    showOriginalCommission: boolean;
    signalData: OrderModelSignalData;
}
export declare type OrderModelDirectionEnum = 'Buy' | 'Sell' | 'Balance' | 'Credit' | 'Undefined';
export declare type OrderModelEntryEnum = 'In' | 'Out' | 'InOut' | 'OutBy';
export interface OrderModelSignalData {
    masters: Array<SignalDataMaster>;
}
export interface OrderProgramData {
    title: string;
    level: number;
    levelProgress: number;
    color: string;
    url: string;
    logo: string;
}
export interface OrderSignalFee {
    amount: number;
    currency: OrderSignalFeeCurrencyEnum;
    type: OrderSignalFeeTypeEnum;
}
export declare type OrderSignalFeeCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type OrderSignalFeeTypeEnum = 'Undefined' | 'GvProgramEntry' | 'GvProgramSuccess' | 'GvFundEntry' | 'GvGmGvtHolderFee' | 'ManagerProgramEntry' | 'ManagerProgramSuccess' | 'ManagerFundEntry' | 'ManagerFundExit' | 'GvWithdrawal' | 'ManagerSignalMasterSuccessFee' | 'ManagerSignalMasterVolumeFee' | 'GvSignalSuccessFee';
export interface OrderSignalModel {
    providers: Array<OrderSignalProgramInfo>;
    totalCommission: number;
    totalCommissionByType: Array<TotalCommission>;
    tradingAccountId: string;
    currency: OrderSignalModelCurrencyEnum;
    id: string;
    login: string;
    ticket: string;
    symbol: string;
    volume: number;
    profit: number;
    direction: OrderSignalModelDirectionEnum;
    date: Date;
    price: number;
    priceCurrent: number;
    entry: OrderSignalModelEntryEnum;
    baseVolume: number;
    originalCommission: number;
    originalCommissionCurrency: string;
    commission: number;
    swap: number;
    showOriginalCommission: boolean;
    signalData: OrderModelSignalData;
}
export declare type OrderSignalModelCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type OrderSignalModelDirectionEnum = 'Buy' | 'Sell' | 'Balance' | 'Credit' | 'Undefined';
export declare type OrderSignalModelEntryEnum = 'In' | 'Out' | 'InOut' | 'OutBy';
export interface OrderSignalProgramInfo {
    manager: ProfilePublic;
    program: OrderProgramData;
    programId: string;
    volume: number;
    priceOpenAvg: number;
    profit: number;
    firstOrderDate: Date;
    fees: Array<OrderSignalFee>;
}
export interface OtherAssetsValue {
    amount: number;
    value: number;
    changePercent: number;
    changeValue: number;
}
export interface PasswordModel {
    password: string;
}
export interface PeriodDate {
    dateFrom: Date;
    dateTo: Date;
}
export interface PersonalFundDetailsFull {
    withdrawPercent: number;
    canReallocate: boolean;
    possibleReallocationTime: Date;
    isFavorite: boolean;
    isInvested: boolean;
    isOwnProgram: boolean;
    canCloseProgram: boolean;
    canCloseAsset: boolean;
    isFinishing: boolean;
    canInvest: boolean;
    canWithdraw: boolean;
    canClosePeriod: boolean;
    hasNotifications: boolean;
    value: number;
    profit: number;
    invested: number;
    pendingInput: number;
    pendingOutput: number;
    pendingOutputIsWithdrawAll: boolean;
    status: PersonalFundDetailsFullStatusEnum;
}
export declare type PersonalFundDetailsFullStatusEnum = 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended';
export interface PersonalProgramDetailsFull {
    isReinvest: boolean;
    gvtValue: number;
    showTwoFactorButton: boolean;
    signalSubscription: SignalSubscription;
    login: string;
    notificationAvailableToInvestId: string;
    canMakeSignalProvider: boolean;
    canChangePassword: boolean;
    migration: MigrationRequest;
    isFavorite: boolean;
    isInvested: boolean;
    isOwnProgram: boolean;
    canCloseProgram: boolean;
    canCloseAsset: boolean;
    isFinishing: boolean;
    canInvest: boolean;
    canWithdraw: boolean;
    canClosePeriod: boolean;
    hasNotifications: boolean;
    value: number;
    profit: number;
    invested: number;
    pendingInput: number;
    pendingOutput: number;
    pendingOutputIsWithdrawAll: boolean;
    status: PersonalProgramDetailsFullStatusEnum;
}
export declare type PersonalProgramDetailsFullStatusEnum = 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended';
export interface PersonalSignalDetailsFull {
    subscriptionDate: Date;
    tradesCount: number;
    signalSubscription: SignalSubscription;
    profit: number;
    volume: number;
    isFavorite: boolean;
    isInvested: boolean;
    status: PersonalSignalDetailsFullStatusEnum;
}
export declare type PersonalSignalDetailsFullStatusEnum = 'Active' | 'Ended';
export interface PlatformAsset {
    id: string;
    name: string;
    asset: string;
    description: string;
    icon: string;
    color: string;
}
export interface PlatformAssets {
    assets: Array<PlatformAsset>;
}
export interface PlatformCurrency {
    name: string;
    rateToGvt: number;
}
export interface PlatformInfo {
    iOSVersion: IOsAppVersion;
    androidVersion: AndroidAppVersion;
    programsFacets: Array<ProgramFacet>;
    fundsFacets: Array<FundFacet>;
    programsInfo: ProgramsInfo;
    currencies: Array<string>;
    programCurrencies: Array<string>;
    platformCurrencies: Array<PlatformCurrency>;
    enums: Enums;
}
export interface PlatformStatistic {
    managers: number;
    investors: number;
    profitWeek: number;
    investmentAmount: number;
    totalInvestorsProfit: number;
    totalProfit: number;
}
export interface PowDetails {
    secureAlgorithm: PowDetailsSecureAlgorithmEnum;
    difficulty: number;
    nonce: string;
}
export declare type PowDetailsSecureAlgorithmEnum = 'Sha256';
export interface PowResult {
    prefix: string;
}
export interface ProfileFullViewModel {
    id: string;
    email: string;
    firstName: string;
    middleName: string;
    lastName: string;
    country: string;
    city: string;
    address: string;
    phone: string;
    phoneNumberConfirmed: boolean;
    birthday: Date;
    gender: boolean;
    avatar: string;
    about: string;
    userName: string;
    index: string;
    citizenship: string;
    refUrl: string;
    verificationStatus: ProfileFullViewModelVerificationStatusEnum;
}
export declare type ProfileFullViewModelVerificationStatusEnum = 'NotVerified' | 'Verified' | 'UnderReview' | 'Rejected';
export interface ProfileHeaderViewModel {
    id: string;
    name: string;
    email: string;
    avatar: string;
    userType: ProfileHeaderViewModelUserTypeEnum;
    notificationsCount: number;
    favoritesCount: number;
    kycConfirmed: boolean;
    allowForex: boolean;
    isTwoFactorEnabled: boolean;
    isNewUser: boolean;
    totalBalanceGvt: number;
    investedGvt: number;
    availableGvt: number;
    totalBalance: number;
    invested: number;
    available: number;
    pending: number;
}
export declare type ProfileHeaderViewModelUserTypeEnum = 'Investor' | 'Manager';
export interface ProfilePublic {
    id: string;
    username: string;
    avatar: string;
    registrationDate: Date;
    url: string;
    socialLinks: Array<SocialLinkViewModel>;
}
export interface ProgramBalanceChart {
    programCurrencyBalance: number;
    programCurrency: ProgramBalanceChartProgramCurrencyEnum;
    balanceChart: Array<ProgramBalanceChartElement>;
    gvtBalance: number;
}
export declare type ProgramBalanceChartProgramCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface ProgramBalanceChartElement {
    profit: number;
    date: Date;
    managerFunds: number;
    investorsFunds: number;
}
export interface ProgramDetails {
    currency: ProgramDetailsCurrencyEnum;
    level: number;
    levelProgress: number;
    periodDuration: number;
    stopOutLevel: number;
    periodStarts: Date;
    periodEnds: Date;
    availableInvestment: number;
    availableInvestmentBase: number;
    availableInvestmentLimit: number;
    dashboardAssetsDetails: DashboardProgramDetails;
    statistic: ProgramDetailsListStatistic;
    rating: ProgramDetailsRating;
    personalDetails: PersonalProgramDetailsFull;
    tags: Array<ProgramTag>;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: ProgramDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}
export declare type ProgramDetailsCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type ProgramDetailsStatusEnum = 'None' | 'Pending' | 'ErrorCreating' | 'Active' | 'Closed' | 'Archived' | 'ClosedDueToInactivity';
export interface ProgramDetailsFull {
    currency: ProgramDetailsFullCurrencyEnum;
    level: number;
    levelProgress: number;
    periodDuration: number;
    periodStarts: Date;
    periodEnds: Date;
    entryFee: number;
    entryFeeSelected: number;
    entryFeeCurrent: number;
    successFee: number;
    successFeeSelected: number;
    successFeeCurrent: number;
    stopOutLevel: number;
    stopOutLevelSelected: number;
    stopOutLevelCurrent: number;
    isReinvesting: boolean;
    isSignalProgram: boolean;
    signalSuccessFee: number;
    signalVolumeFee: number;
    leverageMin: number;
    leverageMax: number;
    ageDays: number;
    genesisRatio: number;
    investmentScale: number;
    volumeScale: number;
    availableInvestment: number;
    availableInvestmentBase: number;
    availableInvestmentLimit: number;
    totalAvailableInvestment: number;
    brokerDetails: BrokerDetails;
    statistic: ProgramStatistic;
    rating: ProgramDetailsRating;
    personalProgramDetails: PersonalProgramDetailsFull;
    tags: Array<ProgramTag>;
    id: string;
    logo: string;
    url: string;
    color: string;
    description: string;
    title: string;
    ipfsHash: string;
    creationDate: Date;
    status: ProgramDetailsFullStatusEnum;
    manager: ProfilePublic;
}
export declare type ProgramDetailsFullCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type ProgramDetailsFullStatusEnum = 'None' | 'Pending' | 'ErrorCreating' | 'Active' | 'Closed' | 'Archived' | 'ClosedDueToInactivity';
export interface ProgramDetailsListStatistic {
    balanceBase: AmountWithCurrency;
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    currentValue: number;
    profitPercent: number;
    profitValue: number;
    drawdownPercent: number;
    investorsCount: number;
    tradesCount: number;
}
export interface ProgramDetailsRating {
    rating: number;
    profit: number;
    canLevelUp: boolean;
    topPercent: number;
}
export interface ProgramFacet {
    sorting: ProgramFacetSortingEnum;
    id: string;
    title: string;
    description: string;
    logo: string;
    url: string;
    sortType: ProgramFacetSortTypeEnum;
    timeframe: ProgramFacetTimeframeEnum;
}
export declare type ProgramFacetSortingEnum = 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc';
export declare type ProgramFacetSortTypeEnum = 'New' | 'Top' | 'WeeklyTop' | 'Popular' | 'ToLevelUp' | 'MostReliable';
export declare type ProgramFacetTimeframeEnum = 'Day' | 'Week' | 'Month' | 'ThreeMonths' | 'Year' | 'AllTime';
export interface ProgramFilters {
    programTags: Array<ProgramTag>;
    actionType: Array<string>;
    customNotificationType: Array<string>;
    managerNotificationType: AssetEvent;
    investorNotificationType: AssetEvent;
}
export interface ProgramInfo {
    title: string;
}
export interface ProgramInvestInfo {
    periodEnds: Date;
    availableToInvest: number;
    availableToInvestBase: number;
    title: string;
    availableInWallet: number;
    minInvestmentAmount: number;
    entryFee: number;
    gvCommission: number;
    rate: number;
    isOwnProgram: boolean;
}
export interface ProgramLevelInfo {
    isKycPassed: boolean;
    level: number;
    levelProgressPercent: number;
    genesisRatio: number;
    programAge: number;
    weightedVolumeScale: number;
    managerBalance: number;
    investmentScale: number;
    totalAvailableToInvest: number;
}
export interface ProgramMinimumDeposit {
    minimumDepositsAmount: {
        [key: string]: number;
    };
}
export interface ProgramNotificationSettingList {
    level: number;
    levelProgress: number;
    settingsCustom: Array<NotificationSettingViewModel>;
    assetId: string;
    title: string;
    url: string;
    logo: string;
    color: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface ProgramPeriodViewModel {
    dateFrom: Date;
    dateTo: Date;
    status: ProgramPeriodViewModelStatusEnum;
    number: number;
    profit: number;
    balance: number;
    investors: number;
    managerStatistic: FinancialStatistic;
}
export declare type ProgramPeriodViewModelStatusEnum = 'Planned' | 'InProccess' | 'Closed';
export interface ProgramPeriodsViewModel {
    periods: Array<ProgramPeriodViewModel>;
    total: number;
}
export interface ProgramProfitChart {
    totalProgramCurrencyProfit: number;
    timeframeProgramCurrencyProfit: number;
    programCurrency: ProgramProfitChartProgramCurrencyEnum;
    trades: number;
    successTradesPercent: number;
    profitFactor: number;
    pnLChart: Array<ChartSimple>;
    periods: Array<PeriodDate>;
    lastPeriodStarts: Date;
    lastPeriodEnds: Date;
    tradingVolume: number;
    equityChart: Array<ChartSimple>;
    balance: number;
    investors: number;
    profitChangePercent: number;
    sharpeRatio: number;
    sortinoRatio: number;
    calmarRatio: number;
    maxDrawdown: number;
    totalGvtProfit: number;
    timeframeGvtProfit: number;
    rate: number;
}
export declare type ProgramProfitChartProgramCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface ProgramPwdUpdate {
    password: string;
    twoFactorCode: string;
}
export interface ProgramRequest {
    id: string;
    programId: string;
    date: Date;
    value: number;
    valueGvt: number;
    withdrawAll: boolean;
    feeEntry: number;
    feeExit: number;
    currency: ProgramRequestCurrencyEnum;
    fundWithdrawPercent: number;
    type: ProgramRequestTypeEnum;
    status: ProgramRequestStatusEnum;
    logo: string;
    title: string;
    color: string;
    canCancelRequest: boolean;
    programType: ProgramRequestProgramTypeEnum;
}
export declare type ProgramRequestCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type ProgramRequestTypeEnum = 'Invest' | 'Withdrawal';
export declare type ProgramRequestStatusEnum = 'New' | 'Executed' | 'Cancelled';
export declare type ProgramRequestProgramTypeEnum = 'Program' | 'Fund';
export interface ProgramRequests {
    requests: Array<ProgramRequest>;
    total: number;
    totalValue: number;
}
export interface ProgramSets {
    sets: Array<ProgramFacet>;
    favoritesCount: number;
}
export interface ProgramStatistic {
    balanceBase: AmountWithCurrency;
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    currentValue: number;
    profitPercent: number;
    profitValue: number;
    drawdownPercent: number;
    investorsCount: number;
    hasNotifications: boolean;
    startDate: Date;
    startBalance: number;
    startCurrency: ProgramStatisticStartCurrencyEnum;
    investedAmount: number;
    investedCurrency: ProgramStatisticInvestedCurrencyEnum;
    tradesCount: number;
    tradesSuccessCount: number;
    profitFactorPercent: number;
    sharpeRatioPercent: number;
}
export declare type ProgramStatisticStartCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type ProgramStatisticInvestedCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface ProgramTag {
    name: string;
    color: string;
}
export interface ProgramTransactionDetails {
    id: string;
    managerName: string;
    programType: ProgramTransactionDetailsProgramTypeEnum;
    successFeeCurrency: ProgramTransactionDetailsSuccessFeeCurrencyEnum;
    logo: string;
    title: string;
    entryFee: number;
    entryFeePercent: number;
    successFee: number;
    successFeePercent: number;
    level: number;
    levelProgress: number;
    exitFee: number;
    exitFeePercent: number;
    color: string;
}
export declare type ProgramTransactionDetailsProgramTypeEnum = 'Program' | 'Fund';
export declare type ProgramTransactionDetailsSuccessFeeCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface ProgramUpdate {
    title: string;
    description: string;
    logo: string;
    stopOutLevel: number;
    investmentLimit: number;
}
export interface ProgramWithdrawInfo {
    periodEnds: Date;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ProgramsInfo {
    managerProgramInvestment: number;
    managerProgramInvestmentUSD: number;
    managerProgramInvestmentUSDT: number;
    managerProgramInvestmentBTC: number;
    managerProgramInvestmentETH: number;
    managerMaxEntryFee: number;
    managerMaxSuccessFee: number;
    managerFundInvestment: number;
    managerMaxExitFee: number;
    managerMaxSignalVolumeFee: number;
    managerMinSignalVolumeFee: number;
    managerMaxSignalSuccessFee: number;
    managerMinSignalSuccessFee: number;
    periods: Array<number>;
}
export interface ProgramsLevelsInfo {
    levels: Array<LevelInfo>;
}
export interface ProgramsList {
    programs: Array<ProgramDetails>;
    total: number;
}
export interface RateItem {
    currency: RateItemCurrencyEnum;
    rate: number;
}
export declare type RateItemCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface RatesModel {
    rates: RatesModelRates;
}
export interface RatesModelRates {
    undefined: Array<RateItem>;
    GVT: Array<RateItem>;
    ETH: Array<RateItem>;
    BTC: Array<RateItem>;
    ADA: Array<RateItem>;
    USDT: Array<RateItem>;
    XRP: Array<RateItem>;
    BCH: Array<RateItem>;
    LTC: Array<RateItem>;
    DOGE: Array<RateItem>;
    BNB: Array<RateItem>;
    USD: Array<RateItem>;
    EUR: Array<RateItem>;
}
export interface ReallocationModel {
    date: Date;
    parts: Array<FundAssetPartWithIcon>;
}
export interface ReallocationsViewModel {
    reallocations: Array<ReallocationModel>;
    total: number;
}
export interface RecoveryCode {
    code: string;
    isActive: boolean;
}
export interface RecoveryCodesViewModel {
    codes: Array<RecoveryCode>;
    authToken: string;
}
export interface RegisterInvestorViewModel {
    password: string;
    confirmPassword: string;
    refCode: string;
    isAuto: boolean;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface RegisterManagerViewModel {
    userName: string;
    password: string;
    confirmPassword: string;
    refCode: string;
    isAuto: boolean;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ResendConfirmationViewModel {
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ResetPasswordViewModel {
    userId: string;
    code: string;
    password: string;
    confirmPassword: string;
}
export interface SearchViewModel {
    programs: ProgramsList;
    funds: FundsList;
    managers: ManagersList;
}
export interface SignalDataMaster {
    login: string;
    share: number;
}
export interface SignalDetails {
    statistic: ProgramDetailsListStatistic;
    personalDetails: PersonalSignalDetailsFull;
    currency: SignalDetailsCurrencyEnum;
    level: number;
    levelProgress: number;
    tags: Array<ProgramTag>;
    subscribers: number;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: SignalDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}
export declare type SignalDetailsCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type SignalDetailsStatusEnum = 'None' | 'Pending' | 'ErrorCreating' | 'Active' | 'Closed' | 'Archived' | 'ClosedDueToInactivity';
export interface SignalFee {
    title: string;
    type: SignalFeeTypeEnum;
    value: number;
    currency: SignalFeeCurrencyEnum;
}
export declare type SignalFeeTypeEnum = 'Undefined' | 'GvProgramEntry' | 'GvProgramSuccess' | 'GvFundEntry' | 'GvGmGvtHolderFee' | 'ManagerProgramEntry' | 'ManagerProgramSuccess' | 'ManagerFundEntry' | 'ManagerFundExit' | 'GvWithdrawal' | 'ManagerSignalMasterSuccessFee' | 'ManagerSignalMasterVolumeFee' | 'GvSignalSuccessFee';
export declare type SignalFeeCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface SignalProviderSubscribers {
    subscribers: Array<SignalSubscriber>;
    total: number;
}
export interface SignalSubscriber {
    number: number;
    trades: number;
    profit: number;
    volume: number;
    subscriptionDate: Date;
    unsubscriptionDate: Date;
    status: SignalSubscriberStatusEnum;
    totalCommissionAmount: number;
    totalCommissionCurrency: SignalSubscriberTotalCommissionCurrencyEnum;
    totalSuccessFeeAmount: number;
    totalSuccessFeeCurrency: SignalSubscriberTotalSuccessFeeCurrencyEnum;
    totalVolumeFeeAmount: number;
    totalVolumeFeeCurrency: SignalSubscriberTotalVolumeFeeCurrencyEnum;
}
export declare type SignalSubscriberStatusEnum = 'Active' | 'Ended';
export declare type SignalSubscriberTotalCommissionCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type SignalSubscriberTotalSuccessFeeCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type SignalSubscriberTotalVolumeFeeCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface SignalSubscription {
    hasSignalAccount: boolean;
    hasActiveSubscription: boolean;
    mode: SignalSubscriptionModeEnum;
    percent: number;
    openTolerancePercent: number;
    fixedVolume: number;
    fixedCurrency: SignalSubscriptionFixedCurrencyEnum;
    totalProfit: number;
    totalVolume: number;
}
export declare type SignalSubscriptionModeEnum = 'ByBalance' | 'Percent' | 'Fixed';
export declare type SignalSubscriptionFixedCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface SignalTradingEvent {
    date: Date;
    message: string;
}
export interface SignalTradingEvents {
    events: Array<SignalTradingEvent>;
    total: number;
}
export interface SignalsList {
    programs: Array<SignalDetails>;
    total: number;
}
export interface SocialLinkViewModel {
    url: string;
    logo: string;
    name: string;
    value: string;
    type: SocialLinkViewModelTypeEnum;
}
export declare type SocialLinkViewModelTypeEnum = 'Undefined' | 'Twitter' | 'Telegram' | 'Facebook' | 'LinkedIn' | 'Youtube' | 'WeChat' | 'Email';
export interface SocialLinksViewModel {
    socialLinks: Array<SocialLinkViewModel>;
}
export interface TotalCommission {
    amount: number;
    currency: TotalCommissionCurrencyEnum;
    type: TotalCommissionTypeEnum;
    title: string;
}
export declare type TotalCommissionCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type TotalCommissionTypeEnum = 'Undefined' | 'GvProgramEntry' | 'GvProgramSuccess' | 'GvFundEntry' | 'GvGmGvtHolderFee' | 'ManagerProgramEntry' | 'ManagerProgramSuccess' | 'ManagerFundEntry' | 'ManagerFundExit' | 'GvWithdrawal' | 'ManagerSignalMasterSuccessFee' | 'ManagerSignalMasterVolumeFee' | 'GvSignalSuccessFee';
export interface TradesSignalViewModel {
    showSwaps: boolean;
    showTickets: boolean;
    trades: Array<OrderSignalModel>;
    total: number;
}
export interface TradesViewModel {
    showSwaps: boolean;
    showTickets: boolean;
    trades: Array<OrderModel>;
    total: number;
}
export interface TransactionDetails {
    type: TransactionDetailsTypeEnum;
    programDetails: ProgramTransactionDetails;
    convertingDetails: ConvertingDetails;
    externalTransactionDetails: ExternalTransactionDetails;
    status: TransactionDetailsStatusEnum;
    signalFees: Array<SignalFee>;
    currency: TransactionDetailsCurrencyEnum;
    currencyName: string;
    currencyLogo: string;
    gvCommission: number;
    gvCommissionCurrency: TransactionDetailsGvCommissionCurrencyEnum;
    gvCommissionPercent: number;
    amount: number;
}
export declare type TransactionDetailsTypeEnum = 'Investing' | 'Withdrawal' | 'ExternalWithdrawal' | 'ExternalDeposit' | 'Converting' | 'Open' | 'Close' | 'Profit' | 'PlatformFee' | 'SubscribeSignal' | 'ReceiveSignal' | 'DepositSignal' | 'WithdrawalSignal' | 'Platform';
export declare type TransactionDetailsStatusEnum = 'Done' | 'Pending' | 'Canceled' | 'Error';
export declare type TransactionDetailsCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type TransactionDetailsGvCommissionCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface TwoFactorAuthenticator {
    sharedKey: string;
    authenticatorUri: string;
}
export interface TwoFactorAuthenticatorConfirm {
    code: string;
    sharedKey: string;
    password: string;
}
export interface TwoFactorCodeModel {
    twoFactorCode: string;
    password: string;
}
export interface TwoFactorStatus {
    twoFactorEnabled: boolean;
}
export interface UpdatePersonalDetailViewModel {
    firstName: string;
    middleName: string;
    lastName: string;
    birthday: Date;
    citizenship: string;
    gender: boolean;
    documentId: string;
    phoneNumber: string;
    country: string;
    city: string;
    address: string;
    index: string;
}
export interface UpdateProfileViewModel {
    userName: string;
    about: string;
}
export interface UpdateSocialLinkViewModel {
    type: UpdateSocialLinkViewModelTypeEnum;
    value: string;
}
export declare type UpdateSocialLinkViewModelTypeEnum = 'Undefined' | 'Twitter' | 'Telegram' | 'Facebook' | 'LinkedIn' | 'Youtube' | 'WeChat' | 'Email';
export interface UploadResult {
    id: string;
}
export interface UserCommissionData {
    isPayingCommissionInGvt: boolean;
    gvtHolderTradingFee: number;
    gvtHolderDiscount: number;
    regularTradingFee: number;
    regularDiscount: number;
}
export interface ValueChartBar {
    value: number;
    date: Date;
    topAssets: Array<AssetsValue>;
    otherAssetsValue: OtherAssetsValue;
}
export interface WalletBaseData {
    id: string;
    title: string;
    logo: string;
    currency: WalletBaseDataCurrencyEnum;
    available: number;
    rate: number;
}
export declare type WalletBaseDataCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletData {
    id: string;
    title: string;
    logo: string;
    rateToGVT: number;
    isDepositEnabled: boolean;
    isWithdrawalEnabled: boolean;
    withdrawalCommission: number;
    depositAddress: string;
    currency: WalletDataCurrencyEnum;
    available: number;
    invested: number;
    pending: number;
    total: number;
    currencyCcy: WalletDataCurrencyCcyEnum;
    availableCcy: number;
    investedCcy: number;
    pendingCcy: number;
    totalCcy: number;
}
export declare type WalletDataCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type WalletDataCurrencyCcyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletInfo {
    currency: WalletInfoCurrencyEnum;
    address: string;
    rateToGVT: number;
    description: string;
    logo: string;
    isDepositEnabled: boolean;
}
export declare type WalletInfoCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletMultiAvailable {
    wallets: Array<WalletBaseData>;
}
export interface WalletMultiSummary {
    grandTotal: WalletsGrandTotal;
    wallets: Array<WalletData>;
    payFeesWithGvt: boolean;
}
export interface WalletSummary {
    totalBalanceGVT: number;
    totalBalanceCurrency: number;
    investedGVT: number;
    investedCurrency: number;
    availableGVT: number;
    availableCurrency: number;
}
export interface WalletTransaction {
    id: string;
    amount: number;
    amountConverted: number;
    date: Date;
    number: number;
    sourceId: string;
    sourceType: WalletTransactionSourceTypeEnum;
    sourceCurrency: WalletTransactionSourceCurrencyEnum;
    sourceProgramInfo: ProgramInfo;
    sourceBlockchainInfo: BlockchainInfo;
    sourceWithdrawalInfo: WithdrawalInfo;
    action: WalletTransactionActionEnum;
    information: string;
    destinationId: string;
    destinationType: WalletTransactionDestinationTypeEnum;
    destinationCurrency: WalletTransactionDestinationCurrencyEnum;
    destinationProgramInfo: ProgramInfo;
    destinationBlockchainInfo: BlockchainInfo;
    destinationWithdrawalInfo: WithdrawalInfo;
}
export declare type WalletTransactionSourceTypeEnum = 'Wallet' | 'Program' | 'Fund' | 'ProgramRequest' | 'FundRequest' | 'WithdrawalRequest' | 'PaymentTransaction' | 'Blockchain' | 'GenesisVisionPlatform' | 'SignalMasterSetting' | 'SignalTradingAccount';
export declare type WalletTransactionSourceCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type WalletTransactionActionEnum = 'Transfer' | 'ProgramOpen' | 'ProgramProfit' | 'ProgramInvest' | 'ProgramWithdrawal' | 'ProgramRefundPartialExecution' | 'ProgramRefundClose' | 'ProgramRefundStopOut' | 'ProgramRequestInvest' | 'ProgramRequestWithdrawal' | 'ProgramRequestCancel' | 'PayingTradingFee' | 'SignalSubscriberPayingFee' | 'SignalProviderReceiveFee';
export declare type WalletTransactionDestinationTypeEnum = 'Wallet' | 'Program' | 'Fund' | 'ProgramRequest' | 'FundRequest' | 'WithdrawalRequest' | 'PaymentTransaction' | 'Blockchain' | 'GenesisVisionPlatform' | 'SignalMasterSetting' | 'SignalTradingAccount';
export declare type WalletTransactionDestinationCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletTransactionsViewModel {
    transactions: Array<WalletTransaction>;
    total: number;
}
export interface WalletWithdrawalInfo {
    currency: WalletWithdrawalInfoCurrencyEnum;
    description: string;
    logo: string;
    commission: number;
    rateToGvt: number;
    availableToWithdrawal: number;
}
export declare type WalletWithdrawalInfoCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletsGrandTotal {
    currency: WalletsGrandTotalCurrencyEnum;
    available: number;
    invested: number;
    pending: number;
    total: number;
    currencyCcy: WalletsGrandTotalCurrencyCcyEnum;
    availableCcy: number;
    investedCcy: number;
    pendingCcy: number;
    totalCcy: number;
}
export declare type WalletsGrandTotalCurrencyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export declare type WalletsGrandTotalCurrencyCcyEnum = 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR';
export interface WalletsInfo {
    wallets: Array<WalletInfo>;
}
export interface WithdrawalInfo {
    wallet: string;
    status: WithdrawalInfoStatusEnum;
    canResendEmail: boolean;
    canCancelRequest: boolean;
}
export declare type WithdrawalInfoStatusEnum = 'New' | 'InProcess' | 'Done' | 'Error' | 'Rejected' | 'Cancelled';
export interface WithdrawalSummary {
    availableToWithdrawal: number;
    wallets: Array<WalletWithdrawalInfo>;
}
export declare const AuthApiFetchParamCreator: (configuration?: Configuration) => {
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): FetchArgs;
    v10Auth2faCreatePost(authorization: string, options?: any): FetchArgs;
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): FetchArgs;
    v10Auth2faGet(authorization: string, options?: any): FetchArgs;
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): FetchArgs;
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): FetchArgs;
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): FetchArgs;
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): FetchArgs;
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): FetchArgs;
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): FetchArgs;
    v10AuthPhoneCodePost(authorization: string, options?: any): FetchArgs;
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): FetchArgs;
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): FetchArgs;
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): FetchArgs;
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): FetchArgs;
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): FetchArgs;
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): FetchArgs;
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): FetchArgs;
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): FetchArgs;
    v10AuthTokenUpdatePost(authorization: string, options?: any): FetchArgs;
};
export declare const AuthApiFp: (configuration?: Configuration) => {
    v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    v10Auth2faCreatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator>;
    v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10Auth2faGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorStatus>;
    v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel>;
    v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthPhoneCodePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10AuthTokenUpdatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
export declare class AuthApi extends BaseAPI {
    v10Auth2faConfirmPost(authorization: string, options?: {
        model?: TwoFactorAuthenticatorConfirm;
    }, init?: RequestInit): Promise<RecoveryCodesViewModel>;
    v10Auth2faCreatePost(authorization: string, init?: RequestInit): Promise<TwoFactorAuthenticator>;
    v10Auth2faDisablePost(authorization: string, options?: {
        model?: TwoFactorCodeModel;
    }, init?: RequestInit): Promise<void>;
    v10Auth2faGet(authorization: string, init?: RequestInit): Promise<TwoFactorStatus>;
    v10Auth2faRecoverycodesNewPost(authorization: string, options?: {
        model?: PasswordModel;
    }, init?: RequestInit): Promise<RecoveryCodesViewModel>;
    v10Auth2faRecoverycodesPost(authorization: string, options?: {
        model?: PasswordModel;
    }, init?: RequestInit): Promise<RecoveryCodesViewModel>;
    v10AuthPasswordChangePost(authorization: string, options?: {
        model?: ChangePasswordViewModel;
    }, init?: RequestInit): Promise<string>;
    v10AuthPasswordForgotInvestorPost(options?: {
        model?: ForgotPasswordViewModel;
    }, init?: RequestInit): Promise<void>;
    v10AuthPasswordForgotManagerPost(options?: {
        model?: ForgotPasswordViewModel;
    }, init?: RequestInit): Promise<void>;
    v10AuthPasswordResetPost(options?: {
        model?: ResetPasswordViewModel;
    }, init?: RequestInit): Promise<string>;
    v10AuthPhoneCodePost(authorization: string, init?: RequestInit): Promise<number>;
    v10AuthPhoneVerifyPost(authorization: string, options?: {
        code?: string;
    }, init?: RequestInit): Promise<void>;
    v10AuthResendconfirmationlinkPost(options?: {
        model?: ResendConfirmationViewModel;
    }, init?: RequestInit): Promise<void>;
    v10AuthSigninInvestorPost(options?: {
        model?: LoginViewModel;
    }, init?: RequestInit): Promise<string>;
    v10AuthSigninManagerPost(options?: {
        model?: LoginViewModel;
    }, init?: RequestInit): Promise<string>;
    v10AuthSignupConfirmPost(options?: {
        userId?: string;
        code?: string;
    }, init?: RequestInit): Promise<string>;
    v10AuthSignupInvestorPost(options?: {
        model?: RegisterInvestorViewModel;
    }, init?: RequestInit): Promise<void>;
    v10AuthSignupManagerPost(options?: {
        model?: RegisterManagerViewModel;
    }, init?: RequestInit): Promise<void>;
    v10AuthTokenDevicesLogoutPost(authorization: string, init?: RequestInit): Promise<string>;
    v10AuthTokenUpdatePost(authorization: string, init?: RequestInit): Promise<string>;
}
export declare const BrokersApiFetchParamCreator: (configuration?: Configuration) => {
    v10BrokersByProgramIdGet(programId: string, options?: any): FetchArgs;
    v10BrokersGet(options?: any): FetchArgs;
};
export declare const BrokersApiFp: (configuration?: Configuration) => {
    v10BrokersByProgramIdGet(programId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersProgramInfo>;
    v10BrokersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersInfo>;
};
export declare class BrokersApi extends BaseAPI {
    v10BrokersByProgramIdGet(programId: string, init?: RequestInit): Promise<BrokersProgramInfo>;
    v10BrokersGet(init?: RequestInit): Promise<BrokersInfo>;
}
export declare const FileApiFetchParamCreator: (configuration?: Configuration) => {
    v10FileByIdGet(id: string, options?: any): FetchArgs;
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): FetchArgs;
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): FetchArgs;
};
export declare const FileApiFp: (configuration?: Configuration) => {
    v10FileByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult>;
    v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult>;
};
export declare class FileApi extends BaseAPI {
    v10FileByIdGet(id: string, init?: RequestInit): Promise<void>;
    v10FileDocumentUploadPost(authorization: string, uploadedFile: any, init?: RequestInit): Promise<UploadResult>;
    v10FileUploadPost(uploadedFile: any, options?: {
        authorization?: string;
    }, init?: RequestInit): Promise<UploadResult>;
}
export declare const FundsApiFetchParamCreator: (configuration?: Configuration) => {
    v10FundsAssetsGet(options?: any): FetchArgs;
    v10FundsByIdAssetsGet(id: string, options?: any): FetchArgs;
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): FetchArgs;
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): FetchArgs;
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): FetchArgs;
    v10FundsByIdReallocationsGet(id: string, dateFrom?: Date, dateTo?: Date, skip?: number, take?: number, options?: any): FetchArgs;
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, assets?: string[], statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: string[], managerId?: string, programManagerId?: string, status?: string[], skip?: number, take?: number, options?: any): FetchArgs;
    v10FundsSetsGet(authorization: string, options?: any): FetchArgs;
};
export declare const FundsApiFp: (configuration?: Configuration) => {
    v10FundsAssetsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformAssets>;
    v10FundsByIdAssetsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundAssetsListInfo>;
    v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundBalanceChart>;
    v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundProfitChart>;
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundDetailsFull>;
    v10FundsByIdReallocationsGet(id: string, dateFrom?: Date, dateTo?: Date, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReallocationsViewModel>;
    v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, assets?: string[], statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: string[], managerId?: string, programManagerId?: string, status?: string[], skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    v10FundsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundSets>;
};
export declare class FundsApi extends BaseAPI {
    v10FundsAssetsGet(init?: RequestInit): Promise<PlatformAssets>;
    v10FundsByIdAssetsGet(id: string, init?: RequestInit): Promise<FundAssetsListInfo>;
    v10FundsByIdChartsBalanceGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        maxPointCount?: number;
    }, init?: RequestInit): Promise<FundBalanceChart>;
    v10FundsByIdChartsProfitGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        maxPointCount?: number;
    }, init?: RequestInit): Promise<FundProfitChart>;
    v10FundsByIdFavoriteAddPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10FundsByIdFavoriteRemovePost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10FundsByIdGet(id: string, options?: {
        authorization?: string;
        currencySecondary?: string;
    }, init?: RequestInit): Promise<FundDetailsFull>;
    v10FundsByIdReallocationsGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ReallocationsViewModel>;
    v10FundsGet(options?: {
        authorization?: string;
        sorting?: string;
        currencySecondary?: string;
        assets?: Array<string>;
        statisticDateFrom?: Date;
        statisticDateTo?: Date;
        chartPointsCount?: number;
        mask?: string;
        facetId?: string;
        isFavorite?: boolean;
        isEnabled?: boolean;
        hasInvestorsForAll?: boolean;
        hasInvestorsForClosed?: boolean;
        ids?: Array<string>;
        managerId?: string;
        programManagerId?: string;
        status?: Array<string>;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<FundsList>;
    v10FundsSetsGet(authorization: string, init?: RequestInit): Promise<FundSets>;
}
export declare const InvestorApiFetchParamCreator: (configuration?: Configuration) => {
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): FetchArgs;
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): FetchArgs;
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, withdrawAll?: boolean, options?: any): FetchArgs;
    v10InvestorProgramsByIdWithdrawMultiPost(id: string, authorization: string, amount?: number, withdrawAll?: boolean, options?: any): FetchArgs;
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): FetchArgs;
    v10InvestorSignalsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): FetchArgs;
};
export declare const InvestorApiFp: (configuration?: Configuration) => {
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo>;
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundWithdrawInfo>;
    v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardSummary>;
    v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardChartValue>;
    v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardPortfolioEvents>;
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo>;
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramWithdrawInfo>;
    v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, withdrawAll?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsByIdWithdrawMultiPost(id: string, authorization: string, amount?: number, withdrawAll?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10InvestorSignalsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalsList>;
};
export declare class InvestorApi extends BaseAPI {
    v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<FundInvestInfo>;
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, init?: RequestInit): Promise<ProgramRequests>;
    v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<FundWithdrawInfo>;
    v10InvestorFundsGet(authorization: string, options?: {
        sorting?: string;
        from?: Date;
        to?: Date;
        chartPointsCount?: number;
        currencySecondary?: string;
        actionStatus?: string;
        dashboardActionStatus?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<FundsList>;
    v10InvestorGet(authorization: string, options?: {
        chartCurrency?: string;
        from?: Date;
        to?: Date;
        balancePoints?: number;
        programsPoints?: number;
        eventsTake?: number;
        requestsSkip?: number;
        requestsTake?: number;
    }, init?: RequestInit): Promise<DashboardSummary>;
    v10InvestorPortfolioChartGet(authorization: string, options?: {
        currency?: string;
        from?: Date;
        to?: Date;
        balancePoints?: number;
        programsPoints?: number;
    }, init?: RequestInit): Promise<DashboardChartValue>;
    v10InvestorPortfolioEventsGet(authorization: string, options?: {
        assetId?: string;
        from?: Date;
        to?: Date;
        type?: string;
        assetType?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<DashboardPortfolioEvents>;
    v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<ProgramInvestInfo>;
    v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, init?: RequestInit): Promise<ProgramRequests>;
    v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, init?: RequestInit): Promise<void>;
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<ProgramWithdrawInfo>;
    v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, options?: {
        withdrawAll?: boolean;
    }, init?: RequestInit): Promise<void>;
    v10InvestorProgramsByIdWithdrawMultiPost(id: string, authorization: string, options?: {
        amount?: number;
        withdrawAll?: boolean;
    }, init?: RequestInit): Promise<void>;
    v10InvestorProgramsGet(authorization: string, options?: {
        sorting?: string;
        from?: Date;
        to?: Date;
        chartPointsCount?: number;
        currencySecondary?: string;
        actionStatus?: string;
        dashboardActionStatus?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ProgramsList>;
    v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, init?: RequestInit): Promise<ProgramRequests>;
    v10InvestorSignalsGet(authorization: string, options?: {
        sorting?: string;
        from?: Date;
        to?: Date;
        chartPointsCount?: number;
        currencySecondary?: string;
        actionStatus?: string;
        dashboardActionStatus?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<SignalsList>;
}
export declare const ManagerApiFetchParamCreator: (configuration?: Configuration) => {
    v10ManagerAssetsGet(authorization: string, options?: any): FetchArgs;
    v10ManagerByIdDetailsGet(id: string, options?: any): FetchArgs;
    v10ManagerByIdGet(id: string, options?: any): FetchArgs;
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: FundAssetPart[], options?: any): FetchArgs;
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): FetchArgs;
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): FetchArgs;
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): FetchArgs;
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): FetchArgs;
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ManagerPrograms2faConfirmPost(authorization: string, programId?: string, code?: string, options?: any): FetchArgs;
    v10ManagerPrograms2faGetGet(authorization: string, programId?: string, options?: any): FetchArgs;
    v10ManagerProgramsBrokerChangeCancelPost(authorization: string, programId?: string, options?: any): FetchArgs;
    v10ManagerProgramsBrokerChangePost(authorization: string, request?: ChangeBrokerProgramRequest, options?: any): FetchArgs;
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdLevelsInfoGet(id: string, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdPasswordChangePost(id: string, authorization: string, model?: ProgramPwdUpdate, options?: any): FetchArgs;
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): FetchArgs;
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, options?: any): FetchArgs;
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): FetchArgs;
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ManagerProgramsInvestmentAmountGet(authorization: string, brokerTradingAccount?: string, options?: any): FetchArgs;
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): FetchArgs;
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, assetType?: string, options?: any): FetchArgs;
    v10ManagerSignalCreatePost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): FetchArgs;
    v10ManagerSignalEditPost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): FetchArgs;
};
export declare const ManagerApiFp: (configuration?: Configuration) => {
    v10ManagerAssetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerAssets>;
    v10ManagerByIdDetailsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfileDetails>;
    v10ManagerByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfile>;
    v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerPortfolioEvents>;
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: FundAssetPart[], options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo>;
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerFundWithdrawInfo>;
    v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList>;
    v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerDashboard>;
    v10ManagerPrograms2faConfirmPost(authorization: string, programId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerPrograms2faGetGet(authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator>;
    v10ManagerProgramsBrokerChangeCancelPost(authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsBrokerChangePost(authorization: string, request?: ChangeBrokerProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo>;
    v10ManagerProgramsByIdLevelsInfoGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramLevelInfo>;
    v10ManagerProgramsByIdPasswordChangePost(id: string, authorization: string, model?: ProgramPwdUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramWithdrawInfo>;
    v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramCreateResult>;
    v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    v10ManagerProgramsInvestmentAmountGet(authorization: string, brokerTradingAccount?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramMinimumDeposit>;
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, assetType?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests>;
    v10ManagerSignalCreatePost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ManagerSignalEditPost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
};
export declare class ManagerApi extends BaseAPI {
    v10ManagerAssetsGet(authorization: string, init?: RequestInit): Promise<ManagerAssets>;
    v10ManagerByIdDetailsGet(id: string, init?: RequestInit): Promise<ManagerProfileDetails>;
    v10ManagerByIdGet(id: string, init?: RequestInit): Promise<ManagerProfile>;
    v10ManagerEventsGet(authorization: string, options?: {
        assetId?: string;
        from?: Date;
        to?: Date;
        type?: string;
        assetType?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ManagerPortfolioEvents>;
    v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, options?: {
        assets?: Array<FundAssetPart>;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsByIdClosePost(id: string, authorization: string, options?: {
        twoFactorCode?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<FundInvestInfo>;
    v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, init?: RequestInit): Promise<ProgramRequests>;
    v10ManagerFundsByIdUpdatePost(id: string, authorization: string, options?: {
        model?: ProgramUpdate;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<ManagerFundWithdrawInfo>;
    v10ManagerFundsCreatePost(authorization: string, options?: {
        request?: NewFundRequest;
    }, init?: RequestInit): Promise<void>;
    v10ManagerFundsGet(authorization: string, options?: {
        sorting?: string;
        from?: Date;
        to?: Date;
        chartPointsCount?: number;
        currencySecondary?: string;
        actionStatus?: string;
        dashboardActionStatus?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<FundsList>;
    v10ManagerFundsInvestmentAmountGet(authorization: string, init?: RequestInit): Promise<number>;
    v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ManagerGet(authorization: string, options?: {
        assetId?: string;
        from?: Date;
        to?: Date;
        type?: string;
        assetType?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ManagerDashboard>;
    v10ManagerPrograms2faConfirmPost(authorization: string, options?: {
        programId?: string;
        code?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerPrograms2faGetGet(authorization: string, options?: {
        programId?: string;
    }, init?: RequestInit): Promise<TwoFactorAuthenticator>;
    v10ManagerProgramsBrokerChangeCancelPost(authorization: string, options?: {
        programId?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsBrokerChangePost(authorization: string, options?: {
        request?: ChangeBrokerProgramRequest;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdClosePost(id: string, authorization: string, options?: {
        twoFactorCode?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, options?: {
        currency?: string;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<ProgramInvestInfo>;
    v10ManagerProgramsByIdLevelsInfoGet(id: string, authorization: string, init?: RequestInit): Promise<ProgramLevelInfo>;
    v10ManagerProgramsByIdPasswordChangePost(id: string, authorization: string, options?: {
        model?: ProgramPwdUpdate;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, init?: RequestInit): Promise<ProgramRequests>;
    v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, options?: {
        model?: ProgramUpdate;
    }, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, init?: RequestInit): Promise<void>;
    v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, init?: RequestInit): Promise<ManagerProgramWithdrawInfo>;
    v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, init?: RequestInit): Promise<void>;
    v10ManagerProgramsCreatePost(authorization: string, options?: {
        request?: NewProgramRequest;
    }, init?: RequestInit): Promise<ManagerProgramCreateResult>;
    v10ManagerProgramsGet(authorization: string, options?: {
        sorting?: string;
        from?: Date;
        to?: Date;
        chartPointsCount?: number;
        currencySecondary?: string;
        actionStatus?: string;
        dashboardActionStatus?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ProgramsList>;
    v10ManagerProgramsInvestmentAmountGet(authorization: string, options?: {
        brokerTradingAccount?: string;
    }, init?: RequestInit): Promise<ProgramMinimumDeposit>;
    v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: {
        assetType?: string;
    }, init?: RequestInit): Promise<ProgramRequests>;
    v10ManagerSignalCreatePost(authorization: string, options?: {
        programId?: string;
        volumeFee?: number;
        successFee?: number;
    }, init?: RequestInit): Promise<void>;
    v10ManagerSignalEditPost(authorization: string, options?: {
        programId?: string;
        volumeFee?: number;
        successFee?: number;
    }, init?: RequestInit): Promise<void>;
}
export declare const NotificationsApiFetchParamCreator: (configuration?: Configuration) => {
    v10NotificationsByIdReadPost(id: string, authorization: string, options?: any): FetchArgs;
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10NotificationsNewGet(authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): FetchArgs;
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsGet(authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): FetchArgs;
};
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    v10NotificationsByIdReadPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationList>;
    v10NotificationsNewGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundNotificationSettingList>;
    v10NotificationsSettingsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationSettingList>;
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerNotificationSettingList>;
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramNotificationSettingList>;
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
};
export declare class NotificationsApi extends BaseAPI {
    v10NotificationsByIdReadPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10NotificationsGet(authorization: string, options?: {
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<NotificationList>;
    v10NotificationsNewGet(authorization: string, init?: RequestInit): Promise<number>;
    v10NotificationsSettingsAddPost(authorization: string, options?: {
        assetId?: string;
        managerId?: string;
        type?: string;
        conditionType?: string;
        conditionAmount?: number;
    }, init?: RequestInit): Promise<string>;
    v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, init?: RequestInit): Promise<string>;
    v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, init?: RequestInit): Promise<FundNotificationSettingList>;
    v10NotificationsSettingsGet(authorization: string, init?: RequestInit): Promise<NotificationSettingList>;
    v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, init?: RequestInit): Promise<ManagerNotificationSettingList>;
    v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, init?: RequestInit): Promise<ProgramNotificationSettingList>;
    v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
}
export declare const PlatformApiFetchParamCreator: (configuration?: Configuration) => {
    v10PlatformDatePost(options?: any): FetchArgs;
    v10PlatformInfoGet(options?: any): FetchArgs;
    v10PlatformLevelsGet(currency?: string, options?: any): FetchArgs;
    v10PlatformLevelsParametersGet(currency?: string, options?: any): FetchArgs;
    v10PlatformRiskcontrolGet(route: string, client?: string, version?: string, options?: any): FetchArgs;
    v10PlatformStatisticGet(options?: any): FetchArgs;
};
export declare const PlatformApiFp: (configuration?: Configuration) => {
    v10PlatformDatePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10PlatformInfoGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformInfo>;
    v10PlatformLevelsGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsLevelsInfo>;
    v10PlatformLevelsParametersGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelsParamsInfo>;
    v10PlatformRiskcontrolGet(route: string, client?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CaptchaDetails>;
    v10PlatformStatisticGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformStatistic>;
};
export declare class PlatformApi extends BaseAPI {
    v10PlatformDatePost(init?: RequestInit): Promise<string>;
    v10PlatformInfoGet(init?: RequestInit): Promise<PlatformInfo>;
    v10PlatformLevelsGet(options?: {
        currency?: string;
    }, init?: RequestInit): Promise<ProgramsLevelsInfo>;
    v10PlatformLevelsParametersGet(options?: {
        currency?: string;
    }, init?: RequestInit): Promise<LevelsParamsInfo>;
    v10PlatformRiskcontrolGet(route: string, options?: {
        client?: string;
        version?: string;
    }, init?: RequestInit): Promise<CaptchaDetails>;
    v10PlatformStatisticGet(init?: RequestInit): Promise<PlatformStatistic>;
}
export declare const ProfileApiFetchParamCreator: (configuration?: Configuration) => {
    v10ProfileAvatarRemovePost(authorization: string, options?: any): FetchArgs;
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): FetchArgs;
    v10ProfileGet(authorization: string, options?: any): FetchArgs;
    v10ProfileHeaderGet(authorization: string, options?: any): FetchArgs;
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): FetchArgs;
    v10ProfilePushTokenPost(authorization: string, token?: FcmTokenViewModel, options?: any): FetchArgs;
    v10ProfileSociallinksGet(authorization: string, options?: any): FetchArgs;
    v10ProfileSociallinksUpdatePost(authorization: string, model?: UpdateSocialLinkViewModel, options?: any): FetchArgs;
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): FetchArgs;
    v10ProfileVerificationTokenPost(authorization: string, options?: any): FetchArgs;
};
export declare const ProfileApiFp: (configuration?: Configuration) => {
    v10ProfileAvatarRemovePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfileGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileFullViewModel>;
    v10ProfileHeaderGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileHeaderViewModel>;
    v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfilePushTokenPost(authorization: string, token?: FcmTokenViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfileSociallinksGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialLinksViewModel>;
    v10ProfileSociallinksUpdatePost(authorization: string, model?: UpdateSocialLinkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProfileVerificationTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
export declare class ProfileApi extends BaseAPI {
    v10ProfileAvatarRemovePost(authorization: string, init?: RequestInit): Promise<void>;
    v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ProfileGet(authorization: string, init?: RequestInit): Promise<ProfileFullViewModel>;
    v10ProfileHeaderGet(authorization: string, init?: RequestInit): Promise<ProfileHeaderViewModel>;
    v10ProfilePersonalUpdatePost(authorization: string, options?: {
        model?: UpdatePersonalDetailViewModel;
    }, init?: RequestInit): Promise<void>;
    v10ProfilePushTokenPost(authorization: string, options?: {
        token?: FcmTokenViewModel;
    }, init?: RequestInit): Promise<void>;
    v10ProfileSociallinksGet(authorization: string, init?: RequestInit): Promise<SocialLinksViewModel>;
    v10ProfileSociallinksUpdatePost(authorization: string, options?: {
        model?: UpdateSocialLinkViewModel;
    }, init?: RequestInit): Promise<void>;
    v10ProfileUpdatePost(authorization: string, options?: {
        model?: UpdateProfileViewModel;
    }, init?: RequestInit): Promise<void>;
    v10ProfileVerificationTokenPost(authorization: string, init?: RequestInit): Promise<string>;
}
export declare const ProgramsApiFetchParamCreator: (configuration?: Configuration) => {
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): FetchArgs;
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): FetchArgs;
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): FetchArgs;
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): FetchArgs;
    v10ProgramsByIdPeriodsExportGet(id: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByIdPeriodsExportStatisticGet(id: string, authorization: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByIdPeriodsGet(id: string, authorization?: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByIdSubscribersGet(id: string, authorization: string, status?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByIdTradesOpenGet(id: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsByProgramIdTradesExportGet(programId: string, start?: Date, end?: Date, options?: any): FetchArgs;
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, levelsSet?: number[], profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, tags?: string[], isSignal?: boolean, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: string[], managerId?: string, programManagerId?: string, status?: string[], skip?: number, take?: number, options?: any): FetchArgs;
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): FetchArgs;
    v10ProgramsSetsGet(authorization: string, options?: any): FetchArgs;
};
export declare const ProgramsApiFp: (configuration?: Configuration) => {
    v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramBalanceChart>;
    v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramProfitChart>;
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramDetailsFull>;
    v10ProgramsByIdPeriodsExportGet(id: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10ProgramsByIdPeriodsExportStatisticGet(id: string, authorization: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10ProgramsByIdPeriodsGet(id: string, authorization?: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramPeriodsViewModel>;
    v10ProgramsByIdSubscribersGet(id: string, authorization: string, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalProviderSubscribers>;
    v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel>;
    v10ProgramsByIdTradesOpenGet(id: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel>;
    v10ProgramsByProgramIdTradesExportGet(programId: string, start?: Date, end?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
    v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, levelsSet?: number[], profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, tags?: string[], isSignal?: boolean, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: string[], managerId?: string, programManagerId?: string, status?: string[], skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList>;
    v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelUpSummary>;
    v10ProgramsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets>;
};
export declare class ProgramsApi extends BaseAPI {
    v10ProgramsByIdChartsBalanceGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        maxPointCount?: number;
    }, init?: RequestInit): Promise<ProgramBalanceChart>;
    v10ProgramsByIdChartsProfitGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        maxPointCount?: number;
    }, init?: RequestInit): Promise<ProgramProfitChart>;
    v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, init?: RequestInit): Promise<void>;
    v10ProgramsByIdGet(id: string, options?: {
        authorization?: string;
        currencySecondary?: string;
    }, init?: RequestInit): Promise<ProgramDetailsFull>;
    v10ProgramsByIdPeriodsExportGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        numberMin?: number;
        numberMax?: number;
        status?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<string>;
    v10ProgramsByIdPeriodsExportStatisticGet(id: string, authorization: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        numberMin?: number;
        numberMax?: number;
        status?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<string>;
    v10ProgramsByIdPeriodsGet(id: string, options?: {
        authorization?: string;
        dateFrom?: Date;
        dateTo?: Date;
        numberMin?: number;
        numberMax?: number;
        status?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ProgramPeriodsViewModel>;
    v10ProgramsByIdSubscribersGet(id: string, authorization: string, options?: {
        status?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<SignalProviderSubscribers>;
    v10ProgramsByIdTradesGet(id: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        symbol?: string;
        sorting?: string;
        accountId?: string;
        accountCurrency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<TradesViewModel>;
    v10ProgramsByIdTradesOpenGet(id: string, options?: {
        sorting?: string;
        symbol?: string;
        accountId?: string;
        accountCurrency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<TradesViewModel>;
    v10ProgramsByProgramIdTradesExportGet(programId: string, options?: {
        start?: Date;
        end?: Date;
    }, init?: RequestInit): Promise<string>;
    v10ProgramsGet(options?: {
        authorization?: string;
        levelMin?: number;
        levelMax?: number;
        levelsSet?: Array<number>;
        profitAvgMin?: number;
        profitAvgMax?: number;
        sorting?: string;
        programCurrency?: string;
        currencySecondary?: string;
        levelUpFrom?: number;
        tags?: Array<string>;
        isSignal?: boolean;
        statisticDateFrom?: Date;
        statisticDateTo?: Date;
        chartPointsCount?: number;
        mask?: string;
        facetId?: string;
        isFavorite?: boolean;
        isEnabled?: boolean;
        hasInvestorsForAll?: boolean;
        hasInvestorsForClosed?: boolean;
        ids?: Array<string>;
        managerId?: string;
        programManagerId?: string;
        status?: Array<string>;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<ProgramsList>;
    v10ProgramsLevelupSummaryGet(options?: {
        authorization?: string;
    }, init?: RequestInit): Promise<LevelUpSummary>;
    v10ProgramsSetsGet(authorization: string, init?: RequestInit): Promise<ProgramSets>;
}
export declare const RateApiFetchParamCreator: (configuration?: Configuration) => {
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): FetchArgs;
    v10RateByFromByToGet(from: string, to: string, options?: any): FetchArgs;
    v10RateGet(from?: string[], to?: string[], options?: any): FetchArgs;
};
export declare const RateApiFp: (configuration?: Configuration) => {
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    v10RateByFromByToGet(from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number>;
    v10RateGet(from?: string[], to?: string[], options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatesModel>;
};
export declare class RateApi extends BaseAPI {
    v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, init?: RequestInit): Promise<number>;
    v10RateByFromByToGet(from: string, to: string, init?: RequestInit): Promise<number>;
    v10RateGet(options?: {
        from?: Array<string>;
        to?: Array<string>;
    }, init?: RequestInit): Promise<RatesModel>;
}
export declare const SearchApiFetchParamCreator: (configuration?: Configuration) => {
    v10SearchGet(authorization?: string, mask?: string, take?: number, options?: any): FetchArgs;
};
export declare const SearchApiFp: (configuration?: Configuration) => {
    v10SearchGet(authorization?: string, mask?: string, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchViewModel>;
};
export declare class SearchApi extends BaseAPI {
    v10SearchGet(options?: {
        authorization?: string;
        mask?: string;
        take?: number;
    }, init?: RequestInit): Promise<SearchViewModel>;
}
export declare const SignalApiFetchParamCreator: (configuration?: Configuration) => {
    v10SignalAccountsGet(authorization: string, options?: any): FetchArgs;
    v10SignalAttachByIdInfoGet(id: string, authorization: string, options?: any): FetchArgs;
    v10SignalAttachByIdPost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): FetchArgs;
    v10SignalByIdUpdatePost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): FetchArgs;
    v10SignalDetachByIdPost(id: string, authorization: string, model?: DetachFromSignalProvider, options?: any): FetchArgs;
    v10SignalTradesByIdClosePost(id: string, authorization: string, programId?: string, options?: any): FetchArgs;
    v10SignalTradesGet(authorization: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10SignalTradesLogGet(authorization: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10SignalTradesOpenGet(authorization: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): FetchArgs;
};
export declare const SignalApiFp: (configuration?: Configuration) => {
    v10SignalAccountsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CopyTradingAccountsList>;
    v10SignalAttachByIdInfoGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AttachToSignalProviderInfo>;
    v10SignalAttachByIdPost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10SignalByIdUpdatePost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10SignalDetachByIdPost(id: string, authorization: string, model?: DetachFromSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10SignalTradesByIdClosePost(id: string, authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10SignalTradesGet(authorization: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesSignalViewModel>;
    v10SignalTradesLogGet(authorization: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalTradingEvents>;
    v10SignalTradesOpenGet(authorization: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesSignalViewModel>;
};
export declare class SignalApi extends BaseAPI {
    v10SignalAccountsGet(authorization: string, init?: RequestInit): Promise<CopyTradingAccountsList>;
    v10SignalAttachByIdInfoGet(id: string, authorization: string, init?: RequestInit): Promise<AttachToSignalProviderInfo>;
    v10SignalAttachByIdPost(id: string, authorization: string, options?: {
        model?: AttachToSignalProvider;
    }, init?: RequestInit): Promise<void>;
    v10SignalByIdUpdatePost(id: string, authorization: string, options?: {
        model?: AttachToSignalProvider;
    }, init?: RequestInit): Promise<void>;
    v10SignalDetachByIdPost(id: string, authorization: string, options?: {
        model?: DetachFromSignalProvider;
    }, init?: RequestInit): Promise<void>;
    v10SignalTradesByIdClosePost(id: string, authorization: string, options?: {
        programId?: string;
    }, init?: RequestInit): Promise<void>;
    v10SignalTradesGet(authorization: string, options?: {
        dateFrom?: Date;
        dateTo?: Date;
        symbol?: string;
        sorting?: string;
        accountId?: string;
        accountCurrency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<TradesSignalViewModel>;
    v10SignalTradesLogGet(authorization: string, options?: {
        accountId?: string;
        accountCurrency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<SignalTradingEvents>;
    v10SignalTradesOpenGet(authorization: string, options?: {
        sorting?: string;
        symbol?: string;
        accountId?: string;
        accountCurrency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<TradesSignalViewModel>;
}
export declare const WalletApiFetchParamCreator: (configuration?: Configuration) => {
    v10WalletAddressesByCurrencyGet(currency: string, authorization: string, options?: any): FetchArgs;
    v10WalletAddressesGet(authorization: string, options?: any): FetchArgs;
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): FetchArgs;
    v10WalletFeeGvtholdingGet(authorization: string, options?: any): FetchArgs;
    v10WalletMultiByCurrencyAvailableGet(currency: string, authorization: string, options?: any): FetchArgs;
    v10WalletMultiByCurrencyGet(currency: string, authorization: string, options?: any): FetchArgs;
    v10WalletMultiTransactionsExternalGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10WalletMultiTransactionsGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10WalletPaygvtfeeOffPost(authorization: string, options?: any): FetchArgs;
    v10WalletPaygvtfeeOnPost(authorization: string, options?: any): FetchArgs;
    v10WalletTransactionByIdGet(id: string, authorization: string, options?: any): FetchArgs;
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, wallet?: string, skip?: number, take?: number, options?: any): FetchArgs;
    v10WalletTransferPost(authorization: string, request?: InternalTransferRequest, options?: any): FetchArgs;
    v10WalletWithdrawInfoGet(authorization: string, options?: any): FetchArgs;
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): FetchArgs;
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): FetchArgs;
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): FetchArgs;
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): FetchArgs;
};
export declare const WalletApiFp: (configuration?: Configuration) => {
    v10WalletAddressesByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletInfo>;
    v10WalletAddressesGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletsInfo>;
    v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletSummary>;
    v10WalletFeeGvtholdingGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserCommissionData>;
    v10WalletMultiByCurrencyAvailableGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletMultiAvailable>;
    v10WalletMultiByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletMultiSummary>;
    v10WalletMultiTransactionsExternalGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MultiWalletExternalTransactionsViewModel>;
    v10WalletMultiTransactionsGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MultiWalletTransactionsViewModel>;
    v10WalletPaygvtfeeOffPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletPaygvtfeeOnPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletTransactionByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionDetails>;
    v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, wallet?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletTransactionsViewModel>;
    v10WalletTransferPost(authorization: string, request?: InternalTransferRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletWithdrawInfoGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WithdrawalSummary>;
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void>;
};
export declare class WalletApi extends BaseAPI {
    v10WalletAddressesByCurrencyGet(currency: string, authorization: string, init?: RequestInit): Promise<WalletInfo>;
    v10WalletAddressesGet(authorization: string, init?: RequestInit): Promise<WalletsInfo>;
    v10WalletByCurrencyGet(currency: string, authorization: string, init?: RequestInit): Promise<WalletSummary>;
    v10WalletFeeGvtholdingGet(authorization: string, init?: RequestInit): Promise<UserCommissionData>;
    v10WalletMultiByCurrencyAvailableGet(currency: string, authorization: string, init?: RequestInit): Promise<WalletMultiAvailable>;
    v10WalletMultiByCurrencyGet(currency: string, authorization: string, init?: RequestInit): Promise<WalletMultiSummary>;
    v10WalletMultiTransactionsExternalGet(authorization: string, options?: {
        from?: Date;
        to?: Date;
        type?: string;
        currency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<MultiWalletExternalTransactionsViewModel>;
    v10WalletMultiTransactionsGet(authorization: string, options?: {
        from?: Date;
        to?: Date;
        type?: string;
        currency?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<MultiWalletTransactionsViewModel>;
    v10WalletPaygvtfeeOffPost(authorization: string, init?: RequestInit): Promise<void>;
    v10WalletPaygvtfeeOnPost(authorization: string, init?: RequestInit): Promise<void>;
    v10WalletTransactionByIdGet(id: string, authorization: string, init?: RequestInit): Promise<TransactionDetails>;
    v10WalletTransactionsGet(authorization: string, options?: {
        assetId?: string;
        from?: Date;
        to?: Date;
        assetType?: string;
        txAction?: string;
        wallet?: string;
        skip?: number;
        take?: number;
    }, init?: RequestInit): Promise<WalletTransactionsViewModel>;
    v10WalletTransferPost(authorization: string, options?: {
        request?: InternalTransferRequest;
    }, init?: RequestInit): Promise<void>;
    v10WalletWithdrawInfoGet(authorization: string, init?: RequestInit): Promise<WithdrawalSummary>;
    v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, init?: RequestInit): Promise<void>;
    v10WalletWithdrawRequestConfirmPost(options?: {
        requestId?: string;
        code?: string;
    }, init?: RequestInit): Promise<void>;
    v10WalletWithdrawRequestNewPost(authorization: string, options?: {
        model?: CreateWithdrawalRequestModel;
    }, init?: RequestInit): Promise<void>;
    v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, init?: RequestInit): Promise<void>;
}
