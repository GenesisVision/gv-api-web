/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { CreateWithdrawalRequestModel } from "../model/createWithdrawalRequestModel";
import { ErrorViewModel } from "../model/errorViewModel";
import { InternalTransferRequest } from "../model/internalTransferRequest";
import { MultiWalletExternalTransactionsViewModel } from "../model/multiWalletExternalTransactionsViewModel";
import { MultiWalletTransactionsViewModel } from "../model/multiWalletTransactionsViewModel";
import { TransactionDetails } from "../model/transactionDetails";
import { UserCommissionData } from "../model/userCommissionData";
import { WalletDepositSummary } from "../model/walletDepositSummary";
import { WalletMultiAvailable } from "../model/walletMultiAvailable";
import { WalletMultiSummary } from "../model/walletMultiSummary";
import { WithdrawalSummary } from "../model/withdrawalSummary";

export class WalletService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public cancelWithdrawalRequest(txId: string, authorization: string): CancelablePromise<null>{
    return this.cancelWithdrawalRequestWithHttpInfo(txId, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelWithdrawalRequestWithHttpInfo(txId: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "txId" is set
    if (txId === undefined || txId === null) {
      throw new Error("Missing the required parameter \"txId\" when calling cancelWithdrawalRequest");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelWithdrawalRequest");
    }

    let pathParams = { 
      "txId": txId
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/withdraw/request/cancel/{txId}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public confirmWithdrawalRequestByCode(opts?: { 
    requestId?: string, 
    code?: string
  }): CancelablePromise<null>{
    return this.confirmWithdrawalRequestByCodeWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private confirmWithdrawalRequestByCodeWithHttpInfo(opts: { 
    requestId?: string, 
    code?: string
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "requestId": opts["requestId"],
      "code": opts["code"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/withdraw/request/confirm', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public createWithdrawalRequest(authorization: string, opts?: { 
    model?: CreateWithdrawalRequestModel
  }): CancelablePromise<null>{
    return this.createWithdrawalRequestWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private createWithdrawalRequestWithHttpInfo(authorization: string, opts: { 
    model?: CreateWithdrawalRequestModel
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling createWithdrawalRequest");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/withdraw/request/new', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getGMCommissionData(authorization: string): CancelablePromise<UserCommissionData>{
    return this.getGMCommissionDataWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getGMCommissionDataWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getGMCommissionData");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = UserCommissionData;

    return this.apiClient.callApi<UserCommissionData>(
      '/v1.0/wallet/fee/gvtholding', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getMultiWalletTransactions(authorization: string, opts?: { 
    from?: Date, 
    to?: Date, 
    type?: 'All' | 'Investment' | 'Converting' | 'Withdrawal' | 'Close' | 'Open' | 'Fee' | 'Profits' | 'SubscribeSignal' | 'ReceiveSignal' | 'DepositSignal' | 'WithdrawalSignal' | 'Platform', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  }): CancelablePromise<MultiWalletTransactionsViewModel>{
    return this.getMultiWalletTransactionsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getMultiWalletTransactionsWithHttpInfo(authorization: string, opts: { 
    from?: Date, 
    to?: Date, 
    type?: 'All' | 'Investment' | 'Converting' | 'Withdrawal' | 'Close' | 'Open' | 'Fee' | 'Profits' | 'SubscribeSignal' | 'ReceiveSignal' | 'DepositSignal' | 'WithdrawalSignal' | 'Platform', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getMultiWalletTransactions");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "From": opts["from"],
      "To": opts["to"],
      "Type": opts["type"],
      "Currency": opts["currency"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = MultiWalletTransactionsViewModel;

    return this.apiClient.callApi<MultiWalletTransactionsViewModel>(
      '/v1.0/wallet/multi/transactions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getTransactionDetails(id: string, authorization: string): CancelablePromise<TransactionDetails>{
    return this.getTransactionDetailsWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getTransactionDetailsWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getTransactionDetails");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getTransactionDetails");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TransactionDetails;

    return this.apiClient.callApi<TransactionDetails>(
      '/v1.0/wallet/transaction/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getUserWithdrawalSummary(authorization: string): CancelablePromise<WithdrawalSummary>{
    return this.getUserWithdrawalSummaryWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getUserWithdrawalSummaryWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getUserWithdrawalSummary");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = WithdrawalSummary;

    return this.apiClient.callApi<WithdrawalSummary>(
      '/v1.0/wallet/withdraw/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getWalletExternalTransactions(authorization: string, opts?: { 
    from?: Date, 
    to?: Date, 
    type?: 'All' | 'Deposit' | 'Withdrawal', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  }): CancelablePromise<MultiWalletExternalTransactionsViewModel>{
    return this.getWalletExternalTransactionsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getWalletExternalTransactionsWithHttpInfo(authorization: string, opts: { 
    from?: Date, 
    to?: Date, 
    type?: 'All' | 'Deposit' | 'Withdrawal', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getWalletExternalTransactions");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "From": opts["from"],
      "To": opts["to"],
      "Type": opts["type"],
      "Currency": opts["currency"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = MultiWalletExternalTransactionsViewModel;

    return this.apiClient.callApi<MultiWalletExternalTransactionsViewModel>(
      '/v1.0/wallet/multi/transactions/external', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getWalletMultiAvailable(currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<WalletMultiAvailable>{
    return this.getWalletMultiAvailableWithHttpInfo(currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getWalletMultiAvailableWithHttpInfo(currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getWalletMultiAvailable");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getWalletMultiAvailable");
    }

    let pathParams = { 
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = WalletMultiAvailable;

    return this.apiClient.callApi<WalletMultiAvailable>(
      '/v1.0/wallet/multi/{currency}/available', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getWalletMultiSummary(currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<WalletMultiSummary>{
    return this.getWalletMultiSummaryWithHttpInfo(currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getWalletMultiSummaryWithHttpInfo(currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getWalletMultiSummary");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getWalletMultiSummary");
    }

    let pathParams = { 
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = WalletMultiSummary;

    return this.apiClient.callApi<WalletMultiSummary>(
      '/v1.0/wallet/multi/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public resendWithdrawalRequestEmail(txId: string, authorization: string): CancelablePromise<null>{
    return this.resendWithdrawalRequestEmailWithHttpInfo(txId, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private resendWithdrawalRequestEmailWithHttpInfo(txId: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "txId" is set
    if (txId === undefined || txId === null) {
      throw new Error("Missing the required parameter \"txId\" when calling resendWithdrawalRequestEmail");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling resendWithdrawalRequestEmail");
    }

    let pathParams = { 
      "txId": txId
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/withdraw/request/resend/{txId}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchPayFeeInGvtOff(authorization: string): CancelablePromise<null>{
    return this.switchPayFeeInGvtOffWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchPayFeeInGvtOffWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchPayFeeInGvtOff");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/paygvtfee/off', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchPayFeeInGvtOn(authorization: string): CancelablePromise<null>{
    return this.switchPayFeeInGvtOnWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchPayFeeInGvtOnWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchPayFeeInGvtOn");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/paygvtfee/on', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public transfer(authorization: string, opts?: { 
    request?: InternalTransferRequest
  }): CancelablePromise<null>{
    return this.transferWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private transferWithHttpInfo(authorization: string, opts: { 
    request?: InternalTransferRequest
  } = {}){
    let postBody = opts["request"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling transfer");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/wallet/transfer', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateDepositWallets(authorization: string): CancelablePromise<WalletDepositSummary>{
    return this.updateDepositWalletsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateDepositWalletsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateDepositWallets");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = WalletDepositSummary;

    return this.apiClient.callApi<WalletDepositSummary>(
      '/v1.0/wallet/deposit/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
