/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CoreApiV10) {
      root.CoreApiV10 = {};
    }
    root.CoreApiV10.MultiWalletTransaction = factory(root.CoreApiV10.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MultiWalletTransaction model module.
   * @module model/MultiWalletTransaction
   * @version v1.0
   */

  /**
   * Constructs a new <code>MultiWalletTransaction</code>.
   * @alias module:model/MultiWalletTransaction
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>MultiWalletTransaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MultiWalletTransaction} obj Optional instance to populate.
   * @return {module:model/MultiWalletTransaction} The populated <code>MultiWalletTransaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('currencyFrom')) {
        obj['currencyFrom'] = ApiClient.convertToType(data['currencyFrom'], 'String');
      }
      if (data.hasOwnProperty('currencyTo')) {
        obj['currencyTo'] = ApiClient.convertToType(data['currencyTo'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('logoFrom')) {
        obj['logoFrom'] = ApiClient.convertToType(data['logoFrom'], 'String');
      }
      if (data.hasOwnProperty('logoTo')) {
        obj['logoTo'] = ApiClient.convertToType(data['logoTo'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
      }
      if (data.hasOwnProperty('amountTo')) {
        obj['amountTo'] = ApiClient.convertToType(data['amountTo'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {module:model/MultiWalletTransaction.CurrencyFromEnum} currencyFrom
   */
  exports.prototype['currencyFrom'] = undefined;
  /**
   * @member {module:model/MultiWalletTransaction.CurrencyToEnum} currencyTo
   */
  exports.prototype['currencyTo'] = undefined;
  /**
   * @member {module:model/MultiWalletTransaction.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * @member {module:model/MultiWalletTransaction.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {String} logoFrom
   */
  exports.prototype['logoFrom'] = undefined;
  /**
   * @member {String} logoTo
   */
  exports.prototype['logoTo'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {Number} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * @member {Number} amountTo
   */
  exports.prototype['amountTo'] = undefined;


  /**
   * Allowed values for the <code>currencyFrom</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CurrencyFromEnum = {
    /**
     * value: "BTC"
     * @const
     */
    "BTC": "BTC",
    /**
     * value: "ETH"
     * @const
     */
    "ETH": "ETH",
    /**
     * value: "USDT"
     * @const
     */
    "USDT": "USDT",
    /**
     * value: "GVT"
     * @const
     */
    "GVT": "GVT",
    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",
    /**
     * value: "ADA"
     * @const
     */
    "ADA": "ADA",
    /**
     * value: "XRP"
     * @const
     */
    "XRP": "XRP",
    /**
     * value: "BCH"
     * @const
     */
    "BCH": "BCH",
    /**
     * value: "LTC"
     * @const
     */
    "LTC": "LTC",
    /**
     * value: "DOGE"
     * @const
     */
    "DOGE": "DOGE",
    /**
     * value: "BNB"
     * @const
     */
    "BNB": "BNB",
    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",
    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR"  };

  /**
   * Allowed values for the <code>currencyTo</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CurrencyToEnum = {
    /**
     * value: "BTC"
     * @const
     */
    "BTC": "BTC",
    /**
     * value: "ETH"
     * @const
     */
    "ETH": "ETH",
    /**
     * value: "USDT"
     * @const
     */
    "USDT": "USDT",
    /**
     * value: "GVT"
     * @const
     */
    "GVT": "GVT",
    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",
    /**
     * value: "ADA"
     * @const
     */
    "ADA": "ADA",
    /**
     * value: "XRP"
     * @const
     */
    "XRP": "XRP",
    /**
     * value: "BCH"
     * @const
     */
    "BCH": "BCH",
    /**
     * value: "LTC"
     * @const
     */
    "LTC": "LTC",
    /**
     * value: "DOGE"
     * @const
     */
    "DOGE": "DOGE",
    /**
     * value: "BNB"
     * @const
     */
    "BNB": "BNB",
    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",
    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "All"
     * @const
     */
    "All": "All",
    /**
     * value: "Investment"
     * @const
     */
    "Investment": "Investment",
    /**
     * value: "Converting"
     * @const
     */
    "Converting": "Converting",
    /**
     * value: "Withdrawal"
     * @const
     */
    "Withdrawal": "Withdrawal",
    /**
     * value: "Close"
     * @const
     */
    "Close": "Close",
    /**
     * value: "Open"
     * @const
     */
    "Open": "Open",
    /**
     * value: "Fee"
     * @const
     */
    "Fee": "Fee",
    /**
     * value: "Profits"
     * @const
     */
    "Profits": "Profits",
    /**
     * value: "SubscribeSignal"
     * @const
     */
    "SubscribeSignal": "SubscribeSignal",
    /**
     * value: "ReceiveSignal"
     * @const
     */
    "ReceiveSignal": "ReceiveSignal",
    /**
     * value: "DepositSignal"
     * @const
     */
    "DepositSignal": "DepositSignal",
    /**
     * value: "WithdrawalSignal"
     * @const
     */
    "WithdrawalSignal": "WithdrawalSignal",
    /**
     * value: "Platform"
     * @const
     */
    "Platform": "Platform"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "Done"
     * @const
     */
    "Done": "Done",
    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",
    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",
    /**
     * value: "Error"
     * @const
     */
    "Error": "Error"  };


  return exports;
}));


