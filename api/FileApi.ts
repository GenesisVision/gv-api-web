/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/ErrorViewModel";
import { UploadResult } from "../model/UploadResult";

export class FileApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getFile(id: string, opts?: { 
    quality?: 'Low' | 'Medium' | 'High'
  }): CancelablePromise<null>{
    return this.getFileWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFileWithHttpInfo(id: string, opts: { 
    quality?: 'Low' | 'Medium' | 'High'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFile");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "quality": opts["quality"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = [];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/file/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public uploadFile(uploadedFile: any, opts?: { 
    authorization?: string
  }): CancelablePromise<UploadResult>{
    return this.uploadFileWithHttpInfo(uploadedFile, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private uploadFileWithHttpInfo(uploadedFile: any, opts: { 
    authorization?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "uploadedFile" is set
    if (uploadedFile === undefined || uploadedFile === null) {
      throw new Error("Missing the required parameter \"uploadedFile\" when calling uploadFile");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
      "uploadedFile": uploadedFile
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["multipart/form-data"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = UploadResult;

    return this.apiClient.callApi<UploadResult>(
      '/v2.0/file/upload', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
