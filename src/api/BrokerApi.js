/**
 * Core API v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrokerInitData from '../model/BrokerInitData';
import BrokerOefInitData from '../model/BrokerOefInitData';
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ClosePeriodData from '../model/ClosePeriodData';
import ErrorViewModel from '../model/ErrorViewModel';
import InvestmentProgramAccrual from '../model/InvestmentProgramAccrual';
import LoginViewModel from '../model/LoginViewModel';
import ManagerAccountOnlineInfo from '../model/ManagerAccountOnlineInfo';
import ManagerHistoryIpfsHash from '../model/ManagerHistoryIpfsHash';
import NewManager from '../model/NewManager';
import NewTradeEvent from '../model/NewTradeEvent';
import StartValues from '../model/StartValues';
import UsersRealAssets from '../model/UsersRealAssets';

/**
* Broker service.
* @module api/BrokerApi
* @version v2.0
*/
export default class BrokerApi {

    /**
    * Constructs a new BrokerApi. 
    * @alias module:api/BrokerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/account/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAccountCreatePost(authorization, opts) {
      return this.apiBrokerAccountCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAccountOefCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountOefCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'requestId': opts['requestId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/account/oef/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAccountOefCreatePost(authorization, opts) {
      return this.apiBrokerAccountOefCreatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthChangePasswordPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/auth/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerAuthChangePasswordPost(authorization, opts) {
      return this.apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthConfirmEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/confirmEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthConfirmEmailPost(opts) {
      return this.apiBrokerAuthConfirmEmailPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthSignInPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthSignInPost(opts) {
      return this.apiBrokerAuthSignInPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthUpdateTokenGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/auth/updateToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerAuthUpdateTokenGet(authorization, opts) {
      return this.apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    apiBrokerFreeaddressesGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerFreeaddressesGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/api/broker/freeaddresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    apiBrokerFreeaddressesGet(authorization, opts) {
      return this.apiBrokerFreeaddressesGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */
    apiBrokerInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerInitData;

      return this.apiClient.callApi(
        '/api/broker/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */
    apiBrokerInitDataGet(authorization, opts) {
      return this.apiBrokerInitDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerManagersAccountsOnlineInfoUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/managersAccounts/onlineInfo/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersRealAssets} and HTTP response
     */
    apiBrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefGetRealAssetsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UsersRealAssets;

      return this.apiClient.callApi(
        '/api/broker/oef/getRealAssets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersRealAssets}
     */
    apiBrokerOefGetRealAssetsGet(authorization, opts) {
      return this.apiBrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerOefInitData} and HTTP response
     */
    apiBrokerOefInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefInitDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BrokerOefInitData;

      return this.apiClient.callApi(
        '/api/broker/oef/initData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerOefInitData}
     */
    apiBrokerOefInitDataGet(authorization, opts) {
      return this.apiBrokerOefInitDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['assets'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefSetRealAssetsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/oef/setRealAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerOefSetRealAssetsPost(authorization, opts) {
      return this.apiBrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodAccrueProfitsPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/accrueProfits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodClosePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodClosePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'currentBalance': opts['currentBalance']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodClosePost(authorization, opts) {
      return this.apiBrokerPeriodClosePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefApplyAssetPartsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'assetsRequestId': opts['assetsRequestId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/oef/applyAssetParts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodOefApplyAssetPartsPost(authorization, opts) {
      return this.apiBrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/oef/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodOefProcessClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefProcessForceClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/oef/processForceClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodOefProcessForceClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessClosingProgramPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/processClosingProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodProcessClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/broker/period/processInvestmentRequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    apiBrokerPeriodProcessInvestmentRequestsPost(authorization, opts) {
      return this.apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'investorLossShare': opts['investorLossShare']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/reevaluateManagerToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodReevaluateManagerTokenPost(authorization, opts) {
      return this.apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodSetStartValuesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/setStartValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerPeriodTerminatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodTerminatePost");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/period/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerPeriodTerminatePost(authorization, opts) {
      return this.apiBrokerPeriodTerminatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */
    apiBrokerPeriodlosingDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodlosingDataGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClosePeriodData;

      return this.apiClient.callApi(
        '/api/broker/period/сlosingData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */
    apiBrokerPeriodlosingDataGet(authorization, opts) {
      return this.apiBrokerPeriodlosingDataGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    apiBrokerTradehistoryGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradehistoryGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/api/broker/tradehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    apiBrokerTradehistoryGet(authorization, opts) {
      return this.apiBrokerTradehistoryGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesIpfsHashUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/ipfsHash/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiBrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/broker/trades/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiBrokerTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesNewPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
