/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DashboardChartValue from '../model/DashboardChartValue';
import DashboardSummary from '../model/DashboardSummary';
import ErrorViewModel from '../model/ErrorViewModel';
import FundInvestInfo from '../model/FundInvestInfo';
import FundWithdrawInfo from '../model/FundWithdrawInfo';
import FundsListOld from '../model/FundsListOld';
import InvestmentEventViewModels from '../model/InvestmentEventViewModels';
import ProgramInvestInfoOld from '../model/ProgramInvestInfoOld';
import ProgramRequestsOld from '../model/ProgramRequestsOld';
import ProgramWithdrawInfo from '../model/ProgramWithdrawInfo';
import ProgramsListOld from '../model/ProgramsListOld';
import SignalsList from '../model/SignalsList';

/**
* Investor service.
* @class InvestorApi
* @version v1.0
*/
export default class InvestorApi {

    /**
    * Constructs a new InvestorApi. 
    * @function InvestorApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {InvestorApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      cancelRequestWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRequest");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelRequest");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel investment program request
     * @function InvestorApi#cancelRequest
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      cancelRequest(id, authorization) {
      return this.cancelRequestWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      fundInvestWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fundInvest");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling fundInvest");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fundInvest");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Investing into the fund.  Invest in GVT if currency is empty
     * @function InvestorApi#fundInvest
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      fundInvest(id, amount, authorization, opts) {
      return this.fundInvestWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      fundInvestInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fundInvestInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling fundInvestInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fundInvestInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundInvestInfo;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the fund
     * @function InvestorApi#fundInvestInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<FundInvestInfo>} a Promise, with an object containing data of type FundInvestInfo and HTTP response
     */
      fundInvestInfo(id, currency, authorization) {
      return this.fundInvestInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      fundWithdrawWithHttpInfo(id, percent, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fundWithdraw");
      }

      // verify the required parameter 'percent' is set
      if (percent === undefined || percent === null) {
        throw new Error("Missing the required parameter 'percent' when calling fundWithdraw");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fundWithdraw");
      }


      let pathParams = {
        'id': id,
        'percent': percent
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/withdraw/{percent}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.  Withdraw in GVT if currency is empty
     * @function InvestorApi#fundWithdraw
     * @param {String} id 
     * @param {Number} percent 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      fundWithdraw(id, percent, authorization, opts) {
      return this.fundWithdrawWithHttpInfo(id, percent, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      fundWithdrawInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fundWithdrawInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling fundWithdrawInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fundWithdrawInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundWithdrawInfo;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from fund
     * @function InvestorApi#fundWithdrawInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<FundWithdrawInfo>} a Promise, with an object containing data of type FundWithdrawInfo and HTTP response
     */
      fundWithdrawInfo(id, currency, authorization) {
      return this.fundWithdrawInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getDashboardWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDashboard");
      }


      let pathParams = {
      };
      let queryParams = {
        'chartCurrency': opts['chartCurrency'],
        'From': opts['from'],
        'To': opts['to'],
        'BalancePoints': opts['balancePoints'],
        'ProgramsPoints': opts['programsPoints'],
        'eventsTake': opts['eventsTake'],
        'requestsSkip': opts['requestsSkip'],
        'requestsTake': opts['requestsTake']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DashboardSummary;

      return this.apiClient.callApi(
        '/v1.0/investor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary dashboard info
     * @function InvestorApi#getDashboard
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.chartCurrency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.balancePoints] 
     * @param {Number} [opts.programsPoints] 
     * @param {Number} [opts.eventsTake] 
     * @param {Number} [opts.requestsSkip] 
     * @param {Number} [opts.requestsTake] 
     * @return {CancelablePromise<DashboardSummary>} a Promise, with an object containing data of type DashboardSummary and HTTP response
     */
      getDashboard(authorization, opts) {
      return this.getDashboardWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getEventsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEvents");
      }


      let pathParams = {
      };
      let queryParams = {
        'EventLocation': opts['eventLocation'],
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'EventType': opts['eventType'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestmentEventViewModels;

      return this.apiClient.callApi(
        '/v1.0/investor/investments/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Events
     * @function InvestorApi#getEvents
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.eventLocation] 
     * @param {String} [opts.assetId] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {String} [opts.eventType] 
     * @param {String} [opts.assetType] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<InvestmentEventViewModels>} a Promise, with an object containing data of type InvestmentEventViewModels and HTTP response
     */
      getEvents(authorization, opts) {
      return this.getEventsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getFundsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFunds");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'ActionStatus': opts['actionStatus'],
        'DashboardActionStatus': opts['dashboardActionStatus'],
        'IsHideInList': opts['isHideInList'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundsListOld;

      return this.apiClient.callApi(
        '/v1.0/investor/funds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Dashboard funds list
     * @function InvestorApi#getFunds
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {String} [opts.currency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.actionStatus] 
     * @param {String} [opts.dashboardActionStatus] 
     * @param {Boolean} [opts.isHideInList] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<FundsListOld>} a Promise, with an object containing data of type FundsListOld and HTTP response
     */
      getFunds(authorization, opts) {
      return this.getFundsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getPortfolioChartWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPortfolioChart");
      }


      let pathParams = {
      };
      let queryParams = {
        'currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'BalancePoints': opts['balancePoints'],
        'ProgramsPoints': opts['programsPoints']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DashboardChartValue;

      return this.apiClient.callApi(
        '/v1.0/investor/portfolio/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Portfolio charts
     * @function InvestorApi#getPortfolioChart
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.balancePoints] 
     * @param {Number} [opts.programsPoints] 
     * @return {CancelablePromise<DashboardChartValue>} a Promise, with an object containing data of type DashboardChartValue and HTTP response
     */
      getPortfolioChart(authorization, opts) {
      return this.getPortfolioChartWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramRequestsWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramRequests");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getProgramRequests");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getProgramRequests");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramRequests");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get program/fund requests
     * @function InvestorApi#getProgramRequests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getProgramRequests(id, skip, take, authorization) {
      return this.getProgramRequestsWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramRequests_0WithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramRequests_0");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getProgramRequests_0");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getProgramRequests_0");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProgramRequests_0");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get program/fund requests
     * @function InvestorApi#getProgramRequests_0
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getProgramRequests_0(id, skip, take, authorization) {
      return this.getProgramRequests_0WithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getProgramsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPrograms");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'Currency': opts['currency'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'ActionStatus': opts['actionStatus'],
        'DashboardActionStatus': opts['dashboardActionStatus'],
        'IsHideInList': opts['isHideInList'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsListOld;

      return this.apiClient.callApi(
        '/v1.0/investor/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Dashboard program list
     * @function InvestorApi#getPrograms
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {String} [opts.currency] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.actionStatus] 
     * @param {String} [opts.dashboardActionStatus] 
     * @param {Boolean} [opts.isHideInList] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<ProgramsListOld>} a Promise, with an object containing data of type ProgramsListOld and HTTP response
     */
      getPrograms(authorization, opts) {
      return this.getProgramsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getRequestsWithHttpInfo(skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling getRequests");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling getRequests");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRequests");
      }


      let pathParams = {
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequestsOld;

      return this.apiClient.callApi(
        '/v1.0/investor/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all requests
     * @function InvestorApi#getRequests
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramRequestsOld>} a Promise, with an object containing data of type ProgramRequestsOld and HTTP response
     */
      getRequests(skip, take, authorization) {
      return this.getRequestsWithHttpInfo(skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getSignalProgramsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSignalPrograms");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'CurrencySecondary': opts['currencySecondary'],
        'ActionStatus': opts['actionStatus'],
        'DashboardActionStatus': opts['dashboardActionStatus'],
        'IsHideInList': opts['isHideInList'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = SignalsList;

      return this.apiClient.callApi(
        '/v1.0/investor/signals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Dashboard signal providers list
     * @function InvestorApi#getSignalPrograms
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.sorting] 
     * @param {Date} [opts.from] 
     * @param {Date} [opts.to] 
     * @param {Number} [opts.chartPointsCount] 
     * @param {String} [opts.currencySecondary] 
     * @param {String} [opts.actionStatus] 
     * @param {String} [opts.dashboardActionStatus] 
     * @param {Boolean} [opts.isHideInList] 
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<SignalsList>} a Promise, with an object containing data of type SignalsList and HTTP response
     */
      getSignalPrograms(authorization, opts) {
      return this.getSignalProgramsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      investInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling investInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling investInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling investInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramInvestInfoOld;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing into the program
     * @function InvestorApi#investInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramInvestInfoOld>} a Promise, with an object containing data of type ProgramInvestInfoOld and HTTP response
     */
      investInfo(id, currency, authorization) {
      return this.investInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      programInvestWithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling programInvest");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling programInvest");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling programInvest");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'currency': opts['currency']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Investing into the program.  Invest in GVT if currency is empty
     * @function InvestorApi#programInvest
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.currency]  (default to 100)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      programInvest(id, amount, authorization, opts) {
      return this.programInvestWithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      programWithdrawWithHttpInfo(id, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling programWithdraw");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling programWithdraw");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'amount': opts['amount'],
        'withdrawAll': opts['withdrawAll']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/withdraw/multi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from investment program in program currency
     * @function InvestorApi#programWithdraw
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Number} [opts.amount] 
     * @param {Boolean} [opts.withdrawAll]  (default to false)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      programWithdraw(id, authorization, opts) {
      return this.programWithdrawWithHttpInfo(id, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      programWithdrawInfoWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling programWithdrawInfo");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling programWithdrawInfo");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling programWithdrawInfo");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramWithdrawInfo;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal from investment program
     * @function InvestorApi#programWithdrawInfo
     * @param {String} id 
     * @param {String} currency 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramWithdrawInfo>} a Promise, with an object containing data of type ProgramWithdrawInfo and HTTP response
     */
      programWithdrawInfo(id, currency, authorization) {
      return this.programWithdrawInfoWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      programWithdraw_0WithHttpInfo(id, amount, authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling programWithdraw_0");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling programWithdraw_0");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling programWithdraw_0");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
        'withdrawAll': opts['withdrawAll']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/withdraw/multi/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdraw from investment program in program currency
     * @function InvestorApi#programWithdraw_0
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Boolean} [opts.withdrawAll]  (default to false)
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      programWithdraw_0(id, amount, authorization, opts) {
      return this.programWithdraw_0WithHttpInfo(id, amount, authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      reinvestOffWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reinvestOff");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling reinvestOff");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/reinvest/off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disable reinvesting
     * @function InvestorApi#reinvestOff
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      reinvestOff(id, authorization) {
      return this.reinvestOffWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      reinvestOnWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reinvestOn");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling reinvestOn");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/reinvest/on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable reinvesting
     * @function InvestorApi#reinvestOn
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      reinvestOn(id, authorization) {
      return this.reinvestOnWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
