/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { AttachToSignalProvider } from "../model/attachToSignalProvider";
import { AttachToSignalProviderInfo } from "../model/attachToSignalProviderInfo";
import { CopyTradingAccountsList } from "../model/copyTradingAccountsList";
import { DetachFromSignalProvider } from "../model/detachFromSignalProvider";
import { ErrorViewModel } from "../model/errorViewModel";
import { ItemsViewModelCopyTradingAccountInfo } from "../model/itemsViewModelCopyTradingAccountInfo";
import { SignalTradingEvents } from "../model/signalTradingEvents";
import { TradesSignalViewModel } from "../model/tradesSignalViewModel";

export class SignalService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public attachSlaveToMaster(id: string, authorization: string, opts?: { 
    model?: AttachToSignalProvider
  }): CancelablePromise<null>{
    return this.attachSlaveToMasterWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private attachSlaveToMasterWithHttpInfo(id: string, authorization: string, opts: { 
    model?: AttachToSignalProvider
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling attachSlaveToMaster");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling attachSlaveToMaster");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/signal/attach/{id}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public closeTrade(id: string, authorization: string, opts?: { 
    programId?: string
  }): CancelablePromise<null>{
    return this.closeTradeWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private closeTradeWithHttpInfo(id: string, authorization: string, opts: { 
    programId?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling closeTrade");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling closeTrade");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "programId": opts["programId"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/signal/trades/{id}/close', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public detachSlaveFromMaster(id: string, authorization: string, opts?: { 
    model?: DetachFromSignalProvider
  }): CancelablePromise<null>{
    return this.detachSlaveFromMasterWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private detachSlaveFromMasterWithHttpInfo(id: string, authorization: string, opts: { 
    model?: DetachFromSignalProvider
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling detachSlaveFromMaster");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling detachSlaveFromMaster");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/signal/detach/{id}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getCopytradingAccounts(authorization: string): CancelablePromise<CopyTradingAccountsList>{
    return this.getCopytradingAccountsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getCopytradingAccountsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getCopytradingAccounts");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = CopyTradingAccountsList;

    return this.apiClient.callApi<CopyTradingAccountsList>(
      '/v1.0/signal/accounts', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getOpenSignalTrades(authorization: string, opts?: { 
    sorting?: 'ByDateAsc' | 'ByDateDesc' | 'ByTicketAsc' | 'ByTicketDesc' | 'BySymbolAsc' | 'BySymbolDesc' | 'ByDirectionAsc' | 'ByDirectionDesc' | 'ByVolumeAsc' | 'ByVolumeDesc' | 'ByPriceAsc' | 'ByPriceDesc' | 'ByPriceCurrentAsc' | 'ByPriceCurrentDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByCommissionAsc' | 'ByCommissionDesc' | 'BySwapAsc' | 'BySwapDesc', 
    symbol?: string, 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  }): CancelablePromise<TradesSignalViewModel>{
    return this.getOpenSignalTradesWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getOpenSignalTradesWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByDateAsc' | 'ByDateDesc' | 'ByTicketAsc' | 'ByTicketDesc' | 'BySymbolAsc' | 'BySymbolDesc' | 'ByDirectionAsc' | 'ByDirectionDesc' | 'ByVolumeAsc' | 'ByVolumeDesc' | 'ByPriceAsc' | 'ByPriceDesc' | 'ByPriceCurrentAsc' | 'ByPriceCurrentDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByCommissionAsc' | 'ByCommissionDesc' | 'BySwapAsc' | 'BySwapDesc', 
    symbol?: string, 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getOpenSignalTrades");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "Symbol": opts["symbol"],
      "AccountId": opts["accountId"],
      "AccountCurrency": opts["accountCurrency"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TradesSignalViewModel;

    return this.apiClient.callApi<TradesSignalViewModel>(
      '/v1.0/signal/trades/open', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSignalTrades(authorization: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    symbol?: string, 
    sorting?: 'ByDateAsc' | 'ByDateDesc' | 'ByTicketAsc' | 'ByTicketDesc' | 'BySymbolAsc' | 'BySymbolDesc' | 'ByDirectionAsc' | 'ByDirectionDesc' | 'ByVolumeAsc' | 'ByVolumeDesc' | 'ByPriceAsc' | 'ByPriceDesc' | 'ByPriceCurrentAsc' | 'ByPriceCurrentDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByCommissionAsc' | 'ByCommissionDesc' | 'BySwapAsc' | 'BySwapDesc', 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  }): CancelablePromise<TradesSignalViewModel>{
    return this.getSignalTradesWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSignalTradesWithHttpInfo(authorization: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    symbol?: string, 
    sorting?: 'ByDateAsc' | 'ByDateDesc' | 'ByTicketAsc' | 'ByTicketDesc' | 'BySymbolAsc' | 'BySymbolDesc' | 'ByDirectionAsc' | 'ByDirectionDesc' | 'ByVolumeAsc' | 'ByVolumeDesc' | 'ByPriceAsc' | 'ByPriceDesc' | 'ByPriceCurrentAsc' | 'ByPriceCurrentDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByCommissionAsc' | 'ByCommissionDesc' | 'BySwapAsc' | 'BySwapDesc', 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getSignalTrades");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "Symbol": opts["symbol"],
      "Sorting": opts["sorting"],
      "AccountId": opts["accountId"],
      "AccountCurrency": opts["accountCurrency"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TradesSignalViewModel;

    return this.apiClient.callApi<TradesSignalViewModel>(
      '/v1.0/signal/trades', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSignalTradingLog(authorization: string, opts?: { 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  }): CancelablePromise<SignalTradingEvents>{
    return this.getSignalTradingLogWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSignalTradingLogWithHttpInfo(authorization: string, opts: { 
    accountId?: string, 
    accountCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getSignalTradingLog");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "AccountId": opts["accountId"],
      "AccountCurrency": opts["accountCurrency"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = SignalTradingEvents;

    return this.apiClient.callApi<SignalTradingEvents>(
      '/v1.0/signal/trades/log', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSignals(opts?: { 
    authorization?: string, 
    tags?: Array<string>, 
    statisticDateFrom?: Date, 
    statisticDateTo?: Date, 
    chartPointsCount?: number, 
    chartCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    facetId?: string, 
    mask?: string, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelCopyTradingAccountInfo>{
    return this.getSignalsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSignalsWithHttpInfo(opts: { 
    authorization?: string, 
    tags?: Array<string>, 
    statisticDateFrom?: Date, 
    statisticDateTo?: Date, 
    chartPointsCount?: number, 
    chartCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    facetId?: string, 
    mask?: string, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "Tags": this.apiClient.buildCollectionParam(opts["tags"], "multi"),
      "StatisticDateFrom": opts["statisticDateFrom"],
      "StatisticDateTo": opts["statisticDateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "ChartCurrency": opts["chartCurrency"],
      "FacetId": opts["facetId"],
      "Mask": opts["mask"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelCopyTradingAccountInfo;

    return this.apiClient.callApi<ItemsViewModelCopyTradingAccountInfo>(
      '/v1.0/signal', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSlaveAttachInfo(id: string, authorization: string): CancelablePromise<AttachToSignalProviderInfo>{
    return this.getSlaveAttachInfoWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSlaveAttachInfoWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getSlaveAttachInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getSlaveAttachInfo");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = AttachToSignalProviderInfo;

    return this.apiClient.callApi<AttachToSignalProviderInfo>(
      '/v1.0/signal/attach/{id}/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateSubscriptionSettings(id: string, authorization: string, opts?: { 
    model?: AttachToSignalProvider
  }): CancelablePromise<null>{
    return this.updateSubscriptionSettingsWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateSubscriptionSettingsWithHttpInfo(id: string, authorization: string, opts: { 
    model?: AttachToSignalProvider
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling updateSubscriptionSettings");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateSubscriptionSettings");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/signal/{id}/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
