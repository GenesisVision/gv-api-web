/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoreApiV10);
  }
}(this, function(expect, CoreApiV10) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CoreApiV10.ProfileHeaderViewModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProfileHeaderViewModel', function() {
    it('should create an instance of ProfileHeaderViewModel', function() {
      // uncomment below and update the code to test ProfileHeaderViewModel
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be.a(CoreApiV10.ProfileHeaderViewModel);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property avatar (base name: "avatar")', function() {
      // uncomment below and update the code to test the property avatar
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property userType (base name: "userType")', function() {
      // uncomment below and update the code to test the property userType
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property notificationsCount (base name: "notificationsCount")', function() {
      // uncomment below and update the code to test the property notificationsCount
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property favoritesCount (base name: "favoritesCount")', function() {
      // uncomment below and update the code to test the property favoritesCount
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property kycConfirmed (base name: "kycConfirmed")', function() {
      // uncomment below and update the code to test the property kycConfirmed
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property allowForex (base name: "allowForex")', function() {
      // uncomment below and update the code to test the property allowForex
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isTwoFactorEnabled (base name: "isTwoFactorEnabled")', function() {
      // uncomment below and update the code to test the property isTwoFactorEnabled
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property isNewUser (base name: "isNewUser")', function() {
      // uncomment below and update the code to test the property isNewUser
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property totalBalanceGvt (base name: "totalBalanceGvt")', function() {
      // uncomment below and update the code to test the property totalBalanceGvt
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property investedGvt (base name: "investedGvt")', function() {
      // uncomment below and update the code to test the property investedGvt
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property availableGvt (base name: "availableGvt")', function() {
      // uncomment below and update the code to test the property availableGvt
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property totalBalance (base name: "totalBalance")', function() {
      // uncomment below and update the code to test the property totalBalance
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property invested (base name: "invested")', function() {
      // uncomment below and update the code to test the property invested
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property available (base name: "available")', function() {
      // uncomment below and update the code to test the property available
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

    it('should have the property pending (base name: "pending")', function() {
      // uncomment below and update the code to test the property pending
      //var instane = new CoreApiV10.ProfileHeaderViewModel();
      //expect(instance).to.be();
    });

  });

}));
