/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { DashboardChartValue } from "../model/dashboardChartValue";
import { DashboardSummary } from "../model/dashboardSummary";
import { ErrorViewModel } from "../model/errorViewModel";
import { FundInvestInfo } from "../model/fundInvestInfo";
import { FundWithdrawInfoOld } from "../model/fundWithdrawInfoOld";
import { FundsListOld } from "../model/fundsListOld";
import { InvestmentEventViewModels } from "../model/investmentEventViewModels";
import { ProgramInvestInfoOld } from "../model/programInvestInfoOld";
import { ProgramRequestsOld } from "../model/programRequestsOld";
import { ProgramWithdrawInfoOld } from "../model/programWithdrawInfoOld";
import { ProgramsListOld } from "../model/programsListOld";
import { SignalsList } from "../model/signalsList";

export class InvestorService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public cancelRequest(id: string, authorization: string): CancelablePromise<null>{
    return this.cancelRequestWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private cancelRequestWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling cancelRequest");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling cancelRequest");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/requests/{id}/cancel', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getDashboard(authorization: string, opts?: { 
    chartCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    balancePoints?: number, 
    programsPoints?: number, 
    eventsTake?: number, 
    requestsSkip?: number, 
    requestsTake?: number
  }): CancelablePromise<DashboardSummary>{
    return this.getDashboardWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getDashboardWithHttpInfo(authorization: string, opts: { 
    chartCurrency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    balancePoints?: number, 
    programsPoints?: number, 
    eventsTake?: number, 
    requestsSkip?: number, 
    requestsTake?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getDashboard");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "chartCurrency": opts["chartCurrency"],
      "From": opts["from"],
      "To": opts["to"],
      "BalancePoints": opts["balancePoints"],
      "ProgramsPoints": opts["programsPoints"],
      "eventsTake": opts["eventsTake"],
      "requestsSkip": opts["requestsSkip"],
      "requestsTake": opts["requestsTake"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardSummary;

    return this.apiClient.callApi<DashboardSummary>(
      '/v1.0/investor', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getEvents(authorization: string, opts?: { 
    eventLocation?: 'Asset' | 'Dashboard' | 'EventsAll', 
    assetId?: string, 
    from?: Date, 
    to?: Date, 
    eventType?: 'All' | 'AssetStarted' | 'AssetFinished' | 'AssetPeriodStarted' | 'AssetPeriodEnded' | 'AssetPeriodEndedDueToStopOut' | 'AssetBrokerChanged' | 'AssetInvestByInvestor' | 'AssetWithdrawalByInvestor' | 'AssetInvestByManager' | 'AssetWithdrawalByManager' | 'AssetPeriodProcessed' | 'AssetReallocation' | 'AssetSubscribeByInvestor' | 'AssetUnsubscribeByInvestor' | 'AssetTradeOpen' | 'AssetTradeClosed' | 'AssetSubscriptionEdit' | 'AssetEnterInvestment', 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal', 
    skip?: number, 
    take?: number
  }): CancelablePromise<InvestmentEventViewModels>{
    return this.getEventsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getEventsWithHttpInfo(authorization: string, opts: { 
    eventLocation?: 'Asset' | 'Dashboard' | 'EventsAll', 
    assetId?: string, 
    from?: Date, 
    to?: Date, 
    eventType?: 'All' | 'AssetStarted' | 'AssetFinished' | 'AssetPeriodStarted' | 'AssetPeriodEnded' | 'AssetPeriodEndedDueToStopOut' | 'AssetBrokerChanged' | 'AssetInvestByInvestor' | 'AssetWithdrawalByInvestor' | 'AssetInvestByManager' | 'AssetWithdrawalByManager' | 'AssetPeriodProcessed' | 'AssetReallocation' | 'AssetSubscribeByInvestor' | 'AssetUnsubscribeByInvestor' | 'AssetTradeOpen' | 'AssetTradeClosed' | 'AssetSubscriptionEdit' | 'AssetEnterInvestment', 
    assetType?: 'All' | 'Program' | 'Fund' | 'Signal', 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getEvents");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "EventLocation": opts["eventLocation"],
      "AssetId": opts["assetId"],
      "From": opts["from"],
      "To": opts["to"],
      "EventType": opts["eventType"],
      "AssetType": opts["assetType"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = InvestmentEventViewModels;

    return this.apiClient.callApi<InvestmentEventViewModels>(
      '/v1.0/investor/investments/events', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundInvestInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<FundInvestInfo>{
    return this.getFundInvestInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundInvestInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundInvestInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getFundInvestInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundInvestInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundInvestInfo;

    return this.apiClient.callApi<FundInvestInfo>(
      '/v1.0/investor/funds/{id}/invest/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundWithdrawInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<FundWithdrawInfoOld>{
    return this.getFundWithdrawInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundWithdrawInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundWithdrawInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getFundWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFundWithdrawInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundWithdrawInfoOld;

    return this.apiClient.callApi<FundWithdrawInfoOld>(
      '/v1.0/investor/funds/{id}/withdraw/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFunds(authorization: string, opts?: { 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<FundsListOld>{
    return this.getFundsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getFunds");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "Currency": opts["currency"],
      "From": opts["from"],
      "To": opts["to"],
      "ChartPointsCount": opts["chartPointsCount"],
      "CurrencySecondary": opts["currencySecondary"],
      "ActionStatus": opts["actionStatus"],
      "DashboardActionStatus": opts["dashboardActionStatus"],
      "IsHideInList": opts["isHideInList"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundsListOld;

    return this.apiClient.callApi<FundsListOld>(
      '/v1.0/investor/funds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPortfolioChart(authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    balancePoints?: number, 
    programsPoints?: number
  }): CancelablePromise<DashboardChartValue>{
    return this.getPortfolioChartWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPortfolioChartWithHttpInfo(authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    balancePoints?: number, 
    programsPoints?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getPortfolioChart");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"],
      "From": opts["from"],
      "To": opts["to"],
      "BalancePoints": opts["balancePoints"],
      "ProgramsPoints": opts["programsPoints"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = DashboardChartValue;

    return this.apiClient.callApi<DashboardChartValue>(
      '/v1.0/investor/portfolio/chart', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramInvestInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<ProgramInvestInfoOld>{
    return this.getProgramInvestInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramInvestInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramInvestInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getProgramInvestInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramInvestInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramInvestInfoOld;

    return this.apiClient.callApi<ProgramInvestInfoOld>(
      '/v1.0/investor/programs/{id}/invest/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramRequests(id: string, skip: number, take: number, authorization: string): CancelablePromise<ProgramRequestsOld>{
    return this.getProgramRequestsWithHttpInfo(id, skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramRequestsWithHttpInfo(id: string, skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramRequests");
    }
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getProgramRequests");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getProgramRequests");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramRequests");
    }

    let pathParams = { 
      "id": id,
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/investor/funds/{id}/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramRequests_1(id: string, skip: number, take: number, authorization: string): CancelablePromise<ProgramRequestsOld>{
    return this.getProgramRequests_1WithHttpInfo(id, skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramRequests_1WithHttpInfo(id: string, skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramRequests_0");
    }
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getProgramRequests_0");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getProgramRequests_0");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramRequests_0");
    }

    let pathParams = { 
      "id": id,
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/investor/programs/{id}/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramWithdrawInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string): CancelablePromise<ProgramWithdrawInfoOld>{
    return this.getProgramWithdrawInfoWithHttpInfo(id, currency, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramWithdrawInfoWithHttpInfo(id: string, currency: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getProgramWithdrawInfo");
    }
    // verify the required parameter "currency" is set
    if (currency === undefined || currency === null) {
      throw new Error("Missing the required parameter \"currency\" when calling getProgramWithdrawInfo");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramWithdrawInfo");
    }

    let pathParams = { 
      "id": id,
      "currency": currency
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramWithdrawInfoOld;

    return this.apiClient.callApi<ProgramWithdrawInfoOld>(
      '/v1.0/investor/programs/{id}/withdraw/info/{currency}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPrograms(authorization: string, opts?: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ProgramsListOld>{
    return this.getProgramsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getPrograms");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "Currency": opts["currency"],
      "From": opts["from"],
      "To": opts["to"],
      "ChartPointsCount": opts["chartPointsCount"],
      "CurrencySecondary": opts["currencySecondary"],
      "ActionStatus": opts["actionStatus"],
      "DashboardActionStatus": opts["dashboardActionStatus"],
      "IsHideInList": opts["isHideInList"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramsListOld;

    return this.apiClient.callApi<ProgramsListOld>(
      '/v1.0/investor/programs', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRequests(skip: number, take: number, authorization: string): CancelablePromise<ProgramRequestsOld>{
    return this.getRequestsWithHttpInfo(skip, take, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRequestsWithHttpInfo(skip: number, take: number, authorization: string){
    let postBody = null;
    
    // verify the required parameter "skip" is set
    if (skip === undefined || skip === null) {
      throw new Error("Missing the required parameter \"skip\" when calling getRequests");
    }
    // verify the required parameter "take" is set
    if (take === undefined || take === null) {
      throw new Error("Missing the required parameter \"take\" when calling getRequests");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getRequests");
    }

    let pathParams = { 
      "skip": skip,
      "take": take
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramRequestsOld;

    return this.apiClient.callApi<ProgramRequestsOld>(
      '/v1.0/investor/requests/{skip}/{take}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSignalPrograms(authorization: string, opts?: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<SignalsList>{
    return this.getSignalProgramsWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSignalProgramsWithHttpInfo(authorization: string, opts: { 
    sorting?: 'ByLevelAsc' | 'ByLevelDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByTradesAsc' | 'ByTradesDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewDesc' | 'ByNewAsc' | 'ByEndOfPeriodAsc' | 'ByEndOfPeriodDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc' | 'ByCurrDesc' | 'ByCurrAsc' | 'ByLevelProgressDesc' | 'ByLevelProgressAsc', 
    from?: Date, 
    to?: Date, 
    chartPointsCount?: number, 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    actionStatus?: 'Pending' | 'Active' | 'Investing' | 'Withdrawing' | 'Ended', 
    dashboardActionStatus?: 'All' | 'Active', 
    isHideInList?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getSignalPrograms");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "From": opts["from"],
      "To": opts["to"],
      "ChartPointsCount": opts["chartPointsCount"],
      "CurrencySecondary": opts["currencySecondary"],
      "ActionStatus": opts["actionStatus"],
      "DashboardActionStatus": opts["dashboardActionStatus"],
      "IsHideInList": opts["isHideInList"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = SignalsList;

    return this.apiClient.callApi<SignalsList>(
      '/v1.0/investor/signals', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoFund(id: string, amount: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.investIntoFundWithHttpInfo(id, amount, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoFundWithHttpInfo(id: string, amount: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoFund");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling investIntoFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoFund");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/funds/{id}/invest/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public investIntoProgram(id: string, amount: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.investIntoProgramWithHttpInfo(id, amount, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private investIntoProgramWithHttpInfo(id: string, amount: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling investIntoProgram");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling investIntoProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling investIntoProgram");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/{id}/invest/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchReinvestOff(id: string, authorization: string): CancelablePromise<null>{
    return this.switchReinvestOffWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchReinvestOffWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling switchReinvestOff");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchReinvestOff");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/{id}/reinvest/off', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public switchReinvestOn(id: string, authorization: string): CancelablePromise<null>{
    return this.switchReinvestOnWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private switchReinvestOnWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling switchReinvestOn");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling switchReinvestOn");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/{id}/reinvest/on', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromFund(id: string, percent: number, authorization: string, opts?: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<null>{
    return this.withdrawFromFundWithHttpInfo(id, percent, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromFundWithHttpInfo(id: string, percent: number, authorization: string, opts: { 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromFund");
    }
    // verify the required parameter "percent" is set
    if (percent === undefined || percent === null) {
      throw new Error("Missing the required parameter \"percent\" when calling withdrawFromFund");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromFund");
    }

    let pathParams = { 
      "id": id,
      "percent": percent
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/funds/{id}/withdraw/{percent}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromProgram(id: string, authorization: string, opts?: { 
    amount?: number, 
    withdrawAll?: boolean
  }): CancelablePromise<null>{
    return this.withdrawFromProgramWithHttpInfo(id, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromProgramWithHttpInfo(id: string, authorization: string, opts: { 
    amount?: number, 
    withdrawAll?: boolean
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromProgram");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromProgram");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "amount": opts["amount"],
      "withdrawAll": opts["withdrawAll"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/{id}/withdraw/multi', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public withdrawFromProgram_2(id: string, amount: number, authorization: string, opts?: { 
    withdrawAll?: boolean
  }): CancelablePromise<null>{
    return this.withdrawFromProgram_2WithHttpInfo(id, amount, authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private withdrawFromProgram_2WithHttpInfo(id: string, amount: number, authorization: string, opts: { 
    withdrawAll?: boolean
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling withdrawFromProgram_0");
    }
    // verify the required parameter "amount" is set
    if (amount === undefined || amount === null) {
      throw new Error("Missing the required parameter \"amount\" when calling withdrawFromProgram_0");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling withdrawFromProgram_0");
    }

    let pathParams = { 
      "id": id,
      "amount": amount
    };
    let queryParams = { 
      "withdrawAll": opts["withdrawAll"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/investor/programs/{id}/withdraw/multi/{amount}', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
