/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/ErrorViewModel";
import { ItemsViewModelUserDetailsList } from "../model/ItemsViewModelUserDetailsList";
import { PublicProfile } from "../model/PublicProfile";

export class UsersApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getManagerProfile(id: string): CancelablePromise<PublicProfile>{
    return this.getManagerProfileWithHttpInfo(id)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getManagerProfileWithHttpInfo(id: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getManagerProfile");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PublicProfile;

    return this.apiClient.callApi<PublicProfile>(
      '/v2.0/users/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getUsersList(opts?: { 
    facetId?: string, 
    sorting?: 'ByNameAsc' | 'ByNameDesc' | 'ByAgeAsc' | 'ByAgeDesc' | 'ByAumAsc' | 'ByAumDesc' | 'ByFollowersAsc' | 'ByFollowersDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByPopularityAsc' | 'ByPopularityDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByTradingProfitAsc' | 'ByTradingProfitDesc' | 'ByInvestingProfitAsc' | 'ByInvestingProfitDesc', 
    tags?: Array<string>, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelUserDetailsList>{
    return this.getUsersListWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getUsersListWithHttpInfo(opts: { 
    facetId?: string, 
    sorting?: 'ByNameAsc' | 'ByNameDesc' | 'ByAgeAsc' | 'ByAgeDesc' | 'ByAumAsc' | 'ByAumDesc' | 'ByFollowersAsc' | 'ByFollowersDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByPopularityAsc' | 'ByPopularityDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByTradingProfitAsc' | 'ByTradingProfitDesc' | 'ByInvestingProfitAsc' | 'ByInvestingProfitDesc', 
    tags?: Array<string>, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "FacetId": opts["facetId"],
      "Sorting": opts["sorting"],
      "Tags": this.apiClient.buildCollectionParam(opts["tags"], "multi"),
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelUserDetailsList;

    return this.apiClient.callApi<ItemsViewModelUserDetailsList>(
      '/v2.0/users/list', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
