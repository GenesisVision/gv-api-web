/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePasswordViewModel from '../model/ChangePasswordViewModel';
import ErrorViewModel from '../model/ErrorViewModel';
import ForgotPasswordViewModel from '../model/ForgotPasswordViewModel';
import LoginViewModel from '../model/LoginViewModel';
import PasswordModel from '../model/PasswordModel';
import RecoveryCodesViewModel from '../model/RecoveryCodesViewModel';
import RegisterInvestorViewModel from '../model/RegisterInvestorViewModel';
import RegisterManagerViewModel from '../model/RegisterManagerViewModel';
import ResendConfirmationViewModel from '../model/ResendConfirmationViewModel';
import ResetPasswordViewModel from '../model/ResetPasswordViewModel';
import TwoFactorAuthenticator from '../model/TwoFactorAuthenticator';
import TwoFactorAuthenticatorConfirm from '../model/TwoFactorAuthenticatorConfirm';
import TwoFactorCodeModel from '../model/TwoFactorCodeModel';
import TwoFactorStatus from '../model/TwoFactorStatus';

/**
* Auth service.
* @class AuthApi
* @version v1.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @function AuthApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {AuthApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      v10Auth2faConfirmPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faConfirmPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA confirm
     * @function AuthApi#v10Auth2faConfirmPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {TwoFactorAuthenticatorConfirm} [opts.model] 
     * @return {Promise<RecoveryCodesViewModel>} a Promise, with an object containing data of type RecoveryCodesViewModel and HTTP response
     */
      v10Auth2faConfirmPost(authorization, opts) {
      return this.v10Auth2faConfirmPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10Auth2faCreatePostWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faCreatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorAuthenticator;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA create
     * @function AuthApi#v10Auth2faCreatePost
     * @param {String} authorization JWT access token
     * @return {Promise<TwoFactorAuthenticator>} a Promise, with an object containing data of type TwoFactorAuthenticator and HTTP response
     */
      v10Auth2faCreatePost(authorization) {
      return this.v10Auth2faCreatePostWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10Auth2faDisablePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faDisablePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA disable
     * @function AuthApi#v10Auth2faDisablePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {TwoFactorCodeModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10Auth2faDisablePost(authorization, opts) {
      return this.v10Auth2faDisablePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10Auth2faGetWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faGet");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TwoFactorStatus;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA status
     * @function AuthApi#v10Auth2faGet
     * @param {String} authorization JWT access token
     * @return {Promise<TwoFactorStatus>} a Promise, with an object containing data of type TwoFactorStatus and HTTP response
     */
      v10Auth2faGet(authorization) {
      return this.v10Auth2faGetWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10Auth2faRecoverycodesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faRecoverycodesNewPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa/recoverycodes/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA generate new recovery codes
     * @function AuthApi#v10Auth2faRecoverycodesNewPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {PasswordModel} [opts.model] 
     * @return {Promise<RecoveryCodesViewModel>} a Promise, with an object containing data of type RecoveryCodesViewModel and HTTP response
     */
      v10Auth2faRecoverycodesNewPost(authorization, opts) {
      return this.v10Auth2faRecoverycodesNewPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10Auth2faRecoverycodesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10Auth2faRecoverycodesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RecoveryCodesViewModel;

      return this.apiClient.callApi(
        '/v1.0/auth/2fa/recoverycodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 2FA recovery codes
     * @function AuthApi#v10Auth2faRecoverycodesPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {PasswordModel} [opts.model] 
     * @return {Promise<RecoveryCodesViewModel>} a Promise, with an object containing data of type RecoveryCodesViewModel and HTTP response
     */
      v10Auth2faRecoverycodesPost(authorization, opts) {
      return this.v10Auth2faRecoverycodesPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPasswordChangePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10AuthPasswordChangePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/password/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change password
     * @function AuthApi#v10AuthPasswordChangePost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {ChangePasswordViewModel} [opts.model] 
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthPasswordChangePost(authorization, opts) {
      return this.v10AuthPasswordChangePostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPasswordForgotInvestorPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/password/forgot/investor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Forgot password for investor
     * @function AuthApi#v10AuthPasswordForgotInvestorPost
     * @param {Object} [opts] Optional parameters
     * @param {ForgotPasswordViewModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthPasswordForgotInvestorPost(opts) {
      return this.v10AuthPasswordForgotInvestorPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPasswordForgotManagerPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/password/forgot/manager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Forgot password for manager
     * @function AuthApi#v10AuthPasswordForgotManagerPost
     * @param {Object} [opts] Optional parameters
     * @param {ForgotPasswordViewModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthPasswordForgotManagerPost(opts) {
      return this.v10AuthPasswordForgotManagerPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPasswordResetPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/password/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Reset password
     * @function AuthApi#v10AuthPasswordResetPost
     * @param {Object} [opts] Optional parameters
     * @param {ResetPasswordViewModel} [opts.model] 
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthPasswordResetPost(opts) {
      return this.v10AuthPasswordResetPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPhoneCodePostWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10AuthPhoneCodePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/auth/phone/code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get phone number verification code
     * @function AuthApi#v10AuthPhoneCodePost
     * @param {String} authorization JWT access token
     * @return {Promise<'Number'>} a Promise, with an object containing data of type 'Number' and HTTP response
     */
      v10AuthPhoneCodePost(authorization) {
      return this.v10AuthPhoneCodePostWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthPhoneVerifyPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10AuthPhoneVerifyPost");
      }


      let pathParams = {
      };
      let queryParams = {
        'code': opts['code']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/phone/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Verify phone number
     * @function AuthApi#v10AuthPhoneVerifyPost
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.code] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthPhoneVerifyPost(authorization, opts) {
      return this.v10AuthPhoneVerifyPostWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthResendconfirmationlinkPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/resendconfirmationlink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Resend Confirmation Link
     * @function AuthApi#v10AuthResendconfirmationlinkPost
     * @param {Object} [opts] Optional parameters
     * @param {ResendConfirmationViewModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthResendconfirmationlinkPost(opts) {
      return this.v10AuthResendconfirmationlinkPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthSigninInvestorPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/signin/investor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize
     * @function AuthApi#v10AuthSigninInvestorPost
     * @param {Object} [opts] Optional parameters
     * @param {LoginViewModel} [opts.model] 
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthSigninInvestorPost(opts) {
      return this.v10AuthSigninInvestorPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthSigninManagerPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/signin/manager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize
     * @function AuthApi#v10AuthSigninManagerPost
     * @param {Object} [opts] Optional parameters
     * @param {LoginViewModel} [opts.model] 
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthSigninManagerPost(opts) {
      return this.v10AuthSigninManagerPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthSignupConfirmPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/signup/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm email after registration
     * @function AuthApi#v10AuthSignupConfirmPost
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.userId] 
     * @param {String} [opts.code] 
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthSignupConfirmPost(opts) {
      return this.v10AuthSignupConfirmPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthSignupInvestorPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/signup/investor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New investor registration
     * @function AuthApi#v10AuthSignupInvestorPost
     * @param {Object} [opts] Optional parameters
     * @param {RegisterInvestorViewModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthSignupInvestorPost(opts) {
      return this.v10AuthSignupInvestorPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthSignupManagerPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['model'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/auth/signup/manager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * New manager registration
     * @function AuthApi#v10AuthSignupManagerPost
     * @param {Object} [opts] Optional parameters
     * @param {RegisterManagerViewModel} [opts.model] 
     * @return {Promise<any>} a Promise, with an object containing HTTP response
     */
      v10AuthSignupManagerPost(opts) {
      return this.v10AuthSignupManagerPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthTokenDevicesLogoutPostWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10AuthTokenDevicesLogoutPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/token/devices/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Logout from another devices
     * @function AuthApi#v10AuthTokenDevicesLogoutPost
     * @param {String} authorization JWT access token
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthTokenDevicesLogoutPost(authorization) {
      return this.v10AuthTokenDevicesLogoutPostWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      v10AuthTokenUpdatePostWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10AuthTokenUpdatePost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/auth/token/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update auth token
     * @function AuthApi#v10AuthTokenUpdatePost
     * @param {String} authorization JWT access token
     * @return {Promise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      v10AuthTokenUpdatePost(authorization) {
      return this.v10AuthTokenUpdatePostWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
