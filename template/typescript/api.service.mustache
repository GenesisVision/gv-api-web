{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";{{#imports}}
import { {{classname}} } from "../{{filename}}";{{/imports}}

export class {{classname}} {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }{{#operations}}{{#operation}}

  public {{nickname}}({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}opts?: { {{#allParams}}{{^required}}
    {{paramName}}?: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}
  }{{/hasOptionalParams}}): CancelablePromise<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}null{{/returnType}}>{
    return this.{{nickname}}WithHttpInfo({{#allParams}}{{#required}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}opts{{/hasOptionalParams}})
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private {{nickname}}WithHttpInfo({{#allParams}}{{#required}}{{paramName}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}opts: { {{#allParams}}{{^required}}
    {{paramName}}?: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}
  } = {}{{/hasOptionalParams}}){
    let postBody = {{#bodyParam}}{{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter "{{paramName}}" is set
    if ({{paramName}} === undefined || {{paramName}} === null) {
      throw new Error("Missing the required parameter \"{{paramName}}\" when calling {{operationId}}");
    }{{/required}}{{/allParams}}

    let pathParams = { {{#pathParams}}
      "{{baseName}}": {{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}{{#hasMore}},{{/hasMore}}{{/pathParams}}
    };
    let queryParams = { {{#queryParams}}
      "{{baseName}}": {{#collectionFormat}}this.apiClient.buildCollectionParam({{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}, "{{collectionFormat}}"){{/collectionFormat}}{{^collectionFormat}}{{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}{{/collectionFormat}}{{#hasMore}},{{/hasMore}}{{/queryParams}}
    };
    let headerParams = { {{#headerParams}}
      "{{baseName}}": {{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}{{#hasMore}},{{/hasMore}}{{/headerParams}}
    };
    let formParams = { {{#formParams}}
      "{{baseName}}": {{#collectionFormat}}this.apiClient.buildCollectionParam({{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}, "{{collectionFormat}}"){{/collectionFormat}}{{^collectionFormat}}{{#required}}{{paramName}}{{/required}}{{^required}}opts["{{paramName}}"]{{/required}}{{/collectionFormat}}{{#hasMore}},{{/hasMore}}{{/formParams}}
    };

    let authNames: string[] = [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}];
    let contentTypes: string[] = [{{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}];
    let accepts: string[] = [{{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}];
    let returnType = {{#returnType}}{{#returnTypeIsPrimitive}}'{{{returnType}}}'{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}{{{returnType}}}{{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}null{{/returnType}};

    return this.apiClient.callApi<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}>(
      '{{{path}}}', '{{{httpMethod}}}',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }{{/operation}}
{{/operations}}
}
