"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://localhost".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|"
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace AmountWithCurrency
 */
var AmountWithCurrency;
(function (AmountWithCurrency) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = AmountWithCurrency.CurrencyEnum || (AmountWithCurrency.CurrencyEnum = {}));
})(AmountWithCurrency = exports.AmountWithCurrency || (exports.AmountWithCurrency = {}));
/**
 * @export
 * @namespace AssetSelection
 */
var AssetSelection;
(function (AssetSelection) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Program"] = 0] = "Program";
        TypeEnum[TypeEnum["Fund"] = 1] = "Fund";
    })(TypeEnum = AssetSelection.TypeEnum || (AssetSelection.TypeEnum = {}));
})(AssetSelection = exports.AssetSelection || (exports.AssetSelection = {}));
/**
 * @export
 * @namespace AssetsValue
 */
var AssetsValue;
(function (AssetsValue) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["All"] = 0] = "All";
        TypeEnum[TypeEnum["Program"] = 1] = "Program";
        TypeEnum[TypeEnum["Fund"] = 2] = "Fund";
    })(TypeEnum = AssetsValue.TypeEnum || (AssetsValue.TypeEnum = {}));
})(AssetsValue = exports.AssetsValue || (exports.AssetsValue = {}));
/**
 * @export
 * @namespace BlockchainInfo
 */
var BlockchainInfo;
(function (BlockchainInfo) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Undefined"] = 0] = "Undefined";
        StatusEnum[StatusEnum["New"] = 1] = "New";
        StatusEnum[StatusEnum["Pending"] = 2] = "Pending";
        StatusEnum[StatusEnum["ConfirmedByGate"] = 3] = "ConfirmedByGate";
        StatusEnum[StatusEnum["ConfirmedAndValidated"] = 4] = "ConfirmedAndValidated";
        StatusEnum[StatusEnum["PendingAddInWallet"] = 5] = "PendingAddInWallet";
        StatusEnum[StatusEnum["Error"] = 6] = "Error";
        StatusEnum[StatusEnum["Cancelled"] = 7] = "Cancelled";
    })(StatusEnum = BlockchainInfo.StatusEnum || (BlockchainInfo.StatusEnum = {}));
})(BlockchainInfo = exports.BlockchainInfo || (exports.BlockchainInfo = {}));
/**
 * @export
 * @namespace BrokerAccountType
 */
var BrokerAccountType;
(function (BrokerAccountType) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Undefined"] = 0] = "Undefined";
        TypeEnum[TypeEnum["MetaTrader4"] = 1] = "MetaTrader4";
        TypeEnum[TypeEnum["MetaTrader5"] = 2] = "MetaTrader5";
        TypeEnum[TypeEnum["NinjaTrader"] = 3] = "NinjaTrader";
        TypeEnum[TypeEnum["CTrader"] = 4] = "CTrader";
        TypeEnum[TypeEnum["Rumus"] = 5] = "Rumus";
        TypeEnum[TypeEnum["Metastock"] = 6] = "Metastock";
        TypeEnum[TypeEnum["IDEX"] = 7] = "IDEX";
    })(TypeEnum = BrokerAccountType.TypeEnum || (BrokerAccountType.TypeEnum = {}));
})(BrokerAccountType = exports.BrokerAccountType || (exports.BrokerAccountType = {}));
/**
 * @export
 * @namespace CreateWithdrawalRequestModel
 */
var CreateWithdrawalRequestModel;
(function (CreateWithdrawalRequestModel) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = CreateWithdrawalRequestModel.CurrencyEnum || (CreateWithdrawalRequestModel.CurrencyEnum = {}));
})(CreateWithdrawalRequestModel = exports.CreateWithdrawalRequestModel || (exports.CreateWithdrawalRequestModel = {}));
/**
 * @export
 * @namespace DashboardPortfolioEvent
 */
var DashboardPortfolioEvent;
(function (DashboardPortfolioEvent) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = DashboardPortfolioEvent.CurrencyEnum || (DashboardPortfolioEvent.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["All"] = 0] = "All";
        TypeEnum[TypeEnum["Invest"] = 1] = "Invest";
        TypeEnum[TypeEnum["Withdraw"] = 2] = "Withdraw";
        TypeEnum[TypeEnum["Profit"] = 3] = "Profit";
        TypeEnum[TypeEnum["Loss"] = 4] = "Loss";
        TypeEnum[TypeEnum["Reinvest"] = 5] = "Reinvest";
        TypeEnum[TypeEnum["Cancelled"] = 6] = "Cancelled";
        TypeEnum[TypeEnum["Ended"] = 7] = "Ended";
    })(TypeEnum = DashboardPortfolioEvent.TypeEnum || (DashboardPortfolioEvent.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var AssetTypeEnum;
    (function (AssetTypeEnum) {
        AssetTypeEnum[AssetTypeEnum["Program"] = 0] = "Program";
        AssetTypeEnum[AssetTypeEnum["Fund"] = 1] = "Fund";
    })(AssetTypeEnum = DashboardPortfolioEvent.AssetTypeEnum || (DashboardPortfolioEvent.AssetTypeEnum = {}));
})(DashboardPortfolioEvent = exports.DashboardPortfolioEvent || (exports.DashboardPortfolioEvent = {}));
/**
 * @export
 * @namespace ErrorViewModel
 */
var ErrorViewModel;
(function (ErrorViewModel) {
    /**
     * @export
     * @enum {string}
     */
    var CodeEnum;
    (function (CodeEnum) {
        CodeEnum[CodeEnum["InternalServerError"] = 0] = "InternalServerError";
        CodeEnum[CodeEnum["ValidationError"] = 1] = "ValidationError";
        CodeEnum[CodeEnum["RequiresTwoFactor"] = 2] = "RequiresTwoFactor";
    })(CodeEnum = ErrorViewModel.CodeEnum || (ErrorViewModel.CodeEnum = {}));
})(ErrorViewModel = exports.ErrorViewModel || (exports.ErrorViewModel = {}));
/**
 * @export
 * @namespace Facet
 */
var Facet;
(function (Facet) {
    /**
     * @export
     * @enum {string}
     */
    var SortTypeEnum;
    (function (SortTypeEnum) {
        SortTypeEnum[SortTypeEnum["New"] = 0] = "New";
        SortTypeEnum[SortTypeEnum["Top"] = 1] = "Top";
        SortTypeEnum[SortTypeEnum["WeeklyTop"] = 2] = "WeeklyTop";
        SortTypeEnum[SortTypeEnum["Popular"] = 3] = "Popular";
        SortTypeEnum[SortTypeEnum["ToLevelUp"] = 4] = "ToLevelUp";
    })(SortTypeEnum = Facet.SortTypeEnum || (Facet.SortTypeEnum = {}));
})(Facet = exports.Facet || (exports.Facet = {}));
/**
 * @export
 * @namespace FundDetails
 */
var FundDetails;
(function (FundDetails) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["None"] = 0] = "None";
        StatusEnum[StatusEnum["Pending"] = 1] = "Pending";
        StatusEnum[StatusEnum["ErrorCreating"] = 2] = "ErrorCreating";
        StatusEnum[StatusEnum["Active"] = 3] = "Active";
        StatusEnum[StatusEnum["Closed"] = 4] = "Closed";
        StatusEnum[StatusEnum["Archived"] = 5] = "Archived";
        StatusEnum[StatusEnum["ClosedDueToInactivity"] = 6] = "ClosedDueToInactivity";
    })(StatusEnum = FundDetails.StatusEnum || (FundDetails.StatusEnum = {}));
})(FundDetails = exports.FundDetails || (exports.FundDetails = {}));
/**
 * @export
 * @namespace FundDetailsFull
 */
var FundDetailsFull;
(function (FundDetailsFull) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["None"] = 0] = "None";
        StatusEnum[StatusEnum["Pending"] = 1] = "Pending";
        StatusEnum[StatusEnum["ErrorCreating"] = 2] = "ErrorCreating";
        StatusEnum[StatusEnum["Active"] = 3] = "Active";
        StatusEnum[StatusEnum["Closed"] = 4] = "Closed";
        StatusEnum[StatusEnum["Archived"] = 5] = "Archived";
        StatusEnum[StatusEnum["ClosedDueToInactivity"] = 6] = "ClosedDueToInactivity";
    })(StatusEnum = FundDetailsFull.StatusEnum || (FundDetailsFull.StatusEnum = {}));
})(FundDetailsFull = exports.FundDetailsFull || (exports.FundDetailsFull = {}));
/**
 * @export
 * @namespace ManagerPortfolioEvent
 */
var ManagerPortfolioEvent;
(function (ManagerPortfolioEvent) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = ManagerPortfolioEvent.CurrencyEnum || (ManagerPortfolioEvent.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["All"] = 0] = "All";
        TypeEnum[TypeEnum["AssetStarted"] = 1] = "AssetStarted";
        TypeEnum[TypeEnum["ProgramPeriodStats"] = 2] = "ProgramPeriodStats";
        TypeEnum[TypeEnum["ProgramPeriodEnds"] = 3] = "ProgramPeriodEnds";
        TypeEnum[TypeEnum["InvestorInvest"] = 4] = "InvestorInvest";
        TypeEnum[TypeEnum["InvestorWithdraw"] = 5] = "InvestorWithdraw";
        TypeEnum[TypeEnum["ManagerInvest"] = 6] = "ManagerInvest";
        TypeEnum[TypeEnum["ManagerWithdraw"] = 7] = "ManagerWithdraw";
        TypeEnum[TypeEnum["AssetFinished"] = 8] = "AssetFinished";
        TypeEnum[TypeEnum["EntranceFee"] = 9] = "EntranceFee";
        TypeEnum[TypeEnum["ExitFee"] = 10] = "ExitFee";
    })(TypeEnum = ManagerPortfolioEvent.TypeEnum || (ManagerPortfolioEvent.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ProgramTypeEnum;
    (function (ProgramTypeEnum) {
        ProgramTypeEnum[ProgramTypeEnum["Program"] = 0] = "Program";
        ProgramTypeEnum[ProgramTypeEnum["Fund"] = 1] = "Fund";
    })(ProgramTypeEnum = ManagerPortfolioEvent.ProgramTypeEnum || (ManagerPortfolioEvent.ProgramTypeEnum = {}));
})(ManagerPortfolioEvent = exports.ManagerPortfolioEvent || (exports.ManagerPortfolioEvent = {}));
/**
 * @export
 * @namespace NewProgramRequest
 */
var NewProgramRequest;
(function (NewProgramRequest) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = NewProgramRequest.CurrencyEnum || (NewProgramRequest.CurrencyEnum = {}));
})(NewProgramRequest = exports.NewProgramRequest || (exports.NewProgramRequest = {}));
/**
 * @export
 * @namespace NotificationSettingViewModel
 */
var NotificationSettingViewModel;
(function (NotificationSettingViewModel) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["PlatformNewsAndUpdates"] = 0] = "PlatformNewsAndUpdates";
        TypeEnum[TypeEnum["PlatformEmergency"] = 1] = "PlatformEmergency";
        TypeEnum[TypeEnum["PlatformOther"] = 2] = "PlatformOther";
        TypeEnum[TypeEnum["ProfileUpdated"] = 3] = "ProfileUpdated";
        TypeEnum[TypeEnum["ProfilePwdUpdated"] = 4] = "ProfilePwdUpdated";
        TypeEnum[TypeEnum["ProfileVerification"] = 5] = "ProfileVerification";
        TypeEnum[TypeEnum["Profile2FA"] = 6] = "Profile2FA";
        TypeEnum[TypeEnum["ProfileSecurity"] = 7] = "ProfileSecurity";
        TypeEnum[TypeEnum["ProgramNewsAndUpdates"] = 8] = "ProgramNewsAndUpdates";
        TypeEnum[TypeEnum["ProgramEndOfPeriod"] = 9] = "ProgramEndOfPeriod";
        TypeEnum[TypeEnum["ProgramCondition"] = 10] = "ProgramCondition";
        TypeEnum[TypeEnum["FundNewsAndUpdates"] = 11] = "FundNewsAndUpdates";
        TypeEnum[TypeEnum["FundEndOfPeriod"] = 12] = "FundEndOfPeriod";
        TypeEnum[TypeEnum["FundRebalancing"] = 13] = "FundRebalancing";
        TypeEnum[TypeEnum["ManagerNewProgram"] = 14] = "ManagerNewProgram";
    })(TypeEnum = NotificationSettingViewModel.TypeEnum || (NotificationSettingViewModel.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ConditionTypeEnum;
    (function (ConditionTypeEnum) {
        ConditionTypeEnum[ConditionTypeEnum["Empty"] = 0] = "Empty";
        ConditionTypeEnum[ConditionTypeEnum["Profit"] = 1] = "Profit";
        ConditionTypeEnum[ConditionTypeEnum["Level"] = 2] = "Level";
    })(ConditionTypeEnum = NotificationSettingViewModel.ConditionTypeEnum || (NotificationSettingViewModel.ConditionTypeEnum = {}));
})(NotificationSettingViewModel = exports.NotificationSettingViewModel || (exports.NotificationSettingViewModel = {}));
/**
 * @export
 * @namespace NotificationViewModel
 */
var NotificationViewModel;
(function (NotificationViewModel) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["PlatformNewsAndUpdates"] = 0] = "PlatformNewsAndUpdates";
        TypeEnum[TypeEnum["PlatformEmergency"] = 1] = "PlatformEmergency";
        TypeEnum[TypeEnum["PlatformOther"] = 2] = "PlatformOther";
        TypeEnum[TypeEnum["ProfileUpdated"] = 3] = "ProfileUpdated";
        TypeEnum[TypeEnum["ProfilePwdUpdated"] = 4] = "ProfilePwdUpdated";
        TypeEnum[TypeEnum["ProfileVerification"] = 5] = "ProfileVerification";
        TypeEnum[TypeEnum["Profile2FA"] = 6] = "Profile2FA";
        TypeEnum[TypeEnum["ProfileSecurity"] = 7] = "ProfileSecurity";
        TypeEnum[TypeEnum["ProgramNewsAndUpdates"] = 8] = "ProgramNewsAndUpdates";
        TypeEnum[TypeEnum["ProgramEndOfPeriod"] = 9] = "ProgramEndOfPeriod";
        TypeEnum[TypeEnum["ProgramCondition"] = 10] = "ProgramCondition";
        TypeEnum[TypeEnum["FundNewsAndUpdates"] = 11] = "FundNewsAndUpdates";
        TypeEnum[TypeEnum["FundEndOfPeriod"] = 12] = "FundEndOfPeriod";
        TypeEnum[TypeEnum["FundRebalancing"] = 13] = "FundRebalancing";
        TypeEnum[TypeEnum["ManagerNewProgram"] = 14] = "ManagerNewProgram";
    })(TypeEnum = NotificationViewModel.TypeEnum || (NotificationViewModel.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var AssetTypeEnum;
    (function (AssetTypeEnum) {
        AssetTypeEnum[AssetTypeEnum["Program"] = 0] = "Program";
        AssetTypeEnum[AssetTypeEnum["Fund"] = 1] = "Fund";
    })(AssetTypeEnum = NotificationViewModel.AssetTypeEnum || (NotificationViewModel.AssetTypeEnum = {}));
})(NotificationViewModel = exports.NotificationViewModel || (exports.NotificationViewModel = {}));
/**
 * @export
 * @namespace OrderModel
 */
var OrderModel;
(function (OrderModel) {
    /**
     * @export
     * @enum {string}
     */
    var DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum[DirectionEnum["Buy"] = 0] = "Buy";
        DirectionEnum[DirectionEnum["Sell"] = 1] = "Sell";
        DirectionEnum[DirectionEnum["Balance"] = 2] = "Balance";
        DirectionEnum[DirectionEnum["Credit"] = 3] = "Credit";
        DirectionEnum[DirectionEnum["Undefined"] = 4] = "Undefined";
    })(DirectionEnum = OrderModel.DirectionEnum || (OrderModel.DirectionEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var EntryEnum;
    (function (EntryEnum) {
        EntryEnum[EntryEnum["In"] = 0] = "In";
        EntryEnum[EntryEnum["Out"] = 1] = "Out";
        EntryEnum[EntryEnum["InOut"] = 2] = "InOut";
        EntryEnum[EntryEnum["OutBy"] = 3] = "OutBy";
    })(EntryEnum = OrderModel.EntryEnum || (OrderModel.EntryEnum = {}));
})(OrderModel = exports.OrderModel || (exports.OrderModel = {}));
/**
 * @export
 * @namespace PersonalFundDetailsFull
 */
var PersonalFundDetailsFull;
(function (PersonalFundDetailsFull) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Pending"] = 0] = "Pending";
        StatusEnum[StatusEnum["Active"] = 1] = "Active";
        StatusEnum[StatusEnum["Investing"] = 2] = "Investing";
        StatusEnum[StatusEnum["Withdrawing"] = 3] = "Withdrawing";
        StatusEnum[StatusEnum["Ended"] = 4] = "Ended";
    })(StatusEnum = PersonalFundDetailsFull.StatusEnum || (PersonalFundDetailsFull.StatusEnum = {}));
})(PersonalFundDetailsFull = exports.PersonalFundDetailsFull || (exports.PersonalFundDetailsFull = {}));
/**
 * @export
 * @namespace PersonalProgramDetailsFull
 */
var PersonalProgramDetailsFull;
(function (PersonalProgramDetailsFull) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Pending"] = 0] = "Pending";
        StatusEnum[StatusEnum["Active"] = 1] = "Active";
        StatusEnum[StatusEnum["Investing"] = 2] = "Investing";
        StatusEnum[StatusEnum["Withdrawing"] = 3] = "Withdrawing";
        StatusEnum[StatusEnum["Ended"] = 4] = "Ended";
    })(StatusEnum = PersonalProgramDetailsFull.StatusEnum || (PersonalProgramDetailsFull.StatusEnum = {}));
})(PersonalProgramDetailsFull = exports.PersonalProgramDetailsFull || (exports.PersonalProgramDetailsFull = {}));
/**
 * @export
 * @namespace ProfileFullViewModel
 */
var ProfileFullViewModel;
(function (ProfileFullViewModel) {
    /**
     * @export
     * @enum {string}
     */
    var VerificationStatusEnum;
    (function (VerificationStatusEnum) {
        VerificationStatusEnum[VerificationStatusEnum["NotVerified"] = 0] = "NotVerified";
        VerificationStatusEnum[VerificationStatusEnum["Verified"] = 1] = "Verified";
        VerificationStatusEnum[VerificationStatusEnum["UnderReview"] = 2] = "UnderReview";
        VerificationStatusEnum[VerificationStatusEnum["Rejected"] = 3] = "Rejected";
    })(VerificationStatusEnum = ProfileFullViewModel.VerificationStatusEnum || (ProfileFullViewModel.VerificationStatusEnum = {}));
})(ProfileFullViewModel = exports.ProfileFullViewModel || (exports.ProfileFullViewModel = {}));
/**
 * @export
 * @namespace ProgramBalanceChart
 */
var ProgramBalanceChart;
(function (ProgramBalanceChart) {
    /**
     * @export
     * @enum {string}
     */
    var ProgramCurrencyEnum;
    (function (ProgramCurrencyEnum) {
        ProgramCurrencyEnum[ProgramCurrencyEnum["Undefined"] = 0] = "Undefined";
        ProgramCurrencyEnum[ProgramCurrencyEnum["GVT"] = 1] = "GVT";
        ProgramCurrencyEnum[ProgramCurrencyEnum["ETH"] = 2] = "ETH";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BTC"] = 3] = "BTC";
        ProgramCurrencyEnum[ProgramCurrencyEnum["ADA"] = 4] = "ADA";
        ProgramCurrencyEnum[ProgramCurrencyEnum["USDT"] = 5] = "USDT";
        ProgramCurrencyEnum[ProgramCurrencyEnum["XRP"] = 6] = "XRP";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BCH"] = 7] = "BCH";
        ProgramCurrencyEnum[ProgramCurrencyEnum["LTC"] = 8] = "LTC";
        ProgramCurrencyEnum[ProgramCurrencyEnum["DOGE"] = 9] = "DOGE";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BNB"] = 10] = "BNB";
        ProgramCurrencyEnum[ProgramCurrencyEnum["USD"] = 11] = "USD";
        ProgramCurrencyEnum[ProgramCurrencyEnum["EUR"] = 12] = "EUR";
    })(ProgramCurrencyEnum = ProgramBalanceChart.ProgramCurrencyEnum || (ProgramBalanceChart.ProgramCurrencyEnum = {}));
})(ProgramBalanceChart = exports.ProgramBalanceChart || (exports.ProgramBalanceChart = {}));
/**
 * @export
 * @namespace ProgramDetails
 */
var ProgramDetails;
(function (ProgramDetails) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = ProgramDetails.CurrencyEnum || (ProgramDetails.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["None"] = 0] = "None";
        StatusEnum[StatusEnum["Pending"] = 1] = "Pending";
        StatusEnum[StatusEnum["ErrorCreating"] = 2] = "ErrorCreating";
        StatusEnum[StatusEnum["Active"] = 3] = "Active";
        StatusEnum[StatusEnum["Closed"] = 4] = "Closed";
        StatusEnum[StatusEnum["Archived"] = 5] = "Archived";
        StatusEnum[StatusEnum["ClosedDueToInactivity"] = 6] = "ClosedDueToInactivity";
    })(StatusEnum = ProgramDetails.StatusEnum || (ProgramDetails.StatusEnum = {}));
})(ProgramDetails = exports.ProgramDetails || (exports.ProgramDetails = {}));
/**
 * @export
 * @namespace ProgramDetailsFull
 */
var ProgramDetailsFull;
(function (ProgramDetailsFull) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = ProgramDetailsFull.CurrencyEnum || (ProgramDetailsFull.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["None"] = 0] = "None";
        StatusEnum[StatusEnum["Pending"] = 1] = "Pending";
        StatusEnum[StatusEnum["ErrorCreating"] = 2] = "ErrorCreating";
        StatusEnum[StatusEnum["Active"] = 3] = "Active";
        StatusEnum[StatusEnum["Closed"] = 4] = "Closed";
        StatusEnum[StatusEnum["Archived"] = 5] = "Archived";
        StatusEnum[StatusEnum["ClosedDueToInactivity"] = 6] = "ClosedDueToInactivity";
    })(StatusEnum = ProgramDetailsFull.StatusEnum || (ProgramDetailsFull.StatusEnum = {}));
})(ProgramDetailsFull = exports.ProgramDetailsFull || (exports.ProgramDetailsFull = {}));
/**
 * @export
 * @namespace ProgramProfitChart
 */
var ProgramProfitChart;
(function (ProgramProfitChart) {
    /**
     * @export
     * @enum {string}
     */
    var ProgramCurrencyEnum;
    (function (ProgramCurrencyEnum) {
        ProgramCurrencyEnum[ProgramCurrencyEnum["Undefined"] = 0] = "Undefined";
        ProgramCurrencyEnum[ProgramCurrencyEnum["GVT"] = 1] = "GVT";
        ProgramCurrencyEnum[ProgramCurrencyEnum["ETH"] = 2] = "ETH";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BTC"] = 3] = "BTC";
        ProgramCurrencyEnum[ProgramCurrencyEnum["ADA"] = 4] = "ADA";
        ProgramCurrencyEnum[ProgramCurrencyEnum["USDT"] = 5] = "USDT";
        ProgramCurrencyEnum[ProgramCurrencyEnum["XRP"] = 6] = "XRP";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BCH"] = 7] = "BCH";
        ProgramCurrencyEnum[ProgramCurrencyEnum["LTC"] = 8] = "LTC";
        ProgramCurrencyEnum[ProgramCurrencyEnum["DOGE"] = 9] = "DOGE";
        ProgramCurrencyEnum[ProgramCurrencyEnum["BNB"] = 10] = "BNB";
        ProgramCurrencyEnum[ProgramCurrencyEnum["USD"] = 11] = "USD";
        ProgramCurrencyEnum[ProgramCurrencyEnum["EUR"] = 12] = "EUR";
    })(ProgramCurrencyEnum = ProgramProfitChart.ProgramCurrencyEnum || (ProgramProfitChart.ProgramCurrencyEnum = {}));
})(ProgramProfitChart = exports.ProgramProfitChart || (exports.ProgramProfitChart = {}));
/**
 * @export
 * @namespace ProgramRequest
 */
var ProgramRequest;
(function (ProgramRequest) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = ProgramRequest.CurrencyEnum || (ProgramRequest.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Invest"] = 0] = "Invest";
        TypeEnum[TypeEnum["Withdrawal"] = 1] = "Withdrawal";
    })(TypeEnum = ProgramRequest.TypeEnum || (ProgramRequest.TypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["New"] = 0] = "New";
        StatusEnum[StatusEnum["Executed"] = 1] = "Executed";
        StatusEnum[StatusEnum["Cancelled"] = 2] = "Cancelled";
    })(StatusEnum = ProgramRequest.StatusEnum || (ProgramRequest.StatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ProgramTypeEnum;
    (function (ProgramTypeEnum) {
        ProgramTypeEnum[ProgramTypeEnum["Program"] = 0] = "Program";
        ProgramTypeEnum[ProgramTypeEnum["Fund"] = 1] = "Fund";
    })(ProgramTypeEnum = ProgramRequest.ProgramTypeEnum || (ProgramRequest.ProgramTypeEnum = {}));
})(ProgramRequest = exports.ProgramRequest || (exports.ProgramRequest = {}));
/**
 * @export
 * @namespace ProgramStatistic
 */
var ProgramStatistic;
(function (ProgramStatistic) {
    /**
     * @export
     * @enum {string}
     */
    var StartCurrencyEnum;
    (function (StartCurrencyEnum) {
        StartCurrencyEnum[StartCurrencyEnum["Undefined"] = 0] = "Undefined";
        StartCurrencyEnum[StartCurrencyEnum["GVT"] = 1] = "GVT";
        StartCurrencyEnum[StartCurrencyEnum["ETH"] = 2] = "ETH";
        StartCurrencyEnum[StartCurrencyEnum["BTC"] = 3] = "BTC";
        StartCurrencyEnum[StartCurrencyEnum["ADA"] = 4] = "ADA";
        StartCurrencyEnum[StartCurrencyEnum["USDT"] = 5] = "USDT";
        StartCurrencyEnum[StartCurrencyEnum["XRP"] = 6] = "XRP";
        StartCurrencyEnum[StartCurrencyEnum["BCH"] = 7] = "BCH";
        StartCurrencyEnum[StartCurrencyEnum["LTC"] = 8] = "LTC";
        StartCurrencyEnum[StartCurrencyEnum["DOGE"] = 9] = "DOGE";
        StartCurrencyEnum[StartCurrencyEnum["BNB"] = 10] = "BNB";
        StartCurrencyEnum[StartCurrencyEnum["USD"] = 11] = "USD";
        StartCurrencyEnum[StartCurrencyEnum["EUR"] = 12] = "EUR";
    })(StartCurrencyEnum = ProgramStatistic.StartCurrencyEnum || (ProgramStatistic.StartCurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var InvestedCurrencyEnum;
    (function (InvestedCurrencyEnum) {
        InvestedCurrencyEnum[InvestedCurrencyEnum["Undefined"] = 0] = "Undefined";
        InvestedCurrencyEnum[InvestedCurrencyEnum["GVT"] = 1] = "GVT";
        InvestedCurrencyEnum[InvestedCurrencyEnum["ETH"] = 2] = "ETH";
        InvestedCurrencyEnum[InvestedCurrencyEnum["BTC"] = 3] = "BTC";
        InvestedCurrencyEnum[InvestedCurrencyEnum["ADA"] = 4] = "ADA";
        InvestedCurrencyEnum[InvestedCurrencyEnum["USDT"] = 5] = "USDT";
        InvestedCurrencyEnum[InvestedCurrencyEnum["XRP"] = 6] = "XRP";
        InvestedCurrencyEnum[InvestedCurrencyEnum["BCH"] = 7] = "BCH";
        InvestedCurrencyEnum[InvestedCurrencyEnum["LTC"] = 8] = "LTC";
        InvestedCurrencyEnum[InvestedCurrencyEnum["DOGE"] = 9] = "DOGE";
        InvestedCurrencyEnum[InvestedCurrencyEnum["BNB"] = 10] = "BNB";
        InvestedCurrencyEnum[InvestedCurrencyEnum["USD"] = 11] = "USD";
        InvestedCurrencyEnum[InvestedCurrencyEnum["EUR"] = 12] = "EUR";
    })(InvestedCurrencyEnum = ProgramStatistic.InvestedCurrencyEnum || (ProgramStatistic.InvestedCurrencyEnum = {}));
})(ProgramStatistic = exports.ProgramStatistic || (exports.ProgramStatistic = {}));
/**
 * @export
 * @namespace RateItem
 */
var RateItem;
(function (RateItem) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = RateItem.CurrencyEnum || (RateItem.CurrencyEnum = {}));
})(RateItem = exports.RateItem || (exports.RateItem = {}));
/**
 * @export
 * @namespace WalletInfo
 */
var WalletInfo;
(function (WalletInfo) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = WalletInfo.CurrencyEnum || (WalletInfo.CurrencyEnum = {}));
})(WalletInfo = exports.WalletInfo || (exports.WalletInfo = {}));
/**
 * @export
 * @namespace WalletPendingTransaction
 */
var WalletPendingTransaction;
(function (WalletPendingTransaction) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = WalletPendingTransaction.CurrencyEnum || (WalletPendingTransaction.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Deposit"] = 0] = "Deposit";
        TypeEnum[TypeEnum["Withdrawn"] = 1] = "Withdrawn";
    })(TypeEnum = WalletPendingTransaction.TypeEnum || (WalletPendingTransaction.TypeEnum = {}));
})(WalletPendingTransaction = exports.WalletPendingTransaction || (exports.WalletPendingTransaction = {}));
/**
 * @export
 * @namespace WalletTransaction
 */
var WalletTransaction;
(function (WalletTransaction) {
    /**
     * @export
     * @enum {string}
     */
    var SourceTypeEnum;
    (function (SourceTypeEnum) {
        SourceTypeEnum[SourceTypeEnum["Wallet"] = 0] = "Wallet";
        SourceTypeEnum[SourceTypeEnum["Program"] = 1] = "Program";
        SourceTypeEnum[SourceTypeEnum["Fund"] = 2] = "Fund";
        SourceTypeEnum[SourceTypeEnum["ProgramRequest"] = 3] = "ProgramRequest";
        SourceTypeEnum[SourceTypeEnum["FundRequest"] = 4] = "FundRequest";
        SourceTypeEnum[SourceTypeEnum["WithdrawalRequest"] = 5] = "WithdrawalRequest";
        SourceTypeEnum[SourceTypeEnum["PaymentTransaction"] = 6] = "PaymentTransaction";
    })(SourceTypeEnum = WalletTransaction.SourceTypeEnum || (WalletTransaction.SourceTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var SourceCurrencyEnum;
    (function (SourceCurrencyEnum) {
        SourceCurrencyEnum[SourceCurrencyEnum["Undefined"] = 0] = "Undefined";
        SourceCurrencyEnum[SourceCurrencyEnum["GVT"] = 1] = "GVT";
        SourceCurrencyEnum[SourceCurrencyEnum["ETH"] = 2] = "ETH";
        SourceCurrencyEnum[SourceCurrencyEnum["BTC"] = 3] = "BTC";
        SourceCurrencyEnum[SourceCurrencyEnum["ADA"] = 4] = "ADA";
        SourceCurrencyEnum[SourceCurrencyEnum["USDT"] = 5] = "USDT";
        SourceCurrencyEnum[SourceCurrencyEnum["XRP"] = 6] = "XRP";
        SourceCurrencyEnum[SourceCurrencyEnum["BCH"] = 7] = "BCH";
        SourceCurrencyEnum[SourceCurrencyEnum["LTC"] = 8] = "LTC";
        SourceCurrencyEnum[SourceCurrencyEnum["DOGE"] = 9] = "DOGE";
        SourceCurrencyEnum[SourceCurrencyEnum["BNB"] = 10] = "BNB";
        SourceCurrencyEnum[SourceCurrencyEnum["USD"] = 11] = "USD";
        SourceCurrencyEnum[SourceCurrencyEnum["EUR"] = 12] = "EUR";
    })(SourceCurrencyEnum = WalletTransaction.SourceCurrencyEnum || (WalletTransaction.SourceCurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["Transfer"] = 0] = "Transfer";
        ActionEnum[ActionEnum["ProgramOpen"] = 1] = "ProgramOpen";
        ActionEnum[ActionEnum["ProgramProfit"] = 2] = "ProgramProfit";
        ActionEnum[ActionEnum["ProgramInvest"] = 3] = "ProgramInvest";
        ActionEnum[ActionEnum["ProgramWithdrawal"] = 4] = "ProgramWithdrawal";
        ActionEnum[ActionEnum["ProgramRefundPartialExecution"] = 5] = "ProgramRefundPartialExecution";
        ActionEnum[ActionEnum["ProgramRefundClose"] = 6] = "ProgramRefundClose";
        ActionEnum[ActionEnum["ProgramRequestInvest"] = 7] = "ProgramRequestInvest";
        ActionEnum[ActionEnum["ProgramRequestWithdrawal"] = 8] = "ProgramRequestWithdrawal";
        ActionEnum[ActionEnum["ProgramRequestCancel"] = 9] = "ProgramRequestCancel";
    })(ActionEnum = WalletTransaction.ActionEnum || (WalletTransaction.ActionEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DestinationTypeEnum;
    (function (DestinationTypeEnum) {
        DestinationTypeEnum[DestinationTypeEnum["Wallet"] = 0] = "Wallet";
        DestinationTypeEnum[DestinationTypeEnum["Program"] = 1] = "Program";
        DestinationTypeEnum[DestinationTypeEnum["Fund"] = 2] = "Fund";
        DestinationTypeEnum[DestinationTypeEnum["ProgramRequest"] = 3] = "ProgramRequest";
        DestinationTypeEnum[DestinationTypeEnum["FundRequest"] = 4] = "FundRequest";
        DestinationTypeEnum[DestinationTypeEnum["WithdrawalRequest"] = 5] = "WithdrawalRequest";
        DestinationTypeEnum[DestinationTypeEnum["PaymentTransaction"] = 6] = "PaymentTransaction";
    })(DestinationTypeEnum = WalletTransaction.DestinationTypeEnum || (WalletTransaction.DestinationTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DestinationCurrencyEnum;
    (function (DestinationCurrencyEnum) {
        DestinationCurrencyEnum[DestinationCurrencyEnum["Undefined"] = 0] = "Undefined";
        DestinationCurrencyEnum[DestinationCurrencyEnum["GVT"] = 1] = "GVT";
        DestinationCurrencyEnum[DestinationCurrencyEnum["ETH"] = 2] = "ETH";
        DestinationCurrencyEnum[DestinationCurrencyEnum["BTC"] = 3] = "BTC";
        DestinationCurrencyEnum[DestinationCurrencyEnum["ADA"] = 4] = "ADA";
        DestinationCurrencyEnum[DestinationCurrencyEnum["USDT"] = 5] = "USDT";
        DestinationCurrencyEnum[DestinationCurrencyEnum["XRP"] = 6] = "XRP";
        DestinationCurrencyEnum[DestinationCurrencyEnum["BCH"] = 7] = "BCH";
        DestinationCurrencyEnum[DestinationCurrencyEnum["LTC"] = 8] = "LTC";
        DestinationCurrencyEnum[DestinationCurrencyEnum["DOGE"] = 9] = "DOGE";
        DestinationCurrencyEnum[DestinationCurrencyEnum["BNB"] = 10] = "BNB";
        DestinationCurrencyEnum[DestinationCurrencyEnum["USD"] = 11] = "USD";
        DestinationCurrencyEnum[DestinationCurrencyEnum["EUR"] = 12] = "EUR";
    })(DestinationCurrencyEnum = WalletTransaction.DestinationCurrencyEnum || (WalletTransaction.DestinationCurrencyEnum = {}));
})(WalletTransaction = exports.WalletTransaction || (exports.WalletTransaction = {}));
/**
 * @export
 * @namespace WalletWithdrawalInfo
 */
var WalletWithdrawalInfo;
(function (WalletWithdrawalInfo) {
    /**
     * @export
     * @enum {string}
     */
    var CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["Undefined"] = 0] = "Undefined";
        CurrencyEnum[CurrencyEnum["GVT"] = 1] = "GVT";
        CurrencyEnum[CurrencyEnum["ETH"] = 2] = "ETH";
        CurrencyEnum[CurrencyEnum["BTC"] = 3] = "BTC";
        CurrencyEnum[CurrencyEnum["ADA"] = 4] = "ADA";
        CurrencyEnum[CurrencyEnum["USDT"] = 5] = "USDT";
        CurrencyEnum[CurrencyEnum["XRP"] = 6] = "XRP";
        CurrencyEnum[CurrencyEnum["BCH"] = 7] = "BCH";
        CurrencyEnum[CurrencyEnum["LTC"] = 8] = "LTC";
        CurrencyEnum[CurrencyEnum["DOGE"] = 9] = "DOGE";
        CurrencyEnum[CurrencyEnum["BNB"] = 10] = "BNB";
        CurrencyEnum[CurrencyEnum["USD"] = 11] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 12] = "EUR";
    })(CurrencyEnum = WalletWithdrawalInfo.CurrencyEnum || (WalletWithdrawalInfo.CurrencyEnum = {}));
})(WalletWithdrawalInfo = exports.WalletWithdrawalInfo || (exports.WalletWithdrawalInfo = {}));
/**
 * @export
 * @namespace WithdrawalInfo
 */
var WithdrawalInfo;
(function (WithdrawalInfo) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["New"] = 0] = "New";
        StatusEnum[StatusEnum["InProcess"] = 1] = "InProcess";
        StatusEnum[StatusEnum["Done"] = 2] = "Done";
        StatusEnum[StatusEnum["Error"] = 3] = "Error";
        StatusEnum[StatusEnum["Rejected"] = 4] = "Rejected";
        StatusEnum[StatusEnum["Cancelled"] = 5] = "Cancelled";
    })(StatusEnum = WithdrawalInfo.StatusEnum || (WithdrawalInfo.StatusEnum = {}));
})(WithdrawalInfo = exports.WithdrawalInfo || (exports.WithdrawalInfo = {}));
/**
 * AuthApi - fetch parameter creator
 * @export
 */
exports.AuthApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faConfirmPost.');
            }
            var localVarPath = "/v1.0/auth/2fa/confirm";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TwoFactorAuthenticatorConfirm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faCreatePost.');
            }
            var localVarPath = "/v1.0/auth/2fa/create";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faDisablePost.');
            }
            var localVarPath = "/v1.0/auth/2fa/disable";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TwoFactorCodeModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faGet.');
            }
            var localVarPath = "/v1.0/auth/2fa";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesNewPost.');
            }
            var localVarPath = "/v1.0/auth/2fa/recoverycodes/new";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesPost.');
            }
            var localVarPath = "/v1.0/auth/2fa/recoverycodes";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPasswordChangePost.');
            }
            var localVarPath = "/v1.0/auth/password/change";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChangePasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/password/forgot/investor";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/password/forgot/manager";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/password/reset";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ResetPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPhoneCodePost.');
            }
            var localVarPath = "/v1.0/auth/phone/code";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost: function (authorization, code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthPhoneVerifyPost.');
            }
            var localVarPath = "/v1.0/auth/phone/verify";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/resendconfirmationlink";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ResendConfirmationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/signin/investor";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/signin/manager";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Confirm email after registration
         * @param {string} [userId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost: function (userId, code, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/signup/confirm";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/signup/investor";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterInvestorViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/auth/signup/manager";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterManagerViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthTokenDevicesLogoutPost.');
            }
            var localVarPath = "/v1.0/auth/token/devices/logout";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10AuthTokenUpdatePost.');
            }
            var localVarPath = "/v1.0/auth/token/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
exports.AuthApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost: function (authorization, model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faConfirmPost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost: function (authorization, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faCreatePost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost: function (authorization, model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faDisablePost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet: function (authorization, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost: function (authorization, model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost: function (authorization, model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesPost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost: function (authorization, model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPasswordChangePost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotInvestorPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotManagerPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPasswordResetPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost: function (authorization, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPhoneCodePost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost: function (authorization, code, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthPhoneVerifyPost(authorization, code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthResendconfirmationlinkPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthSigninInvestorPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthSigninManagerPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Confirm email after registration
         * @param {string} [userId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost: function (userId, code, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthSignupConfirmPost(userId, code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthSignupInvestorPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost: function (model, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthSignupManagerPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost: function (authorization, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthTokenDevicesLogoutPost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost: function (authorization, options) {
            var localVarFetchArgs = exports.AuthApiFetchParamCreator(configuration).v10AuthTokenUpdatePost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
exports.AuthApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 2FA confirm
         * @param {string} authorization JWT access token
         * @param {TwoFactorAuthenticatorConfirm} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faConfirmPost: function (authorization, model, options) {
            return exports.AuthApiFp(configuration).v10Auth2faConfirmPost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary 2FA create
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faCreatePost: function (authorization, options) {
            return exports.AuthApiFp(configuration).v10Auth2faCreatePost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 2FA disable
         * @param {string} authorization JWT access token
         * @param {TwoFactorCodeModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faDisablePost: function (authorization, model, options) {
            return exports.AuthApiFp(configuration).v10Auth2faDisablePost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary 2FA status
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faGet: function (authorization, options) {
            return exports.AuthApiFp(configuration).v10Auth2faGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 2FA generate new recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesNewPost: function (authorization, model, options) {
            return exports.AuthApiFp(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary 2FA recovery codes
         * @param {string} authorization JWT access token
         * @param {PasswordModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10Auth2faRecoverycodesPost: function (authorization, model, options) {
            return exports.AuthApiFp(configuration).v10Auth2faRecoverycodesPost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Change password
         * @param {string} authorization JWT access token
         * @param {ChangePasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordChangePost: function (authorization, model, options) {
            return exports.AuthApiFp(configuration).v10AuthPasswordChangePost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Forgot password for investor
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotInvestorPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthPasswordForgotInvestorPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Forgot password for manager
         * @param {ForgotPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordForgotManagerPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthPasswordForgotManagerPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Reset password
         * @param {ResetPasswordViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPasswordResetPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthPasswordResetPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get phone number verification code
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneCodePost: function (authorization, options) {
            return exports.AuthApiFp(configuration).v10AuthPhoneCodePost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Verify phone number
         * @param {string} authorization JWT access token
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthPhoneVerifyPost: function (authorization, code, options) {
            return exports.AuthApiFp(configuration).v10AuthPhoneVerifyPost(authorization, code, options)(fetch, basePath);
        },
        /**
         *
         * @summary Resend Confirmation Link
         * @param {ResendConfirmationViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthResendconfirmationlinkPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthResendconfirmationlinkPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninInvestorPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthSigninInvestorPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Authorize
         * @param {LoginViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSigninManagerPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthSigninManagerPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Confirm email after registration
         * @param {string} [userId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupConfirmPost: function (userId, code, options) {
            return exports.AuthApiFp(configuration).v10AuthSignupConfirmPost(userId, code, options)(fetch, basePath);
        },
        /**
         *
         * @summary New investor registration
         * @param {RegisterInvestorViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupInvestorPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthSignupInvestorPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary New manager registration
         * @param {RegisterManagerViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthSignupManagerPost: function (model, options) {
            return exports.AuthApiFp(configuration).v10AuthSignupManagerPost(model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Logout from another devices
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenDevicesLogoutPost: function (authorization, options) {
            return exports.AuthApiFp(configuration).v10AuthTokenDevicesLogoutPost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update auth token
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10AuthTokenUpdatePost: function (authorization, options) {
            return exports.AuthApiFp(configuration).v10AuthTokenUpdatePost(authorization, options)(fetch, basePath);
        }
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary 2FA confirm
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {TwoFactorAuthenticatorConfirm} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faConfirmPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10Auth2faConfirmPost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 2FA create
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faCreatePost = function (authorization, requestOptions) {
        return exports.AuthApiFp(this.configuration).v10Auth2faCreatePost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 2FA disable
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {TwoFactorCodeModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faDisablePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10Auth2faDisablePost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 2FA status
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faGet = function (authorization, requestOptions) {
        return exports.AuthApiFp(this.configuration).v10Auth2faGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 2FA generate new recovery codes
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {PasswordModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faRecoverycodesNewPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10Auth2faRecoverycodesNewPost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary 2FA recovery codes
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {PasswordModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10Auth2faRecoverycodesPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10Auth2faRecoverycodesPost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Change password
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {ChangePasswordViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPasswordChangePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthPasswordChangePost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Forgot password for investor
    * @param {Object} opts Optional parameters
    * @param {ForgotPasswordViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPasswordForgotInvestorPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthPasswordForgotInvestorPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Forgot password for manager
    * @param {Object} opts Optional parameters
    * @param {ForgotPasswordViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPasswordForgotManagerPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthPasswordForgotManagerPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Reset password
    * @param {Object} opts Optional parameters
    * @param {ResetPasswordViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPasswordResetPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthPasswordResetPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get phone number verification code
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPhoneCodePost = function (authorization, requestOptions) {
        return exports.AuthApiFp(this.configuration).v10AuthPhoneCodePost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Verify phone number
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthPhoneVerifyPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthPhoneVerifyPost(authorization, options.code, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Resend Confirmation Link
    * @param {Object} opts Optional parameters
    * @param {ResendConfirmationViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthResendconfirmationlinkPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthResendconfirmationlinkPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Authorize
    * @param {Object} opts Optional parameters
    * @param {LoginViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthSigninInvestorPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthSigninInvestorPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Authorize
    * @param {Object} opts Optional parameters
    * @param {LoginViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthSigninManagerPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthSigninManagerPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Confirm email after registration
    * @param {Object} opts Optional parameters
    * @param {string} opts.userId

    * @param {string} opts.code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthSignupConfirmPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthSignupConfirmPost(options.userId, options.code, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary New investor registration
    * @param {Object} opts Optional parameters
    * @param {RegisterInvestorViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthSignupInvestorPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthSignupInvestorPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary New manager registration
    * @param {Object} opts Optional parameters
    * @param {RegisterManagerViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthSignupManagerPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.AuthApiFp(this.configuration).v10AuthSignupManagerPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Logout from another devices
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthTokenDevicesLogoutPost = function (authorization, requestOptions) {
        return exports.AuthApiFp(this.configuration).v10AuthTokenDevicesLogoutPost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update auth token
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.v10AuthTokenUpdatePost = function (authorization, requestOptions) {
        return exports.AuthApiFp(this.configuration).v10AuthTokenUpdatePost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    return AuthApi;
}(BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BrokersApi - fetch parameter creator
 * @export
 */
exports.BrokersApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/brokers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * BrokersApi - functional programming interface
 * @export
 */
exports.BrokersApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet: function (options) {
            var localVarFetchArgs = exports.BrokersApiFetchParamCreator(configuration).v10BrokersGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * BrokersApi - factory interface
 * @export
 */
exports.BrokersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get all trade servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10BrokersGet: function (options) {
            return exports.BrokersApiFp(configuration).v10BrokersGet(options)(fetch, basePath);
        }
    };
};
/**
 * BrokersApi - object-oriented interface
 * @export
 * @class BrokersApi
 * @extends {BaseAPI}
 */
var BrokersApi = /** @class */ (function (_super) {
    __extends(BrokersApi, _super);
    function BrokersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all trade servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrokersApi
     */
    BrokersApi.prototype.v10BrokersGet = function (requestOptions) {
        return exports.BrokersApiFp(this.configuration).v10BrokersGet(requestOptions)(this.fetch, this.basePath);
    };
    return BrokersApi;
}(BaseAPI));
exports.BrokersApi = BrokersApi;
/**
 * FileApi - fetch parameter creator
 * @export
 */
exports.FileApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Download file
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FileByIdGet.');
            }
            var localVarPath = "/v1.0/file/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost: function (authorization, uploadedFile, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FileDocumentUploadPost.');
            }
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile', 'Required parameter uploadedFile was null or undefined when calling v10FileDocumentUploadPost.');
            }
            var localVarPath = "/v1.0/file/document/upload";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var localVarFormParams = new url.URLSearchParams();
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost: function (uploadedFile, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile', 'Required parameter uploadedFile was null or undefined when calling v10FileUploadPost.');
            }
            var localVarPath = "/v1.0/file/upload";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var localVarFormParams = new url.URLSearchParams();
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * FileApi - functional programming interface
 * @export
 */
exports.FileApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Download file
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet: function (id, options) {
            var localVarFetchArgs = exports.FileApiFetchParamCreator(configuration).v10FileByIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost: function (authorization, uploadedFile, options) {
            var localVarFetchArgs = exports.FileApiFetchParamCreator(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost: function (uploadedFile, authorization, options) {
            var localVarFetchArgs = exports.FileApiFetchParamCreator(configuration).v10FileUploadPost(uploadedFile, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * FileApi - factory interface
 * @export
 */
exports.FileApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Download file
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileByIdGet: function (id, options) {
            return exports.FileApiFp(configuration).v10FileByIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Upload document
         * @param {string} authorization JWT access token
         * @param {any} uploadedFile Upload File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileDocumentUploadPost: function (authorization, uploadedFile, options) {
            return exports.FileApiFp(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options)(fetch, basePath);
        },
        /**
         *
         * @summary Upload file
         * @param {any} uploadedFile Upload File
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FileUploadPost: function (uploadedFile, authorization, options) {
            return exports.FileApiFp(configuration).v10FileUploadPost(uploadedFile, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
var FileApi = /** @class */ (function (_super) {
    __extends(FileApi, _super);
    function FileApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Download file
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.v10FileByIdGet = function (id, requestOptions) {
        return exports.FileApiFp(this.configuration).v10FileByIdGet(id, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Upload document
     * @param {string} authorization JWT access token
     * @param {any} uploadedFile Upload File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.v10FileDocumentUploadPost = function (authorization, uploadedFile, requestOptions) {
        return exports.FileApiFp(this.configuration).v10FileDocumentUploadPost(authorization, uploadedFile, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Upload file
     * @param {any} uploadedFile Upload File
    * @param {Object} opts Optional parameters

    * @param {string} opts.authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.v10FileUploadPost = function (uploadedFile, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.FileApiFp(this.configuration).v10FileUploadPost(uploadedFile, options.authorization, requestOptions)(this.fetch, this.basePath);
    };
    return FileApi;
}(BaseAPI));
exports.FileApi = FileApi;
/**
 * FundsApi - fetch parameter creator
 * @export
 */
exports.FundsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/funds/assets";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Fund assets info
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdAssetsGet.');
            }
            var localVarPath = "/v1.0/funds/{id}/assets"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Fund balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdChartsBalanceGet.');
            }
            var localVarPath = "/v1.0/funds/{id}/charts/balance"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Fund profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdChartsProfitGet.');
            }
            var localVarPath = "/v1.0/funds/{id}/charts/profit"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            var localVarPath = "/v1.0/funds/{id}/favorite/add"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            var localVarPath = "/v1.0/funds/{id}/favorite/remove"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Funds details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet: function (id, authorization, currencySecondary, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10FundsByIdGet.');
            }
            var localVarPath = "/v1.0/funds/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Funds list
         * @param {string} [authorization]
         * @param {string} [sorting]
         * @param {string} [currencySecondary]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet: function (authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/funds";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
            }
            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }
            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }
            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }
            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }
            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10FundsSetsGet.');
            }
            var localVarPath = "/v1.0/funds/sets";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * FundsApi - functional programming interface
 * @export
 */
exports.FundsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet: function (options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsAssetsGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Fund assets info
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet: function (id, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdAssetsGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Fund balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Fund profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost: function (id, authorization, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Funds details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet: function (id, authorization, currencySecondary, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Funds list
         * @param {string} [authorization]
         * @param {string} [sorting]
         * @param {string} [currencySecondary]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet: function (authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsGet(authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet: function (authorization, options) {
            var localVarFetchArgs = exports.FundsApiFetchParamCreator(configuration).v10FundsSetsGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * FundsApi - factory interface
 * @export
 */
exports.FundsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get all supported assets for funds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsAssetsGet: function (options) {
            return exports.FundsApiFp(configuration).v10FundsAssetsGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Fund assets info
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdAssetsGet: function (id, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdAssetsGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fund balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fund profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteAddPost: function (id, authorization, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdFavoriteRemovePost: function (id, authorization, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Funds details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsByIdGet: function (id, authorization, currencySecondary, options) {
            return exports.FundsApiFp(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options)(fetch, basePath);
        },
        /**
         *
         * @summary Funds list
         * @param {string} [authorization]
         * @param {string} [sorting]
         * @param {string} [currencySecondary]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsGet: function (authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            return exports.FundsApiFp(configuration).v10FundsGet(authorization, sorting, currencySecondary, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fund sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10FundsSetsGet: function (authorization, options) {
            return exports.FundsApiFp(configuration).v10FundsSetsGet(authorization, options)(fetch, basePath);
        }
    };
};
/**
 * FundsApi - object-oriented interface
 * @export
 * @class FundsApi
 * @extends {BaseAPI}
 */
var FundsApi = /** @class */ (function (_super) {
    __extends(FundsApi, _super);
    function FundsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all supported assets for funds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsAssetsGet = function (requestOptions) {
        return exports.FundsApiFp(this.configuration).v10FundsAssetsGet(requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fund assets info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdAssetsGet = function (id, requestOptions) {
        return exports.FundsApiFp(this.configuration).v10FundsByIdAssetsGet(id, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fund balance chart
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {Date} opts.dateFrom

    * @param {Date} opts.dateTo

    * @param {number} opts.maxPointCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdChartsBalanceGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.FundsApiFp(this.configuration).v10FundsByIdChartsBalanceGet(id, options.dateFrom, options.dateTo, options.maxPointCount, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fund profit chart
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {Date} opts.dateFrom

    * @param {Date} opts.dateTo

    * @param {number} opts.maxPointCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdChartsProfitGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.FundsApiFp(this.configuration).v10FundsByIdChartsProfitGet(id, options.dateFrom, options.dateTo, options.maxPointCount, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdFavoriteAddPost = function (id, authorization, requestOptions) {
        return exports.FundsApiFp(this.configuration).v10FundsByIdFavoriteAddPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdFavoriteRemovePost = function (id, authorization, requestOptions) {
        return exports.FundsApiFp(this.configuration).v10FundsByIdFavoriteRemovePost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Funds details
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {string} opts.authorization

    * @param {string} opts.currencySecondary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsByIdGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.FundsApiFp(this.configuration).v10FundsByIdGet(id, options.authorization, options.currencySecondary, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Funds list
    * @param {Object} opts Optional parameters
    * @param {string} opts.authorization

    * @param {string} opts.sorting

    * @param {string} opts.currencySecondary

    * @param {Date} opts.statisticDateFrom

    * @param {Date} opts.statisticDateTo

    * @param {number} opts.chartPointsCount

    * @param {string} opts.mask

    * @param {string} opts.facetId

    * @param {boolean} opts.isFavorite

    * @param {boolean} opts.isEnabled

    * @param {Array<string>} opts.ids

    * @param {string} opts.managerId

    * @param {string} opts.programManagerId

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.FundsApiFp(this.configuration).v10FundsGet(options.authorization, options.sorting, options.currencySecondary, options.statisticDateFrom, options.statisticDateTo, options.chartPointsCount, options.mask, options.facetId, options.isFavorite, options.isEnabled, options.ids, options.managerId, options.programManagerId, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fund sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApi
     */
    FundsApi.prototype.v10FundsSetsGet = function (authorization, requestOptions) {
        return exports.FundsApiFp(this.configuration).v10FundsSetsGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    return FundsApi;
}(BaseAPI));
exports.FundsApi = FundsApi;
/**
 * InvestorApi - fetch parameter creator
 * @export
 */
exports.InvestorApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Investing into the fund
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            var localVarPath = "/v1.0/investor/funds/{id}/invest/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/investor/funds/{id}/invest/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/investor/funds/{id}/requests/{skip}/{take}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent', 'Required parameter percent was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            var localVarPath = "/v1.0/investor/funds/{id}/withdraw/{percent}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "percent" + "}", encodeURIComponent(String(percent)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/investor/funds/{id}/withdraw/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorFundsGet.');
            }
            var localVarPath = "/v1.0/investor/funds";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {number} [eventsTake]
         * @param {number} [requestsSkip]
         * @param {number} [requestsTake]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet: function (authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorGet.');
            }
            var localVarPath = "/v1.0/investor";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (chartCurrency !== undefined) {
                localVarQueryParameter['chartCurrency'] = chartCurrency;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }
            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }
            if (eventsTake !== undefined) {
                localVarQueryParameter['eventsTake'] = eventsTake;
            }
            if (requestsSkip !== undefined) {
                localVarQueryParameter['requestsSkip'] = requestsSkip;
            }
            if (requestsTake !== undefined) {
                localVarQueryParameter['requestsTake'] = requestsTake;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet: function (authorization, currency, from, to, balancePoints, programsPoints, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorPortfolioChartGet.');
            }
            var localVarPath = "/v1.0/investor/portfolio/chart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }
            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorPortfolioEventsGet.');
            }
            var localVarPath = "/v1.0/investor/portfolio/events";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Investing into the program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/invest/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/invest/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Disable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/reinvest/off"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Enable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/reinvest/on"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/requests/{skip}/{take}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Withdraw from investment program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/withdraw/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/investor/programs/{id}/withdraw/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsGet.');
            }
            var localVarPath = "/v1.0/investor/programs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Cancel investment program request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            var localVarPath = "/v1.0/investor/programs/requests/{id}/cancel"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/investor/requests/{skip}/{take}"
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * InvestorApi - functional programming interface
 * @export
 */
exports.InvestorApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Investing into the fund
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {number} [eventsTake]
         * @param {number} [requestsSkip]
         * @param {number} [requestsTake]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet: function (authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet: function (authorization, currency, from, to, balancePoints, programsPoints, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Investing into the program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Disable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Enable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Withdraw from investment program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Cancel investment program request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            var localVarFetchArgs = exports.InvestorApiFetchParamCreator(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * InvestorApi - factory interface
 * @export
 */
exports.InvestorApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Investing into the fund
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Funds list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            return exports.InvestorApiFp(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Summary dashboard info
         * @param {string} authorization JWT access token
         * @param {string} [chartCurrency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {number} [eventsTake]
         * @param {number} [requestsSkip]
         * @param {number} [requestsTake]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorGet: function (authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options) {
            return exports.InvestorApiFp(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options)(fetch, basePath);
        },
        /**
         *
         * @summary Portfolio charts
         * @param {string} authorization JWT access token
         * @param {string} [currency]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [balancePoints]
         * @param {number} [programsPoints]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioChartGet: function (authorization, currency, from, to, balancePoints, programsPoints, options) {
            return exports.InvestorApiFp(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options)(fetch, basePath);
        },
        /**
         *
         * @summary Portfolio events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorPortfolioEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            return exports.InvestorApiFp(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Investing into the program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Disable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOffPost: function (id, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Enable reinvesting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdReinvestOnPost: function (id, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Withdraw from investment program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Dashboard program list
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Cancel investment program request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10InvestorRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            return exports.InvestorApiFp(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * InvestorApi - object-oriented interface
 * @export
 * @class InvestorApi
 * @extends {BaseAPI}
 */
var InvestorApi = /** @class */ (function (_super) {
    __extends(InvestorApi, _super);
    function InvestorApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Investing into the fund
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsByIdInvestByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsByIdInvestInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsByIdRequestsBySkipByTakeGet = function (id, skip, take, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsByIdWithdrawByPercentPost = function (id, percent, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsByIdWithdrawInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Funds list
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.sorting

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.chartPointsCount

    * @param {string} opts.currencySecondary

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorFundsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.InvestorApiFp(this.configuration).v10InvestorFundsGet(authorization, options.sorting, options.from, options.to, options.chartPointsCount, options.currencySecondary, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Summary dashboard info
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.chartCurrency

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.balancePoints

    * @param {number} opts.programsPoints

    * @param {number} opts.eventsTake

    * @param {number} opts.requestsSkip

    * @param {number} opts.requestsTake
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.InvestorApiFp(this.configuration).v10InvestorGet(authorization, options.chartCurrency, options.from, options.to, options.balancePoints, options.programsPoints, options.eventsTake, options.requestsSkip, options.requestsTake, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Portfolio charts
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.currency

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.balancePoints

    * @param {number} opts.programsPoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorPortfolioChartGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.InvestorApiFp(this.configuration).v10InvestorPortfolioChartGet(authorization, options.currency, options.from, options.to, options.balancePoints, options.programsPoints, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Portfolio events
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.assetId

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {string} opts.type

    * @param {string} opts.assetType

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorPortfolioEventsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.InvestorApiFp(this.configuration).v10InvestorPortfolioEventsGet(authorization, options.assetId, options.from, options.to, options.type, options.assetType, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Investing into the program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdInvestByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdInvestInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Disable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdReinvestOffPost = function (id, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Enable reinvesting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdReinvestOnPost = function (id, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdRequestsBySkipByTakeGet = function (id, skip, take, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Withdraw from investment program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdWithdrawByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsByIdWithdrawInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Dashboard program list
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.sorting

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.chartPointsCount

    * @param {string} opts.currencySecondary

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsGet(authorization, options.sorting, options.from, options.to, options.chartPointsCount, options.currencySecondary, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Cancel investment program request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorProgramsRequestsByIdCancelPost = function (id, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorApi
     */
    InvestorApi.prototype.v10InvestorRequestsBySkipByTakeGet = function (skip, take, authorization, requestOptions) {
        return exports.InvestorApiFp(this.configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    return InvestorApi;
}(BaseAPI));
exports.InvestorApi = InvestorApi;
/**
 * KycApi - fetch parameter creator
 * @export
 */
exports.KycApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {KycCallback} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost: function (model, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/kyc/callback";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("KycCallback" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * KycApi - functional programming interface
 * @export
 */
exports.KycApiFp = function (configuration) {
    return {
        /**
         *
         * @param {KycCallback} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost: function (model, options) {
            var localVarFetchArgs = exports.KycApiFetchParamCreator(configuration).v10KycCallbackPost(model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * KycApi - factory interface
 * @export
 */
exports.KycApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {KycCallback} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10KycCallbackPost: function (model, options) {
            return exports.KycApiFp(configuration).v10KycCallbackPost(model, options)(fetch, basePath);
        }
    };
};
/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
var KycApi = /** @class */ (function (_super) {
    __extends(KycApi, _super);
    function KycApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
    * @param {Object} opts Optional parameters
    * @param {KycCallback} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    KycApi.prototype.v10KycCallbackPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.KycApiFp(this.configuration).v10KycCallbackPost(options.model, requestOptions)(this.fetch, this.basePath);
    };
    return KycApi;
}(BaseAPI));
exports.KycApi = KycApi;
/**
 * ManagerApi - fetch parameter creator
 * @export
 */
exports.ManagerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerAssetsGet.');
            }
            var localVarPath = "/v1.0/manager/assets";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager details
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerByIdDetailsGet.');
            }
            var localVarPath = "/v1.0/manager/{id}/details"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerByIdGet.');
            }
            var localVarPath = "/v1.0/manager/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerEventsGet.');
            }
            var localVarPath = "/v1.0/manager/events";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update fund assets parts
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost: function (id, authorization, assets, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/assets/update"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;FundAssetPart&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(assets || {}) : (assets || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Close existing fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/close"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/invest/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/invest/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/requests/{skip}/{take}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost: function (id, authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/update"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent', 'Required parameter percent was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/withdraw/{percent}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "percent" + "}", encodeURIComponent(String(percent)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/manager/funds/{id}/withdraw/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost: function (authorization, request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsCreatePost.');
            }
            var localVarPath = "/v1.0/manager/funds/create";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("NewFundRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsGet.');
            }
            var localVarPath = "/v1.0/manager/funds";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsInvestmentAmountGet.');
            }
            var localVarPath = "/v1.0/manager/funds/investment/amount";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            var localVarPath = "/v1.0/manager/funds/requests/{id}/cancel"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerGet.');
            }
            var localVarPath = "/v1.0/manager";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Close existing investment program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/close"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/invest/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/invest/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Close current period
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/period/close"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/requests/{skip}/{take}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost: function (id, authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/update"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Withdraw from program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount', 'Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/withdraw/{amount}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "amount" + "}", encodeURIComponent(String(amount)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            var localVarPath = "/v1.0/manager/programs/{id}/withdraw/info/{currency}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost: function (authorization, request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsCreatePost.');
            }
            var localVarPath = "/v1.0/manager/programs/create";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("NewProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsGet.');
            }
            var localVarPath = "/v1.0/manager/programs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsInvestmentAmountGet.');
            }
            var localVarPath = "/v1.0/manager/programs/investment/amount";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            var localVarPath = "/v1.0/manager/programs/requests/{id}/cancel"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip', 'Required parameter skip was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take', 'Required parameter take was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            var localVarPath = "/v1.0/manager/requests/{skip}/{take}"
                .replace("{" + "skip" + "}", encodeURIComponent(String(skip)))
                .replace("{" + "take" + "}", encodeURIComponent(String(take)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ManagerApi - functional programming interface
 * @export
 */
exports.ManagerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet: function (authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerAssetsGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager details
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet: function (id, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerByIdDetailsGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet: function (id, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerByIdGet(id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update fund assets parts
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost: function (id, authorization, assets, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Close existing fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost: function (id, authorization, model, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost: function (authorization, request, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsCreatePost(authorization, request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet: function (authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Close existing investment program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Close current period
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost: function (id, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost: function (id, authorization, model, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Withdraw from program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost: function (authorization, request, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsCreatePost(authorization, request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet: function (authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            var localVarFetchArgs = exports.ManagerApiFetchParamCreator(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ManagerApi - factory interface
 * @export
 */
exports.ManagerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Manager assets list
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerAssetsGet: function (authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerAssetsGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager details
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdDetailsGet: function (id, options) {
            return exports.ManagerApiFp(configuration).v10ManagerByIdDetailsGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerByIdGet: function (id, options) {
            return exports.ManagerApiFp(configuration).v10ManagerByIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager events
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerEventsGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            return exports.ManagerApiFp(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update fund assets parts
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {Array<FundAssetPart>} [assets]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdAssetsUpdatePost: function (id, authorization, assets, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options)(fetch, basePath);
        },
        /**
         *
         * @summary Close existing fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options)(fetch, basePath);
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for investing into the fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdUpdatePost: function (id, authorization, model, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Withdraw from fund. Percent is % of investor total money.
         * @param {string} id
         * @param {number} percent
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawByPercentPost: function (id, percent, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for withdrawal from fund
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create fund
         * @param {string} authorization JWT access token
         * @param {NewFundRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsCreatePost: function (authorization, request, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsCreatePost(authorization, request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager funds
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get GVT investment to create fund
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsInvestmentAmountGet: function (authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerFundsRequestsByIdCancelPost: function (id, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager dashboard
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [type]
         * @param {string} [assetType]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerGet: function (authorization, assetId, from, to, type, assetType, skip, take, options) {
            return exports.ManagerApiFp(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Close existing investment program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {string} [twoFactorCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdClosePost: function (id, authorization, twoFactorCode, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options)(fetch, basePath);
        },
        /**
         *
         * @summary Deposit
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestByAmountPost: function (id, amount, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for investing into the program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdInvestInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Close current period
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdPeriodClosePost: function (id, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get investment program/fund requests
         * @param {string} id
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdRequestsBySkipByTakeGet: function (id, skip, take, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update investment program/fund details
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {ProgramUpdate} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdUpdatePost: function (id, authorization, model, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Withdraw from program
         * @param {string} id
         * @param {number} amount
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawByAmountPost: function (id, amount, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Data for withdrawal from investment program
         * @param {string} id
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet: function (id, currency, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create an investment program
         * @param {string} authorization JWT access token
         * @param {NewProgramRequest} [request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsCreatePost: function (authorization, request, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsCreatePost(authorization, request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Manager programs
         * @param {string} authorization JWT access token
         * @param {string} [sorting]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {number} [chartPointsCount]
         * @param {string} [currencySecondary]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsGet: function (authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get GVT investment to create program
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsInvestmentAmountGet: function (authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Cancel investment program/fund request
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerProgramsRequestsByIdCancelPost: function (id, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all requests
         * @param {number} skip
         * @param {number} take
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ManagerRequestsBySkipByTakeGet: function (skip, take, authorization, options) {
            return exports.ManagerApiFp(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
var ManagerApi = /** @class */ (function (_super) {
    __extends(ManagerApi, _super);
    function ManagerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Manager assets list
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerAssetsGet = function (authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerAssetsGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager details
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerByIdDetailsGet = function (id, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerByIdDetailsGet(id, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerByIdGet = function (id, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerByIdGet(id, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager events
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.assetId

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {string} opts.type

    * @param {string} opts.assetType

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerEventsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerEventsGet(authorization, options.assetId, options.from, options.to, options.type, options.assetType, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update fund assets parts
     * @param {string} id
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters


    * @param {Array<FundAssetPart>} opts.assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdAssetsUpdatePost = function (id, authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, options.assets, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Close existing fund
     * @param {string} id
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters


    * @param {string} opts.twoFactorCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdClosePost = function (id, authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdClosePost(id, authorization, options.twoFactorCode, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdInvestByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for investing into the fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdInvestInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdRequestsBySkipByTakeGet = function (id, skip, take, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters


    * @param {ProgramUpdate} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdUpdatePost = function (id, authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdUpdatePost(id, authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Withdraw from fund. Percent is % of investor total money.
     * @param {string} id
     * @param {number} percent
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdWithdrawByPercentPost = function (id, percent, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for withdrawal from fund
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsByIdWithdrawInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create fund
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {NewFundRequest} opts.request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsCreatePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsCreatePost(authorization, options.request, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager funds
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.sorting

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.chartPointsCount

    * @param {string} opts.currencySecondary

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsGet(authorization, options.sorting, options.from, options.to, options.chartPointsCount, options.currencySecondary, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get GVT investment to create fund
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsInvestmentAmountGet = function (authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsInvestmentAmountGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerFundsRequestsByIdCancelPost = function (id, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager dashboard
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.assetId

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {string} opts.type

    * @param {string} opts.assetType

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerGet(authorization, options.assetId, options.from, options.to, options.type, options.assetType, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Close existing investment program
     * @param {string} id
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters


    * @param {string} opts.twoFactorCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdClosePost = function (id, authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdClosePost(id, authorization, options.twoFactorCode, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Deposit
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdInvestByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for investing into the program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdInvestInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Close current period
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdPeriodClosePost = function (id, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get investment program/fund requests
     * @param {string} id
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdRequestsBySkipByTakeGet = function (id, skip, take, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update investment program/fund details
     * @param {string} id
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters


    * @param {ProgramUpdate} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdUpdatePost = function (id, authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Withdraw from program
     * @param {string} id
     * @param {number} amount
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdWithdrawByAmountPost = function (id, amount, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Data for withdrawal from investment program
     * @param {string} id
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsByIdWithdrawInfoByCurrencyGet = function (id, currency, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create an investment program
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {NewProgramRequest} opts.request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsCreatePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsCreatePost(authorization, options.request, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Manager programs
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.sorting

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {number} opts.chartPointsCount

    * @param {string} opts.currencySecondary

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsGet(authorization, options.sorting, options.from, options.to, options.chartPointsCount, options.currencySecondary, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get GVT investment to create program
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsInvestmentAmountGet = function (authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsInvestmentAmountGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Cancel investment program/fund request
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerProgramsRequestsByIdCancelPost = function (id, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all requests
     * @param {number} skip
     * @param {number} take
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    ManagerApi.prototype.v10ManagerRequestsBySkipByTakeGet = function (skip, take, authorization, requestOptions) {
        return exports.ManagerApiFp(this.configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, requestOptions)(this.fetch, this.basePath);
    };
    return ManagerApi;
}(BaseAPI));
exports.ManagerApi = ManagerApi;
/**
 * NotificationsApi - fetch parameter creator
 * @export
 */
exports.NotificationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet: function (authorization, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsGet.');
            }
            var localVarPath = "/v1.0/notifications";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsNewGet.');
            }
            var localVarPath = "/v1.0/notifications/new";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {string} [managerId]
         * @param {string} [type]
         * @param {string} [conditionType]
         * @param {number} [conditionAmount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost: function (authorization, assetId, managerId, type, conditionType, conditionAmount, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsAddPost.');
            }
            var localVarPath = "/v1.0/notifications/settings/add";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }
            if (conditionType !== undefined) {
                localVarQueryParameter['ConditionType'] = conditionType;
            }
            if (conditionAmount !== undefined) {
                localVarQueryParameter['ConditionAmount'] = conditionAmount;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Enable/disable setting
         * @param {string} id
         * @param {boolean} enable
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost: function (id, enable, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'enable' is not null or undefined
            if (enable === null || enable === undefined) {
                throw new RequiredError('enable', 'Required parameter enable was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            var localVarPath = "/v1.0/notifications/settings/{id}/{enable}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                .replace("{" + "enable" + "}", encodeURIComponent(String(enable)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary User settings for fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            var localVarPath = "/v1.0/notifications/settings/funds/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsGet.');
            }
            var localVarPath = "/v1.0/notifications/settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary User settings for manager
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            var localVarPath = "/v1.0/notifications/settings/managers/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary User settings for program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            var localVarPath = "/v1.0/notifications/settings/programs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Remove setting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            var localVarPath = "/v1.0/notifications/settings/remove/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
exports.NotificationsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet: function (authorization, skip, take, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsGet(authorization, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet: function (authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsNewGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {string} [managerId]
         * @param {string} [type]
         * @param {string} [conditionType]
         * @param {number} [conditionAmount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost: function (authorization, assetId, managerId, type, conditionType, conditionAmount, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Enable/disable setting
         * @param {string} id
         * @param {boolean} enable
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost: function (id, enable, authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User settings for fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet: function (id, authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet: function (authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User settings for manager
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet: function (id, authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary User settings for program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet: function (id, authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Remove setting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * NotificationsApi - factory interface
 * @export
 */
exports.NotificationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary User notifications
         * @param {string} authorization JWT access token
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsGet: function (authorization, skip, take, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsGet(authorization, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Unread notifications count
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsNewGet: function (authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsNewGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Add new setting
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {string} [managerId]
         * @param {string} [type]
         * @param {string} [conditionType]
         * @param {number} [conditionAmount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsAddPost: function (authorization, assetId, managerId, type, conditionType, conditionAmount, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options)(fetch, basePath);
        },
        /**
         *
         * @summary Enable/disable setting
         * @param {string} id
         * @param {boolean} enable
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsByIdByEnablePost: function (id, enable, authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary User settings for fund
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsFundsByIdGet: function (id, authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary User settings
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsGet: function (authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary User settings for manager
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsManagersByIdGet: function (id, authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary User settings for program
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsProgramsByIdGet: function (id, authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Remove setting
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10NotificationsSettingsRemoveByIdPost: function (id, authorization, options) {
            return exports.NotificationsApiFp(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
var NotificationsApi = /** @class */ (function (_super) {
    __extends(NotificationsApi, _super);
    function NotificationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary User notifications
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.NotificationsApiFp(this.configuration).v10NotificationsGet(authorization, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Unread notifications count
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsNewGet = function (authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsNewGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Add new setting
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.assetId

    * @param {string} opts.managerId

    * @param {string} opts.type

    * @param {string} opts.conditionType

    * @param {number} opts.conditionAmount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsAddPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsAddPost(authorization, options.assetId, options.managerId, options.type, options.conditionType, options.conditionAmount, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Enable/disable setting
     * @param {string} id
     * @param {boolean} enable
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsByIdByEnablePost = function (id, enable, authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User settings for fund
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsFundsByIdGet = function (id, authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User settings
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsGet = function (authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User settings for manager
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsManagersByIdGet = function (id, authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User settings for program
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsProgramsByIdGet = function (id, authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Remove setting
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.v10NotificationsSettingsRemoveByIdPost = function (id, authorization, requestOptions) {
        return exports.NotificationsApiFp(this.configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    return NotificationsApi;
}(BaseAPI));
exports.NotificationsApi = NotificationsApi;
/**
 * PlatformApi - fetch parameter creator
 * @export
 */
exports.PlatformApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/platform/info";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Investment programs levels
         * @param {string} [currency]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet: function (currency, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/platform/levels";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/platform/statistic";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * PlatformApi - functional programming interface
 * @export
 */
exports.PlatformApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet: function (options) {
            var localVarFetchArgs = exports.PlatformApiFetchParamCreator(configuration).v10PlatformInfoGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Investment programs levels
         * @param {string} [currency]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet: function (currency, options) {
            var localVarFetchArgs = exports.PlatformApiFetchParamCreator(configuration).v10PlatformLevelsGet(currency, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet: function (options) {
            var localVarFetchArgs = exports.PlatformApiFetchParamCreator(configuration).v10PlatformStatisticGet(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * PlatformApi - factory interface
 * @export
 */
exports.PlatformApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Platform info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformInfoGet: function (options) {
            return exports.PlatformApiFp(configuration).v10PlatformInfoGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Investment programs levels
         * @param {string} [currency]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformLevelsGet: function (currency, options) {
            return exports.PlatformApiFp(configuration).v10PlatformLevelsGet(currency, options)(fetch, basePath);
        },
        /**
         *
         * @summary Platform statistic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10PlatformStatisticGet: function (options) {
            return exports.PlatformApiFp(configuration).v10PlatformStatisticGet(options)(fetch, basePath);
        }
    };
};
/**
 * PlatformApi - object-oriented interface
 * @export
 * @class PlatformApi
 * @extends {BaseAPI}
 */
var PlatformApi = /** @class */ (function (_super) {
    __extends(PlatformApi, _super);
    function PlatformApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Platform info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    PlatformApi.prototype.v10PlatformInfoGet = function (requestOptions) {
        return exports.PlatformApiFp(this.configuration).v10PlatformInfoGet(requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Investment programs levels
    * @param {Object} opts Optional parameters
    * @param {string} opts.currency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    PlatformApi.prototype.v10PlatformLevelsGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.PlatformApiFp(this.configuration).v10PlatformLevelsGet(options.currency, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Platform statistic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    PlatformApi.prototype.v10PlatformStatisticGet = function (requestOptions) {
        return exports.PlatformApiFp(this.configuration).v10PlatformStatisticGet(requestOptions)(this.fetch, this.basePath);
    };
    return PlatformApi;
}(BaseAPI));
exports.PlatformApi = PlatformApi;
/**
 * ProfileApi - fetch parameter creator
 * @export
 */
exports.ProfileApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileAvatarRemovePost.');
            }
            var localVarPath = "/v1.0/profile/avatar/remove";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update avatar
         * @param {string} fileId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost: function (fileId, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            var localVarPath = "/v1.0/profile/avatar/update/{fileId}"
                .replace("{" + "fileId" + "}", encodeURIComponent(String(fileId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileGet.');
            }
            var localVarPath = "/v1.0/profile";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileHeaderGet.');
            }
            var localVarPath = "/v1.0/profile/header";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfilePersonalUpdatePost.');
            }
            var localVarPath = "/v1.0/profile/personal/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdatePersonalDetailViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileUpdatePost.');
            }
            var localVarPath = "/v1.0/profile/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateProfileViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProfileVerificationTokenPost.');
            }
            var localVarPath = "/v1.0/profile/verification/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
exports.ProfileApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost: function (authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileAvatarRemovePost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update avatar
         * @param {string} fileId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost: function (fileId, authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet: function (authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet: function (authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileHeaderGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost: function (authorization, model, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfilePersonalUpdatePost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost: function (authorization, model, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileUpdatePost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost: function (authorization, options) {
            var localVarFetchArgs = exports.ProfileApiFetchParamCreator(configuration).v10ProfileVerificationTokenPost(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ProfileApi - factory interface
 * @export
 */
exports.ProfileApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Remove avatar
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarRemovePost: function (authorization, options) {
            return exports.ProfileApiFp(configuration).v10ProfileAvatarRemovePost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update avatar
         * @param {string} fileId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileAvatarUpdateByFileIdPost: function (fileId, authorization, options) {
            return exports.ProfileApiFp(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get full profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileGet: function (authorization, options) {
            return exports.ProfileApiFp(configuration).v10ProfileGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get header profile
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileHeaderGet: function (authorization, options) {
            return exports.ProfileApiFp(configuration).v10ProfileHeaderGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update user personal details
         * @param {string} authorization JWT access token
         * @param {UpdatePersonalDetailViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfilePersonalUpdatePost: function (authorization, model, options) {
            return exports.ProfileApiFp(configuration).v10ProfilePersonalUpdatePost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update profile
         * @param {string} authorization JWT access token
         * @param {UpdateProfileViewModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileUpdatePost: function (authorization, model, options) {
            return exports.ProfileApiFp(configuration).v10ProfileUpdatePost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProfileVerificationTokenPost: function (authorization, options) {
            return exports.ProfileApiFp(configuration).v10ProfileVerificationTokenPost(authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
var ProfileApi = /** @class */ (function (_super) {
    __extends(ProfileApi, _super);
    function ProfileApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Remove avatar
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileAvatarRemovePost = function (authorization, requestOptions) {
        return exports.ProfileApiFp(this.configuration).v10ProfileAvatarRemovePost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update avatar
     * @param {string} fileId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileAvatarUpdateByFileIdPost = function (fileId, authorization, requestOptions) {
        return exports.ProfileApiFp(this.configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get full profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileGet = function (authorization, requestOptions) {
        return exports.ProfileApiFp(this.configuration).v10ProfileGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get header profile
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileHeaderGet = function (authorization, requestOptions) {
        return exports.ProfileApiFp(this.configuration).v10ProfileHeaderGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update user personal details
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {UpdatePersonalDetailViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfilePersonalUpdatePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProfileApiFp(this.configuration).v10ProfilePersonalUpdatePost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update profile
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {UpdateProfileViewModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileUpdatePost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProfileApiFp(this.configuration).v10ProfileUpdatePost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    ProfileApi.prototype.v10ProfileVerificationTokenPost = function (authorization, requestOptions) {
        return exports.ProfileApiFp(this.configuration).v10ProfileVerificationTokenPost(authorization, requestOptions)(this.fetch, this.basePath);
    };
    return ProfileApi;
}(BaseAPI));
exports.ProfileApi = ProfileApi;
/**
 * ProgramsApi - fetch parameter creator
 * @export
 */
exports.ProgramsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Program balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdChartsBalanceGet.');
            }
            var localVarPath = "/v1.0/programs/{id}/charts/balance"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Program profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdChartsProfitGet.');
            }
            var localVarPath = "/v1.0/programs/{id}/charts/profit"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            var localVarPath = "/v1.0/programs/{id}/favorite/add"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost: function (id, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            var localVarPath = "/v1.0/programs/{id}/favorite/remove"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Program details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet: function (id, authorization, currencySecondary, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdGet.');
            }
            var localVarPath = "/v1.0/programs/{id}"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Trade history
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {string} [symbol]
         * @param {string} [sorting]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet: function (id, dateFrom, dateTo, symbol, sorting, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling v10ProgramsByIdTradesGet.');
            }
            var localVarPath = "/v1.0/programs/{id}/trades"
                .replace("{" + "id" + "}", encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (dateFrom !== undefined) {
                localVarQueryParameter['DateFrom'] = dateFrom;
            }
            if (dateTo !== undefined) {
                localVarQueryParameter['DateTo'] = dateTo;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Programs list
         * @param {string} [authorization]
         * @param {number} [levelMin]
         * @param {number} [levelMax]
         * @param {number} [profitAvgMin]
         * @param {number} [profitAvgMax]
         * @param {string} [sorting]
         * @param {string} [programCurrency]
         * @param {string} [currencySecondary]
         * @param {number} [levelUpFrom]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet: function (authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/programs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (levelMin !== undefined) {
                localVarQueryParameter['LevelMin'] = levelMin;
            }
            if (levelMax !== undefined) {
                localVarQueryParameter['LevelMax'] = levelMax;
            }
            if (profitAvgMin !== undefined) {
                localVarQueryParameter['ProfitAvgMin'] = profitAvgMin;
            }
            if (profitAvgMax !== undefined) {
                localVarQueryParameter['ProfitAvgMax'] = profitAvgMax;
            }
            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }
            if (programCurrency !== undefined) {
                localVarQueryParameter['ProgramCurrency'] = programCurrency;
            }
            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }
            if (levelUpFrom !== undefined) {
                localVarQueryParameter['LevelUpFrom'] = levelUpFrom;
            }
            if (statisticDateFrom !== undefined) {
                localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
            }
            if (statisticDateTo !== undefined) {
                localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
            }
            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }
            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }
            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }
            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }
            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }
            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }
            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }
            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Level up summary
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/programs/levelup/summary";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10ProgramsSetsGet.');
            }
            var localVarPath = "/v1.0/programs/sets";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * ProgramsApi - functional programming interface
 * @export
 */
exports.ProgramsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Program balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Program profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost: function (id, authorization, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost: function (id, authorization, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Program details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet: function (id, authorization, currencySecondary, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Trade history
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {string} [symbol]
         * @param {string} [sorting]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet: function (id, dateFrom, dateTo, symbol, sorting, skip, take, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Programs list
         * @param {string} [authorization]
         * @param {number} [levelMin]
         * @param {number} [levelMax]
         * @param {number} [profitAvgMin]
         * @param {number} [profitAvgMax]
         * @param {string} [sorting]
         * @param {string} [programCurrency]
         * @param {string} [currencySecondary]
         * @param {number} [levelUpFrom]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet: function (authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsGet(authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Level up summary
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet: function (authorization, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsLevelupSummaryGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet: function (authorization, options) {
            var localVarFetchArgs = exports.ProgramsApiFetchParamCreator(configuration).v10ProgramsSetsGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * ProgramsApi - factory interface
 * @export
 */
exports.ProgramsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Program balance chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsBalanceGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         *
         * @summary Program profit chart
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {number} [maxPointCount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdChartsProfitGet: function (id, dateFrom, dateTo, maxPointCount, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options)(fetch, basePath);
        },
        /**
         *
         * @summary Add to favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteAddPost: function (id, authorization, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Remove from favorites
         * @param {string} id
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdFavoriteRemovePost: function (id, authorization, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Program details
         * @param {string} id
         * @param {string} [authorization]
         * @param {string} [currencySecondary]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdGet: function (id, authorization, currencySecondary, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options)(fetch, basePath);
        },
        /**
         *
         * @summary Trade history
         * @param {string} id
         * @param {Date} [dateFrom]
         * @param {Date} [dateTo]
         * @param {string} [symbol]
         * @param {string} [sorting]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsByIdTradesGet: function (id, dateFrom, dateTo, symbol, sorting, skip, take, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Programs list
         * @param {string} [authorization]
         * @param {number} [levelMin]
         * @param {number} [levelMax]
         * @param {number} [profitAvgMin]
         * @param {number} [profitAvgMax]
         * @param {string} [sorting]
         * @param {string} [programCurrency]
         * @param {string} [currencySecondary]
         * @param {number} [levelUpFrom]
         * @param {Date} [statisticDateFrom]
         * @param {Date} [statisticDateTo]
         * @param {number} [chartPointsCount]
         * @param {string} [mask]
         * @param {string} [facetId]
         * @param {boolean} [isFavorite]
         * @param {boolean} [isEnabled]
         * @param {Array<string>} [ids]
         * @param {string} [managerId]
         * @param {string} [programManagerId]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsGet: function (authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsGet(authorization, levelMin, levelMax, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, ids, managerId, programManagerId, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Level up summary
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsLevelupSummaryGet: function (authorization, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsLevelupSummaryGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Programs sets
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10ProgramsSetsGet: function (authorization, options) {
            return exports.ProgramsApiFp(configuration).v10ProgramsSetsGet(authorization, options)(fetch, basePath);
        }
    };
};
/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
var ProgramsApi = /** @class */ (function (_super) {
    __extends(ProgramsApi, _super);
    function ProgramsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Program balance chart
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {Date} opts.dateFrom

    * @param {Date} opts.dateTo

    * @param {number} opts.maxPointCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdChartsBalanceGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdChartsBalanceGet(id, options.dateFrom, options.dateTo, options.maxPointCount, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Program profit chart
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {Date} opts.dateFrom

    * @param {Date} opts.dateTo

    * @param {number} opts.maxPointCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdChartsProfitGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdChartsProfitGet(id, options.dateFrom, options.dateTo, options.maxPointCount, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Add to favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdFavoriteAddPost = function (id, authorization, requestOptions) {
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Remove from favorites
     * @param {string} id
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdFavoriteRemovePost = function (id, authorization, requestOptions) {
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Program details
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {string} opts.authorization

    * @param {string} opts.currencySecondary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdGet(id, options.authorization, options.currencySecondary, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Trade history
     * @param {string} id
    * @param {Object} opts Optional parameters

    * @param {Date} opts.dateFrom

    * @param {Date} opts.dateTo

    * @param {string} opts.symbol

    * @param {string} opts.sorting

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsByIdTradesGet = function (id, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsByIdTradesGet(id, options.dateFrom, options.dateTo, options.symbol, options.sorting, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Programs list
    * @param {Object} opts Optional parameters
    * @param {string} opts.authorization

    * @param {number} opts.levelMin

    * @param {number} opts.levelMax

    * @param {number} opts.profitAvgMin

    * @param {number} opts.profitAvgMax

    * @param {string} opts.sorting

    * @param {string} opts.programCurrency

    * @param {string} opts.currencySecondary

    * @param {number} opts.levelUpFrom

    * @param {Date} opts.statisticDateFrom

    * @param {Date} opts.statisticDateTo

    * @param {number} opts.chartPointsCount

    * @param {string} opts.mask

    * @param {string} opts.facetId

    * @param {boolean} opts.isFavorite

    * @param {boolean} opts.isEnabled

    * @param {Array<string>} opts.ids

    * @param {string} opts.managerId

    * @param {string} opts.programManagerId

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsGet(options.authorization, options.levelMin, options.levelMax, options.profitAvgMin, options.profitAvgMax, options.sorting, options.programCurrency, options.currencySecondary, options.levelUpFrom, options.statisticDateFrom, options.statisticDateTo, options.chartPointsCount, options.mask, options.facetId, options.isFavorite, options.isEnabled, options.ids, options.managerId, options.programManagerId, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Level up summary
    * @param {Object} opts Optional parameters
    * @param {string} opts.authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsLevelupSummaryGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.ProgramsApiFp(this.configuration).v10ProgramsLevelupSummaryGet(options.authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Programs sets
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    ProgramsApi.prototype.v10ProgramsSetsGet = function (authorization, requestOptions) {
        return exports.ProgramsApiFp(this.configuration).v10ProgramsSetsGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    return ProgramsApi;
}(BaseAPI));
exports.ProgramsApi = ProgramsApi;
/**
 * RateApi - fetch parameter creator
 * @export
 */
exports.RateApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get rate
         * @param {string} exchange
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet: function (exchange, from, to, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange', 'Required parameter exchange was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from', 'Required parameter from was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to', 'Required parameter to was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            var localVarPath = "/v1.0/rate/{exchange}/{from}/{to}"
                .replace("{" + "exchange" + "}", encodeURIComponent(String(exchange)))
                .replace("{" + "from" + "}", encodeURIComponent(String(from)))
                .replace("{" + "to" + "}", encodeURIComponent(String(to)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get rate
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet: function (from, to, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from', 'Required parameter from was null or undefined when calling v10RateByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to', 'Required parameter to was null or undefined when calling v10RateByFromByToGet.');
            }
            var localVarPath = "/v1.0/rate/{from}/{to}"
                .replace("{" + "from" + "}", encodeURIComponent(String(from)))
                .replace("{" + "to" + "}", encodeURIComponent(String(to)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Get rates
         * @param {Array<string>} [from]
         * @param {Array<string>} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet: function (from, to, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/rate";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (from) {
                localVarQueryParameter['from'] = from;
            }
            if (to) {
                localVarQueryParameter['to'] = to;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * RateApi - functional programming interface
 * @export
 */
exports.RateApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get rate
         * @param {string} exchange
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet: function (exchange, from, to, options) {
            var localVarFetchArgs = exports.RateApiFetchParamCreator(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get rate
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet: function (from, to, options) {
            var localVarFetchArgs = exports.RateApiFetchParamCreator(configuration).v10RateByFromByToGet(from, to, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get rates
         * @param {Array<string>} [from]
         * @param {Array<string>} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet: function (from, to, options) {
            var localVarFetchArgs = exports.RateApiFetchParamCreator(configuration).v10RateGet(from, to, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * RateApi - factory interface
 * @export
 */
exports.RateApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Get rate
         * @param {string} exchange
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByExchangeByFromByToGet: function (exchange, from, to, options) {
            return exports.RateApiFp(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get rate
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateByFromByToGet: function (from, to, options) {
            return exports.RateApiFp(configuration).v10RateByFromByToGet(from, to, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get rates
         * @param {Array<string>} [from]
         * @param {Array<string>} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10RateGet: function (from, to, options) {
            return exports.RateApiFp(configuration).v10RateGet(from, to, options)(fetch, basePath);
        }
    };
};
/**
 * RateApi - object-oriented interface
 * @export
 * @class RateApi
 * @extends {BaseAPI}
 */
var RateApi = /** @class */ (function (_super) {
    __extends(RateApi, _super);
    function RateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get rate
     * @param {string} exchange
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    RateApi.prototype.v10RateByExchangeByFromByToGet = function (exchange, from, to, requestOptions) {
        return exports.RateApiFp(this.configuration).v10RateByExchangeByFromByToGet(exchange, from, to, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get rate
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    RateApi.prototype.v10RateByFromByToGet = function (from, to, requestOptions) {
        return exports.RateApiFp(this.configuration).v10RateByFromByToGet(from, to, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get rates
    * @param {Object} opts Optional parameters
    * @param {Array<string>} opts.from

    * @param {Array<string>} opts.to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    RateApi.prototype.v10RateGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.RateApiFp(this.configuration).v10RateGet(options.from, options.to, requestOptions)(this.fetch, this.basePath);
    };
    return RateApi;
}(BaseAPI));
exports.RateApi = RateApi;
/**
 * SearchApi - fetch parameter creator
 * @export
 */
exports.SearchApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Program / fund / manager search
         * @param {string} [mask]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet: function (mask, take, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (mask !== undefined) {
                localVarQueryParameter['mask'] = mask;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * SearchApi - functional programming interface
 * @export
 */
exports.SearchApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Program / fund / manager search
         * @param {string} [mask]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet: function (mask, take, options) {
            var localVarFetchArgs = exports.SearchApiFetchParamCreator(configuration).v10SearchGet(mask, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * SearchApi - factory interface
 * @export
 */
exports.SearchApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Program / fund / manager search
         * @param {string} [mask]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10SearchGet: function (mask, take, options) {
            return exports.SearchApiFp(configuration).v10SearchGet(mask, take, options)(fetch, basePath);
        }
    };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
var SearchApi = /** @class */ (function (_super) {
    __extends(SearchApi, _super);
    function SearchApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Program / fund / manager search
    * @param {Object} opts Optional parameters
    * @param {string} opts.mask

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.v10SearchGet = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.SearchApiFp(this.configuration).v10SearchGet(options.mask, options.take, requestOptions)(this.fetch, this.basePath);
    };
    return SearchApi;
}(BaseAPI));
exports.SearchApi = SearchApi;
/**
 * WalletApi - fetch parameter creator
 * @export
 */
exports.WalletApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletAddressesGet.');
            }
            var localVarPath = "/v1.0/wallet/addresses";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Wallet summary
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet: function (currency, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency', 'Required parameter currency was null or undefined when calling v10WalletByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletByCurrencyGet.');
            }
            var localVarPath = "/v1.0/wallet/{currency}"
                .replace("{" + "currency" + "}", encodeURIComponent(String(currency)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [assetType]
         * @param {string} [txAction]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet: function (authorization, assetId, from, to, assetType, txAction, skip, take, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletTransactionsGet.');
            }
            var localVarPath = "/v1.0/wallet/transactions";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }
            if (from !== undefined) {
                localVarQueryParameter['From'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['To'] = to;
            }
            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }
            if (txAction !== undefined) {
                localVarQueryParameter['TxAction'] = txAction;
            }
            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletTransactionsPendingGet.');
            }
            var localVarPath = "/v1.0/wallet/transactions/pending";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet: function (authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawInfoGet.');
            }
            var localVarPath = "/v1.0/wallet/withdraw/info";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost: function (txId, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId', 'Required parameter txId was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            var localVarPath = "/v1.0/wallet/withdraw/request/cancel/{txId}"
                .replace("{" + "txId" + "}", encodeURIComponent(String(txId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} [requestId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost: function (requestId, code, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1.0/wallet/withdraw/request/confirm";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost: function (authorization, model, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestNewPost.');
            }
            var localVarPath = "/v1.0/wallet/withdraw/request/new";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateWithdrawalRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost: function (txId, authorization, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId', 'Required parameter txId was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            var localVarPath = "/v1.0/wallet/withdraw/request/resend/{txId}"
                .replace("{" + "txId" + "}", encodeURIComponent(String(txId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};
/**
 * WalletApi - functional programming interface
 * @export
 */
exports.WalletApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet: function (authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletAddressesGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Wallet summary
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet: function (currency, authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletByCurrencyGet(currency, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [assetType]
         * @param {string} [txAction]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet: function (authorization, assetId, from, to, assetType, txAction, skip, take, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, skip, take, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet: function (authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletTransactionsPendingGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet: function (authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletWithdrawInfoGet(authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost: function (txId, authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [requestId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost: function (requestId, code, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost: function (authorization, model, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost: function (txId, authorization, options) {
            var localVarFetchArgs = exports.WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        }
    };
};
/**
 * WalletApi - factory interface
 * @export
 */
exports.WalletApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletAddressesGet: function (authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletAddressesGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Wallet summary
         * @param {string} currency
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletByCurrencyGet: function (currency, authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletByCurrencyGet(currency, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Wallet transactions
         * @param {string} authorization JWT access token
         * @param {string} [assetId]
         * @param {Date} [from]
         * @param {Date} [to]
         * @param {string} [assetType]
         * @param {string} [txAction]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsGet: function (authorization, assetId, from, to, assetType, txAction, skip, take, options) {
            return exports.WalletApiFp(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, skip, take, options)(fetch, basePath);
        },
        /**
         *
         * @summary Wallet pending transactions
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletTransactionsPendingGet: function (authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletTransactionsPendingGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawInfoGet: function (authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletWithdrawInfoGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestCancelByTxIdPost: function (txId, authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [requestId]
         * @param {string} [code]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestConfirmPost: function (requestId, code, options) {
            return exports.WalletApiFp(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} authorization JWT access token
         * @param {CreateWithdrawalRequestModel} [model]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestNewPost: function (authorization, model, options) {
            return exports.WalletApiFp(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} txId
         * @param {string} authorization JWT access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v10WalletWithdrawRequestResendByTxIdPost: function (txId, authorization, options) {
            return exports.WalletApiFp(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options)(fetch, basePath);
        }
    };
};
/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
var WalletApi = /** @class */ (function (_super) {
    __extends(WalletApi, _super);
    function WalletApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletAddressesGet = function (authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletAddressesGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Wallet summary
     * @param {string} currency
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletByCurrencyGet = function (currency, authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletByCurrencyGet(currency, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Wallet transactions
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {string} opts.assetId

    * @param {Date} opts.from

    * @param {Date} opts.to

    * @param {string} opts.assetType

    * @param {string} opts.txAction

    * @param {number} opts.skip

    * @param {number} opts.take
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletTransactionsGet = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.WalletApiFp(this.configuration).v10WalletTransactionsGet(authorization, options.assetId, options.from, options.to, options.assetType, options.txAction, options.skip, options.take, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Wallet pending transactions
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletTransactionsPendingGet = function (authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletTransactionsPendingGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletWithdrawInfoGet = function (authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletWithdrawInfoGet(authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletWithdrawRequestCancelByTxIdPost = function (txId, authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
    * @param {Object} opts Optional parameters
    * @param {string} opts.requestId

    * @param {string} opts.code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletWithdrawRequestConfirmPost = function (options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.WalletApiFp(this.configuration).v10WalletWithdrawRequestConfirmPost(options.requestId, options.code, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} authorization JWT access token
    * @param {Object} opts Optional parameters

    * @param {CreateWithdrawalRequestModel} opts.model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletWithdrawRequestNewPost = function (authorization, options, requestOptions) {
        if (options === void 0) { options = {}; }
        return exports.WalletApiFp(this.configuration).v10WalletWithdrawRequestNewPost(authorization, options.model, requestOptions)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} txId
     * @param {string} authorization JWT access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    WalletApi.prototype.v10WalletWithdrawRequestResendByTxIdPost = function (txId, authorization, requestOptions) {
        return exports.WalletApiFp(this.configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, requestOptions)(this.fetch, this.basePath);
    };
    return WalletApi;
}(BaseAPI));
exports.WalletApi = WalletApi;
