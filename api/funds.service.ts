/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ErrorViewModel } from "../model/errorViewModel";
import { FundAssetsListInfo } from "../model/fundAssetsListInfo";
import { FundBalanceChartOld } from "../model/fundBalanceChartOld";
import { FundDetailsFullOld } from "../model/fundDetailsFullOld";
import { FundProfitChartOld } from "../model/fundProfitChartOld";
import { FundSets } from "../model/fundSets";
import { FundsListOld } from "../model/fundsListOld";
import { PlatformAssets } from "../model/platformAssets";
import { ReallocationsViewModel } from "../model/reallocationsViewModel";

export class FundsService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public addToFavorites(id: string, authorization: string): CancelablePromise<null>{
    return this.addToFavoritesWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private addToFavoritesWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling addToFavorites");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling addToFavorites");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/funds/{id}/favorite/add', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getAllAssets(): CancelablePromise<PlatformAssets>{
    return this.getAllAssetsWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getAllAssetsWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformAssets;

    return this.apiClient.callApi<PlatformAssets>(
      '/v1.0/funds/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundAssets(id: string): CancelablePromise<FundAssetsListInfo>{
    return this.getFundAssetsWithHttpInfo(id)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundAssetsWithHttpInfo(id: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundAssets");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundAssetsListInfo;

    return this.apiClient.callApi<FundAssetsListInfo>(
      '/v1.0/funds/{id}/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundBalanceChart(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<FundBalanceChartOld>{
    return this.getFundBalanceChartWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundBalanceChartWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundBalanceChart");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "MaxPointCount": opts["maxPointCount"],
      "Currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundBalanceChartOld;

    return this.apiClient.callApi<FundBalanceChartOld>(
      '/v1.0/funds/{id}/charts/balance', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundDetails(id: string, opts?: { 
    authorization?: string, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  }): CancelablePromise<FundDetailsFullOld>{
    return this.getFundDetailsWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundDetailsWithHttpInfo(id: string, opts: { 
    authorization?: string, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundDetails");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundDetailsFullOld;

    return this.apiClient.callApi<FundDetailsFullOld>(
      '/v1.0/funds/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundProfitChart(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    chartAssetsCount?: number
  }): CancelablePromise<FundProfitChartOld>{
    return this.getFundProfitChartWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundProfitChartWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    chartAssetsCount?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundProfitChart");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "MaxPointCount": opts["maxPointCount"],
      "Currency": opts["currency"],
      "chartAssetsCount": opts["chartAssetsCount"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundProfitChartOld;

    return this.apiClient.callApi<FundProfitChartOld>(
      '/v1.0/funds/{id}/charts/profit', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFunds(opts?: { 
    authorization?: string, 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    assets?: Array<string>, 
    statisticDateFrom?: Date, 
    statisticDateTo?: Date, 
    chartPointsCount?: number, 
    mask?: string, 
    facetId?: string, 
    isFavorite?: boolean, 
    isEnabled?: boolean, 
    hasInvestorsForAll?: boolean, 
    hasInvestorsForClosed?: boolean, 
    ids?: Array<string>, 
    forceUseIdsList?: boolean, 
    managerId?: string, 
    programManagerId?: string, 
    status?: Array<Object>, 
    skip?: number, 
    take?: number
  }): CancelablePromise<FundsListOld>{
    return this.getFundsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundsWithHttpInfo(opts: { 
    authorization?: string, 
    sorting?: 'ByProfitAsc' | 'ByProfitDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByTitleAsc' | 'ByTitleDesc' | 'ByBalanceAsc' | 'ByBalanceDesc', 
    currencySecondary?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    currency?: 'Undefined' | 'GVT' | 'ETH' | 'BTC' | 'ADA' | 'USDT' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'USD' | 'EUR', 
    assets?: Array<string>, 
    statisticDateFrom?: Date, 
    statisticDateTo?: Date, 
    chartPointsCount?: number, 
    mask?: string, 
    facetId?: string, 
    isFavorite?: boolean, 
    isEnabled?: boolean, 
    hasInvestorsForAll?: boolean, 
    hasInvestorsForClosed?: boolean, 
    ids?: Array<string>, 
    forceUseIdsList?: boolean, 
    managerId?: string, 
    programManagerId?: string, 
    status?: Array<Object>, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "CurrencySecondary": opts["currencySecondary"],
      "Currency": opts["currency"],
      "Assets": this.apiClient.buildCollectionParam(opts["assets"], "multi"),
      "StatisticDateFrom": opts["statisticDateFrom"],
      "StatisticDateTo": opts["statisticDateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "Mask": opts["mask"],
      "FacetId": opts["facetId"],
      "IsFavorite": opts["isFavorite"],
      "IsEnabled": opts["isEnabled"],
      "HasInvestorsForAll": opts["hasInvestorsForAll"],
      "HasInvestorsForClosed": opts["hasInvestorsForClosed"],
      "Ids": this.apiClient.buildCollectionParam(opts["ids"], "multi"),
      "ForceUseIdsList": opts["forceUseIdsList"],
      "ManagerId": opts["managerId"],
      "ProgramManagerId": opts["programManagerId"],
      "Status": this.apiClient.buildCollectionParam(opts["status"], "multi"),
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundsListOld;

    return this.apiClient.callApi<FundsListOld>(
      '/v1.0/funds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramSets(authorization: string): CancelablePromise<FundSets>{
    return this.getProgramSetsWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramSetsWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getProgramSets");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundSets;

    return this.apiClient.callApi<FundSets>(
      '/v1.0/funds/sets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getReallocationsHistory(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ReallocationsViewModel>{
    return this.getReallocationsHistoryWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getReallocationsHistoryWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getReallocationsHistory");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ReallocationsViewModel;

    return this.apiClient.callApi<ReallocationsViewModel>(
      '/v1.0/funds/{id}/reallocations', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public removeFromFavorites(id: string, authorization: string): CancelablePromise<null>{
    return this.removeFromFavoritesWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private removeFromFavoritesWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling removeFromFavorites");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling removeFromFavorites");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v1.0/funds/{id}/favorite/remove', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
