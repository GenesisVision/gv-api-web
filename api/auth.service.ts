/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { ChangePasswordViewModel } from "../model/changePasswordViewModel";
import { ErrorViewModel } from "../model/errorViewModel";
import { ForgotPasswordViewModel } from "../model/forgotPasswordViewModel";
import { LoginViewModel } from "../model/loginViewModel";
import { PasswordModel } from "../model/passwordModel";
import { RecoveryCodesViewModel } from "../model/recoveryCodesViewModel";
import { RegisterViewModel } from "../model/registerViewModel";
import { ResendConfirmationViewModel } from "../model/resendConfirmationViewModel";
import { ResetPasswordViewModel } from "../model/resetPasswordViewModel";
import { TwoFactorAuthenticator } from "../model/twoFactorAuthenticator";
import { TwoFactorAuthenticatorConfirm } from "../model/twoFactorAuthenticatorConfirm";
import { TwoFactorCodeWithPassword } from "../model/twoFactorCodeWithPassword";
import { TwoFactorStatus } from "../model/twoFactorStatus";

export class AuthService {
  apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public authorize(opts?: { 
    model?: LoginViewModel
  }): CancelablePromise<string>{
    return this.authorizeWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private authorizeWithHttpInfo(opts: { 
    model?: LoginViewModel
  } = {}){
    let postBody = opts["model"];
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/signin', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public changePassword(authorization: string, opts?: { 
    model?: ChangePasswordViewModel
  }): CancelablePromise<string>{
    return this.changePasswordWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private changePasswordWithHttpInfo(authorization: string, opts: { 
    model?: ChangePasswordViewModel
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling changePassword");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/password/change', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public confirmEmail(opts?: { 
    userId?: string, 
    code?: string
  }): CancelablePromise<string>{
    return this.confirmEmailWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private confirmEmailWithHttpInfo(opts: { 
    userId?: string, 
    code?: string
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "userId": opts["userId"],
      "code": opts["code"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/signup/confirm', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public confirmTwoStepAuth(authorization: string, opts?: { 
    model?: TwoFactorAuthenticatorConfirm
  }): CancelablePromise<RecoveryCodesViewModel>{
    return this.confirmTwoStepAuthWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private confirmTwoStepAuthWithHttpInfo(authorization: string, opts: { 
    model?: TwoFactorAuthenticatorConfirm
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling confirmTwoStepAuth");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = RecoveryCodesViewModel;

    return this.apiClient.callApi<RecoveryCodesViewModel>(
      '/v2.0/auth/2fa/confirm', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public createTwoStepAuth(authorization: string): CancelablePromise<TwoFactorAuthenticator>{
    return this.createTwoStepAuthWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private createTwoStepAuthWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling createTwoStepAuth");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TwoFactorAuthenticator;

    return this.apiClient.callApi<TwoFactorAuthenticator>(
      '/v2.0/auth/2fa/create', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public createTwoStepAuthRecoveryCodes(authorization: string, opts?: { 
    model?: PasswordModel
  }): CancelablePromise<RecoveryCodesViewModel>{
    return this.createTwoStepAuthRecoveryCodesWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private createTwoStepAuthRecoveryCodesWithHttpInfo(authorization: string, opts: { 
    model?: PasswordModel
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling createTwoStepAuthRecoveryCodes");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = RecoveryCodesViewModel;

    return this.apiClient.callApi<RecoveryCodesViewModel>(
      '/v2.0/auth/2fa/recoverycodes/new', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public disableTwoStepAuth(authorization: string, opts?: { 
    model?: TwoFactorCodeWithPassword
  }): CancelablePromise<null>{
    return this.disableTwoStepAuthWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private disableTwoStepAuthWithHttpInfo(authorization: string, opts: { 
    model?: TwoFactorCodeWithPassword
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling disableTwoStepAuth");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/auth/2fa/disable', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public forgotPassword(opts?: { 
    model?: ForgotPasswordViewModel
  }): CancelablePromise<null>{
    return this.forgotPasswordWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private forgotPasswordWithHttpInfo(opts: { 
    model?: ForgotPasswordViewModel
  } = {}){
    let postBody = opts["model"];
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/auth/password/forgot', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getTwoStepAuthRecoveryCodes(authorization: string, opts?: { 
    model?: PasswordModel
  }): CancelablePromise<RecoveryCodesViewModel>{
    return this.getTwoStepAuthRecoveryCodesWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getTwoStepAuthRecoveryCodesWithHttpInfo(authorization: string, opts: { 
    model?: PasswordModel
  } = {}){
    let postBody = opts["model"];
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getTwoStepAuthRecoveryCodes");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = RecoveryCodesViewModel;

    return this.apiClient.callApi<RecoveryCodesViewModel>(
      '/v2.0/auth/2fa/recoverycodes', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getTwoStepAuthStatus(authorization: string): CancelablePromise<TwoFactorStatus>{
    return this.getTwoStepAuthStatusWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getTwoStepAuthStatusWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling getTwoStepAuthStatus");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = TwoFactorStatus;

    return this.apiClient.callApi<TwoFactorStatus>(
      '/v2.0/auth/2fa', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public logoutFromAnotherDevices(authorization: string): CancelablePromise<string>{
    return this.logoutFromAnotherDevicesWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private logoutFromAnotherDevicesWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling logoutFromAnotherDevices");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/token/devices/logout', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public register(opts?: { 
    model?: RegisterViewModel
  }): CancelablePromise<null>{
    return this.registerWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private registerWithHttpInfo(opts: { 
    model?: RegisterViewModel
  } = {}){
    let postBody = opts["model"];
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/auth/signup', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public requestPhoneNumberVerificationCode(authorization: string): CancelablePromise<number>{
    return this.requestPhoneNumberVerificationCodeWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private requestPhoneNumberVerificationCodeWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling requestPhoneNumberVerificationCode");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'number';

    return this.apiClient.callApi<number>(
      '/v2.0/auth/phone/code', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public resendConfirmationLink(opts?: { 
    model?: ResendConfirmationViewModel
  }): CancelablePromise<null>{
    return this.resendConfirmationLinkWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private resendConfirmationLinkWithHttpInfo(opts: { 
    model?: ResendConfirmationViewModel
  } = {}){
    let postBody = opts["model"];
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/auth/resendconfirmationlink', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public resetPassword(opts?: { 
    model?: ResetPasswordViewModel
  }): CancelablePromise<string>{
    return this.resetPasswordWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private resetPasswordWithHttpInfo(opts: { 
    model?: ResetPasswordViewModel
  } = {}){
    let postBody = opts["model"];
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = ["application/json-patch+json", "application/json", "text/json", "application/_*+json"];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/password/reset', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public updateAuthToken(authorization: string): CancelablePromise<string>{
    return this.updateAuthTokenWithHttpInfo(authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private updateAuthTokenWithHttpInfo(authorization: string){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling updateAuthToken");
    }

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/auth/token/update', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public validatePhoneNumber(authorization: string, opts?: { 
    code?: string
  }): CancelablePromise<null>{
    return this.validatePhoneNumberWithHttpInfo(authorization, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private validatePhoneNumberWithHttpInfo(authorization: string, opts: { 
    code?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling validatePhoneNumber");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "code": opts["code"]
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/auth/phone/verify', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
