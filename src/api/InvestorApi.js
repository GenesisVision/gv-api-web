/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DashboardChartValue from '../model/DashboardChartValue';
import DashboardPortfolioEvents from '../model/DashboardPortfolioEvents';
import DashboardSummary from '../model/DashboardSummary';
import ErrorViewModel from '../model/ErrorViewModel';
import FundsList from '../model/FundsList';
import InvestInfo from '../model/InvestInfo';
import ProgramRequests from '../model/ProgramRequests';
import ProgramsList from '../model/ProgramsList';
import WithdrawInfo from '../model/WithdrawInfo';

/**
* Investor service.
* @module api/InvestorApi
* @version v1.0
*/
export default class InvestorApi {

    /**
    * Constructs a new InvestorApi. 
    * @alias module:api/InvestorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get program requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramRequests} and HTTP response
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsByIdRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get program requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramRequests}
     */
    v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10InvestorFundsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Funds list
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsList} and HTTP response
     */
    v10InvestorFundsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundsList;

      return this.apiClient.callApi(
        '/v1.0/investor/funds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Funds list
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FundsList}
     */
    v10InvestorFundsGet(authorization, opts) {
      return this.v10InvestorFundsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorFundsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorFundsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorFundsRequestsByIdCancelPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/funds/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorFundsRequestsByIdCancelPost(id, authorization) {
      return this.v10InvestorFundsRequestsByIdCancelPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary dashboard info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.assetType 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @param {module:model/String} opts.chartCurrency 
     * @param {Date} opts.chartFrom 
     * @param {Date} opts.chartTo 
     * @param {Number} opts.requestsSkip 
     * @param {Number} opts.requestsTake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DashboardSummary} and HTTP response
     */
    v10InvestorGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'chartCurrency': opts['chartCurrency'],
        'chartFrom': opts['chartFrom'],
        'chartTo': opts['chartTo'],
        'requestsSkip': opts['requestsSkip'],
        'requestsTake': opts['requestsTake']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DashboardSummary;

      return this.apiClient.callApi(
        '/v1.0/investor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary dashboard info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.assetType 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @param {module:model/String} opts.chartCurrency 
     * @param {Date} opts.chartFrom 
     * @param {Date} opts.chartTo 
     * @param {Number} opts.requestsSkip 
     * @param {Number} opts.requestsTake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DashboardSummary}
     */
    v10InvestorGet(authorization, opts) {
      return this.v10InvestorGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Portfolio charts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.currency 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DashboardChartValue} and HTTP response
     */
    v10InvestorPortfolioChartGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorPortfolioChartGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'currency': opts['currency'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DashboardChartValue;

      return this.apiClient.callApi(
        '/v1.0/investor/portfolio/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Portfolio charts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.currency 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DashboardChartValue}
     */
    v10InvestorPortfolioChartGet(authorization, opts) {
      return this.v10InvestorPortfolioChartGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Portfolio events
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.assetType 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DashboardPortfolioEvents} and HTTP response
     */
    v10InvestorPortfolioEventsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorPortfolioEventsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'AssetId': opts['assetId'],
        'From': opts['from'],
        'To': opts['to'],
        'Type': opts['type'],
        'AssetType': opts['assetType'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = DashboardPortfolioEvents;

      return this.apiClient.callApi(
        '/v1.0/investor/portfolio/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Portfolio events
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:model/String} opts.type 
     * @param {module:model/String} opts.assetType 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DashboardPortfolioEvents}
     */
    v10InvestorPortfolioEventsGet(authorization, opts) {
      return this.v10InvestorPortfolioEventsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * investing
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdInvestByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/invest/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * investing
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization) {
      return this.v10InvestorProgramsByIdInvestByAmountPostWithHttpInfo(id, amount, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Data for investing
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestInfo} and HTTP response
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InvestInfo;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/invest/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for investing
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvestInfo}
     */
    v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorProgramsByIdInvestInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable reinvesting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorProgramsByIdReinvestOffPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdReinvestOffPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdReinvestOffPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/reinvest/off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disable reinvesting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorProgramsByIdReinvestOffPost(id, authorization) {
      return this.v10InvestorProgramsByIdReinvestOffPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable reinvesting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorProgramsByIdReinvestOnPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdReinvestOnPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdReinvestOnPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/reinvest/on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable reinvesting
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorProgramsByIdReinvestOnPost(id, authorization) {
      return this.v10InvestorProgramsByIdReinvestOnPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get program requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramRequests} and HTTP response
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'id': id,
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get program requests
     * @param {String} id 
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramRequests}
     */
    v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization) {
      return this.v10InvestorProgramsByIdRequestsBySkipByTakeGetWithHttpInfo(id, skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Withdrawal
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdWithdrawByAmountPost");
      }


      let pathParams = {
        'id': id,
        'amount': amount
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/withdraw/{amount}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Withdrawal
     * @param {String} id 
     * @param {Number} amount 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization) {
      return this.v10InvestorProgramsByIdWithdrawByAmountPostWithHttpInfo(id, amount, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Data for withdrawal
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WithdrawInfo} and HTTP response
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet");
      }


      let pathParams = {
        'id': id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = WithdrawInfo;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/{id}/withdraw/info/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Data for withdrawal
     * @param {String} id 
     * @param {module:model/String} currency 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WithdrawInfo}
     */
    v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization) {
      return this.v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithHttpInfo(id, currency, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Programs list
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramsList} and HTTP response
     */
    v10InvestorProgramsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'Sorting': opts['sorting'],
        'From': opts['from'],
        'To': opts['to'],
        'ChartPointsCount': opts['chartPointsCount'],
        'Skip': opts['skip'],
        'Take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramsList;

      return this.apiClient.callApi(
        '/v1.0/investor/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Programs list
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sorting 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.chartPointsCount 
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramsList}
     */
    v10InvestorProgramsGet(authorization, opts) {
      return this.v10InvestorProgramsGetWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v10InvestorProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v10InvestorProgramsRequestsByIdCancelPost");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorProgramsRequestsByIdCancelPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/investor/programs/requests/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancel request
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v10InvestorProgramsRequestsByIdCancelPost(id, authorization) {
      return this.v10InvestorProgramsRequestsByIdCancelPostWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all requests
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgramRequests} and HTTP response
     */
    v10InvestorRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization) {
      let postBody = null;

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling v10InvestorRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'take' is set
      if (take === undefined || take === null) {
        throw new Error("Missing the required parameter 'take' when calling v10InvestorRequestsBySkipByTakeGet");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling v10InvestorRequestsBySkipByTakeGet");
      }


      let pathParams = {
        'skip': skip,
        'take': take
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramRequests;

      return this.apiClient.callApi(
        '/v1.0/investor/requests/{skip}/{take}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all requests
     * @param {Number} skip 
     * @param {Number} take 
     * @param {String} authorization JWT access token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgramRequests}
     */
    v10InvestorRequestsBySkipByTakeGet(skip, take, authorization) {
      return this.v10InvestorRequestsBySkipByTakeGetWithHttpInfo(skip, take, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
