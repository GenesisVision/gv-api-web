/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { AbsoluteProfitChart } from "../model/AbsoluteProfitChart";
import { ErrorViewModel } from "../model/ErrorViewModel";
import { FundBalanceChart } from "../model/FundBalanceChart";
import { FundDetailsFull } from "../model/FundDetailsFull";
import { FundProfitPercentCharts } from "../model/FundProfitPercentCharts";
import { ItemsViewModelFundDetailsListItem } from "../model/ItemsViewModelFundDetailsListItem";
import { ItemsViewModelReallocationModel } from "../model/ItemsViewModelReallocationModel";

export class FundsApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public addToFavorites(id: string, authorization: string): CancelablePromise<null>{
    return this.addToFavoritesWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private addToFavoritesWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling addToFavorites");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling addToFavorites");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/funds/{id}/favorite/add', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundAbsoluteProfitChart(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<AbsoluteProfitChart>{
    return this.getFundAbsoluteProfitChartWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundAbsoluteProfitChartWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundAbsoluteProfitChart");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "MaxPointCount": opts["maxPointCount"],
      "Currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = AbsoluteProfitChart;

    return this.apiClient.callApi<AbsoluteProfitChart>(
      '/v2.0/funds/{id}/charts/profit/absolute', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundBalanceChart(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<FundBalanceChart>{
    return this.getFundBalanceChartWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundBalanceChartWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundBalanceChart");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "MaxPointCount": opts["maxPointCount"],
      "Currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundBalanceChart;

    return this.apiClient.callApi<FundBalanceChart>(
      '/v2.0/funds/{id}/charts/balance', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundDetails(id: string, opts?: { 
    authorization?: string, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<FundDetailsFull>{
    return this.getFundDetailsWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundDetailsWithHttpInfo(id: string, opts: { 
    authorization?: string, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundDetails");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundDetailsFull;

    return this.apiClient.callApi<FundDetailsFull>(
      '/v2.0/funds/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFundProfitPercentCharts(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    currencies?: Array<Object>, 
    chartAssetsCount?: number
  }): CancelablePromise<FundProfitPercentCharts>{
    return this.getFundProfitPercentChartsWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundProfitPercentChartsWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    maxPointCount?: number, 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    currencies?: Array<Object>, 
    chartAssetsCount?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getFundProfitPercentCharts");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "MaxPointCount": opts["maxPointCount"],
      "Currency": opts["currency"],
      "currencies": this.apiClient.buildCollectionParam(opts["currencies"], "multi"),
      "chartAssetsCount": opts["chartAssetsCount"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = FundProfitPercentCharts;

    return this.apiClient.callApi<FundProfitPercentCharts>(
      '/v2.0/funds/{id}/charts/profit/percent', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getFunds(opts?: { 
    authorization?: string, 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'BySizeAsc' | 'BySizeDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    assets?: Array<string>, 
    includeWithInvestments?: boolean, 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelFundDetailsListItem>{
    return this.getFundsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getFundsWithHttpInfo(opts: { 
    authorization?: string, 
    sorting?: 'ByTitleAsc' | 'ByTitleDesc' | 'BySizeAsc' | 'BySizeDesc' | 'ByInvestorsAsc' | 'ByInvestorsDesc' | 'ByDrawdownAsc' | 'ByDrawdownDesc' | 'ByProfitAsc' | 'ByProfitDesc' | 'ByNewAsc' | 'ByNewDesc' | 'ByValueAsc' | 'ByValueDesc', 
    showIn?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR', 
    assets?: Array<string>, 
    includeWithInvestments?: boolean, 
    dateFrom?: Date, 
    dateTo?: Date, 
    chartPointsCount?: number, 
    facetId?: string, 
    mask?: string, 
    ownerId?: string, 
    showFavorites?: boolean, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "Sorting": opts["sorting"],
      "ShowIn": opts["showIn"],
      "Assets": this.apiClient.buildCollectionParam(opts["assets"], "multi"),
      "IncludeWithInvestments": opts["includeWithInvestments"],
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "ChartPointsCount": opts["chartPointsCount"],
      "FacetId": opts["facetId"],
      "Mask": opts["mask"],
      "OwnerId": opts["ownerId"],
      "ShowFavorites": opts["showFavorites"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
      "Authorization": opts["authorization"]
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelFundDetailsListItem;

    return this.apiClient.callApi<ItemsViewModelFundDetailsListItem>(
      '/v2.0/funds', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getReallocatingHistory(id: string, opts?: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    skip?: number, 
    take?: number
  }): CancelablePromise<ItemsViewModelReallocationModel>{
    return this.getReallocatingHistoryWithHttpInfo(id, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getReallocatingHistoryWithHttpInfo(id: string, opts: { 
    dateFrom?: Date, 
    dateTo?: Date, 
    skip?: number, 
    take?: number
  } = {}){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling getReallocatingHistory");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
      "DateFrom": opts["dateFrom"],
      "DateTo": opts["dateTo"],
      "Skip": opts["skip"],
      "Take": opts["take"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ItemsViewModelReallocationModel;

    return this.apiClient.callApi<ItemsViewModelReallocationModel>(
      '/v2.0/funds/{id}/reallocations', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public removeFromFavorites(id: string, authorization: string): CancelablePromise<null>{
    return this.removeFromFavoritesWithHttpInfo(id, authorization)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private removeFromFavoritesWithHttpInfo(id: string, authorization: string){
    let postBody = null;
    
    // verify the required parameter "id" is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter \"id\" when calling removeFromFavorites");
    }
    // verify the required parameter "authorization" is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter \"authorization\" when calling removeFromFavorites");
    }

    let pathParams = { 
      "id": id
    };
    let queryParams = { 
    };
    let headerParams = { 
      "Authorization": authorization
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = null;

    return this.apiClient.callApi<null>(
      '/v2.0/funds/{id}/favorite/remove', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
