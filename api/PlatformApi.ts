/**
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import ApiClient from "../ApiClient";
import CancelablePromise from "../cancelable-promise/CancelablePromise.js";
import { AssetInfo } from "../model/AssetInfo";
import { CaptchaDetails } from "../model/CaptchaDetails";
import { ErrorViewModel } from "../model/ErrorViewModel";
import { LandingInfo } from "../model/LandingInfo";
import { LevelsParamsInfo } from "../model/LevelsParamsInfo";
import { PlatformAssets } from "../model/PlatformAssets";
import { PlatformEvents } from "../model/PlatformEvents";
import { PlatformInfo } from "../model/PlatformInfo";
import { ProgramsLevelsInfo } from "../model/ProgramsLevelsInfo";
import { SiteMapInfo } from "../model/SiteMapInfo";

export class PlatformApi {
  private apiClient: ApiClient;

  constructor(apiClient?: ApiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  public getAllPlatformAssets(): CancelablePromise<PlatformAssets>{
    return this.getAllPlatformAssetsWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getAllPlatformAssetsWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformAssets;

    return this.apiClient.callApi<PlatformAssets>(
      '/v2.0/platform/assets', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformAssetInfo(asset: string): CancelablePromise<AssetInfo>{
    return this.getPlatformAssetInfoWithHttpInfo(asset)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformAssetInfoWithHttpInfo(asset: string){
    let postBody = null;
    
    // verify the required parameter "asset" is set
    if (asset === undefined || asset === null) {
      throw new Error("Missing the required parameter \"asset\" when calling getPlatformAssetInfo");
    }

    let pathParams = { 
      "asset": asset
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = AssetInfo;

    return this.apiClient.callApi<AssetInfo>(
      '/v2.0/platform/asset/{asset}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformDate(): CancelablePromise<string>{
    return this.getPlatformDateWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformDateWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = 'string';

    return this.apiClient.callApi<string>(
      '/v2.0/platform/date', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformEvents(opts?: { 
    take?: number
  }): CancelablePromise<PlatformEvents>{
    return this.getPlatformEventsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformEventsWithHttpInfo(opts: { 
    take?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "take": opts["take"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformEvents;

    return this.apiClient.callApi<PlatformEvents>(
      '/v2.0/platform/events', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformInfo(): CancelablePromise<PlatformInfo>{
    return this.getPlatformInfoWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformInfoWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = PlatformInfo;

    return this.apiClient.callApi<PlatformInfo>(
      '/v2.0/platform/info', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getPlatformLandingInfo(opts?: { 
    eventsTake?: number, 
    followTake?: number, 
    programsTake?: number, 
    fundsTake?: number, 
    newsTake?: number
  }): CancelablePromise<LandingInfo>{
    return this.getPlatformLandingInfoWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getPlatformLandingInfoWithHttpInfo(opts: { 
    eventsTake?: number, 
    followTake?: number, 
    programsTake?: number, 
    fundsTake?: number, 
    newsTake?: number
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "eventsTake": opts["eventsTake"],
      "followTake": opts["followTake"],
      "programsTake": opts["programsTake"],
      "fundsTake": opts["fundsTake"],
      "newsTake": opts["newsTake"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = LandingInfo;

    return this.apiClient.callApi<LandingInfo>(
      '/v2.0/platform/landing', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramLevels(opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<ProgramsLevelsInfo>{
    return this.getProgramLevelsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramLevelsWithHttpInfo(opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = ProgramsLevelsInfo;

    return this.apiClient.callApi<ProgramsLevelsInfo>(
      '/v2.0/platform/levels', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getProgramLevelsParams(opts?: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  }): CancelablePromise<LevelsParamsInfo>{
    return this.getProgramLevelsParamsWithHttpInfo(opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getProgramLevelsParamsWithHttpInfo(opts: { 
    currency?: 'BTC' | 'ETH' | 'USDT' | 'USD' | 'GVT' | 'Undefined' | 'ADA' | 'XRP' | 'BCH' | 'LTC' | 'DOGE' | 'BNB' | 'EUR'
  } = {}){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
      "currency": opts["currency"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = LevelsParamsInfo;

    return this.apiClient.callApi<LevelsParamsInfo>(
      '/v2.0/platform/levels/parameters', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getRiskControlInfo(route: string, opts?: { 
    client?: string, 
    version?: string
  }): CancelablePromise<CaptchaDetails>{
    return this.getRiskControlInfoWithHttpInfo(route, opts)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getRiskControlInfoWithHttpInfo(route: string, opts: { 
    client?: string, 
    version?: string
  } = {}){
    let postBody = null;
    
    // verify the required parameter "route" is set
    if (route === undefined || route === null) {
      throw new Error("Missing the required parameter \"route\" when calling getRiskControlInfo");
    }

    let pathParams = { 
    };
    let queryParams = { 
      "Route": route,
      "Client": opts["client"],
      "Version": opts["version"]
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = CaptchaDetails;

    return this.apiClient.callApi<CaptchaDetails>(
      '/v2.0/platform/riskcontrol', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }

  public getSitemapInfo(): CancelablePromise<SiteMapInfo>{
    return this.getSitemapInfoWithHttpInfo()
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }

  private getSitemapInfoWithHttpInfo(){
    let postBody = null;
    

    let pathParams = { 
    };
    let queryParams = { 
    };
    let headerParams = { 
    };
    let formParams = { 
    };

    let authNames: string[] = [];
    let contentTypes: string[] = [];
    let accepts: string[] = ["text/plain", "application/json", "text/json"];
    let returnType = SiteMapInfo;

    return this.apiClient.callApi<SiteMapInfo>(
      '/v2.0/platform/sitemap', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );

  }
}
