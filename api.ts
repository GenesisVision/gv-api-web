/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost/api".replace(/\/+$/, "");

export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

const formatResponse = <T>(response: Response): Promise<T> => {
  return new Promise(async (resolve, reject) => {
    if (!response.ok) {
      const body = await response.json();
      return reject({
        statusCode: response.status,
        body
      });
    }
    const data = await response.text();
    try {
      resolve(JSON.parse(data));
    } catch (e) {
      resolve((data as unknown) as T);
    }
  });
};

export interface AmountWithCurrency {
    amount: number;
    currency: AmountWithCurrencyCurrencyEnum;
}

export type AmountWithCurrencyCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface AndroidAppVersion {
    minVersion: AndroidVersion;
    lastVersion: AndroidVersion;
}
export interface AndroidVersion {
    versionCode: string;
    versionName: string;
}
export interface AssetEvent {
    programs: Array<string>;
    funds: Array<string>;
}
export interface AssetSelection {
    id: string;
    title: string;
    logo: string;
    type: AssetSelectionTypeEnum;
}

export type AssetSelectionTypeEnum = 'Program' |'Fund'; 
export interface AssetsValue {
    type: AssetsValueTypeEnum;
    id: string;
    title: string;
    avatar: string;
    color: string;
    value: number;
    changePercent: number;
    changeValue: number;
}

export type AssetsValueTypeEnum = 'All' |'Program' |'Fund' |'Signal'; 
export interface AttachToSignalProvider {
    mode: AttachToSignalProviderModeEnum;
    percent: number;
    openTolerancePercent: number;
    fixedVolume: number;
    fixedCurrency: AttachToSignalProviderFixedCurrencyEnum;
    initialDepositCurrency: AttachToSignalProviderInitialDepositCurrencyEnum;
    initialDepositAmount: number;
}

export type AttachToSignalProviderModeEnum = 'ByBalance' |'Percent' |'Fixed'; 
export type AttachToSignalProviderFixedCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type AttachToSignalProviderInitialDepositCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface AttachToSignalProviderInfo {
    hasSignalAccount: boolean;
    hasActiveSubscription: boolean;
    volumeFee: number;
    minDeposit: number;
    minDepositCurrency: AttachToSignalProviderInfoMinDepositCurrencyEnum;
}

export type AttachToSignalProviderInfoMinDepositCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface BalanceChartElement {
    date: Date;
    managerFunds: number;
    investorsFunds: number;
}
export interface BlockchainInfo {
    hash: string;
    status: BlockchainInfoStatusEnum;
}

export type BlockchainInfoStatusEnum = 'Undefined' |'New' |'Pending' |'ConfirmedByGate' |'ConfirmedAndValidated' |'Error' |'Cancelled'; 
export interface Broker {
    name: string;
    description: string;
    logo: string;
    terms: string;
    assets: string;
    fee: number;
    leverageMin: number;
    leverageMax: number;
    accountTypes: Array<BrokerAccountType>;
    isForex: boolean;
    isSignalsAvailable: boolean;
    tags: Array<ProgramTag>;
}
export interface BrokerAccountType {
    id: string;
    name: string;
    description: string;
    type: BrokerAccountTypeTypeEnum;
    leverages: Array<number>;
    currencies: Array<string>;
    minimumDepositsAmount: { [key: string]: number; };
    isForex: boolean;
    isSignalsAvailable: boolean;
}

export type BrokerAccountTypeTypeEnum = 'Undefined' |'MetaTrader4' |'MetaTrader5' |'NinjaTrader' |'cTrader' |'Rumus' |'Metastock' |'IDEX' |'Huobi' |'Exante'; 
export interface BrokerDetails {
    isForex: boolean;
    logo: string;
    showSwaps: boolean;
    showTickets: boolean;
    name: string;
}
export interface BrokersInfo {
    brokers: Array<Broker>;
}
export interface BrokersProgramInfo {
    brokers: Array<Broker>;
    currentAccountTypeId: string;
}
export interface CaptchaCheckResult {
    id: string;
    pow: PowResult;
    geeTest: GeeTestResult;
}
export interface CaptchaDetails {
    captchaType: CaptchaDetailsCaptchaTypeEnum;
    id: string;
    route: string;
    pow: PowDetails;
    geeTest: GeeTestDetails;
}

export type CaptchaDetailsCaptchaTypeEnum = 'None' |'Pow' |'GeeTest'; 
export interface ChangeBrokerProgramRequest {
    programId: string;
    newBrokerAccountTypeId: string;
    newLeverage: number;
}
export interface ChangePasswordViewModel {
    oldPassword: string;
    password: string;
    confirmPassword: string;
}
export interface ChartSimple {
    value: number;
    date: Date;
}
export interface ConvertingDetails {
    currencyTo: ConvertingDetailsCurrencyToEnum;
    currencyToName: string;
    amountTo: number;
    rateValue: number;
    currencyToLogo: string;
}

export type ConvertingDetailsCurrencyToEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface CopyTradingAccountInfo {
    id: string;
    currency: CopyTradingAccountInfoCurrencyEnum;
    logo: string;
    title: string;
    balance: number;
    equity: number;
    freeMargin: number;
    marginLevel: number;
    available: number;
}

export type CopyTradingAccountInfoCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface CopyTradingAccountsList {
    accounts: Array<CopyTradingAccountInfo>;
    total: number;
}
export interface CreateWithdrawalRequestModel {
    amount: number;
    currency: CreateWithdrawalRequestModelCurrencyEnum;
    address: string;
    twoFactorCode: string;
}

export type CreateWithdrawalRequestModelCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface DashboardChartValue {
    investedProgramsInfo: Array<ValueChartBar>;
    balanceChart: Array<ChartSimple>;
    value: number;
    valueCurrency: number;
    changePercent: number;
    changeValue: number;
    changeValueCurrency: number;
    rate: number;
}
export interface DashboardPortfolioEvent {
    assetId: string;
    date: Date;
    title: string;
    url: string;
    value: number;
    valueTotal: number;
    feeSuccessManager: number;
    feeSuccessManagerCurrency: DashboardPortfolioEventFeeSuccessManagerCurrencyEnum;
    feeSuccessPlatform: number;
    feeSuccessPlatformCurrency: DashboardPortfolioEventFeeSuccessPlatformCurrencyEnum;
    profitPercent: number;
    currency: DashboardPortfolioEventCurrencyEnum;
    type: DashboardPortfolioEventTypeEnum;
    logo: string;
    color: string;
    description: string;
    assetType: DashboardPortfolioEventAssetTypeEnum;
}

export type DashboardPortfolioEventFeeSuccessManagerCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type DashboardPortfolioEventFeeSuccessPlatformCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type DashboardPortfolioEventCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type DashboardPortfolioEventTypeEnum = 'All' |'Invest' |'Withdraw' |'Profit' |'Loss' |'Reinvest' |'Canceled' |'Ended' |'WithdrawByStopOut'; 
export type DashboardPortfolioEventAssetTypeEnum = 'Program' |'Fund'; 
export interface DashboardPortfolioEvents {
    events: Array<DashboardPortfolioEvent>;
    total: number;
}
export interface DashboardProgramDetails {
    share: number;
}
export interface DashboardSummary {
    chart: DashboardChartValue;
    events: DashboardPortfolioEvents;
    profileHeader: ProfileHeaderViewModel;
    programsCount: number;
    fundsCount: number;
    signalsCount: number;
    requests: ProgramRequests;
}
export interface DetachFromSignalProvider {
    mode: DetachFromSignalProviderModeEnum;
}

export type DetachFromSignalProviderModeEnum = 'None' |'ProviderCloseOnly' |'CloseAllImmediately'; 
export interface Enums {
    multiWallet: MultiWalletFilters;
    program: ProgramFilters;
    fund: FundFilters;
}
export interface ErrorMessage {
    message: string;
    property: string;
}
export interface ErrorViewModel {
    errors: Array<ErrorMessage>;
    code: ErrorViewModelCodeEnum;
}

export type ErrorViewModelCodeEnum = 'InternalServerError' |'ValidationError' |'RequiresTwoFactor' |'WrongCaptcha'; 
export interface ExternalTransactionDetails {
    description: string;
    descriptionUrl: string;
    fromAddress: string;
    isEnableActions: boolean;
}
export interface FcmTokenViewModel {
    token: string;
}
export interface FeeDetails {
    title: string;
    type: FeeDetailsTypeEnum;
    amount: number;
    currency: FeeDetailsCurrencyEnum;
}

export type FeeDetailsTypeEnum = 'Undefined' |'GvProgramEntry' |'GvProgramSuccess' |'GvFundEntry' |'GvGmGvtHolderFee' |'ManagerProgramEntry' |'ManagerProgramSuccess' |'ManagerFundEntry' |'ManagerFundExit' |'GvWithdrawal' |'ManagerSignalMasterSuccessFee' |'ManagerSignalMasterVolumeFee' |'GvSignalSuccessFee'; 
export type FeeDetailsCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface FinancialStatistic {
    deposit: number;
    withdraw: number;
    commissionRebate: number;
    successFee: number;
    entryFee: number;
    profit: number;
    balance: number;
}
export interface ForgotPasswordViewModel {
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface FundAssetInfo {
    asset: string;
    symbol: string;
    icon: string;
    target: number;
    current: number;
}
export interface FundAssetPart {
    id: string;
    percent: number;
}
export interface FundAssetPartWithIcon {
    icon: string;
    color: string;
    name: string;
    asset: string;
    percent: number;
}
export interface FundAssetPercent {
    asset: string;
    name: string;
    percent: number;
    icon: string;
}
export interface FundAssetsListInfo {
    assets: Array<FundAssetInfo>;
}
export interface FundBalanceChart {
    usdBalance: number;
    balanceChart: Array<BalanceChartElement>;
    gvtBalance: number;
}
export interface FundDetails {
    totalAssetsCount: number;
    topFundAssets: Array<FundAssetPercent>;
    statistic: FundDetailsListStatistic;
    personalDetails: PersonalFundDetailsFull;
    dashboardAssetsDetails: DashboardProgramDetails;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: FundDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}

export type FundDetailsStatusEnum = 'None' |'Pending' |'ErrorCreating' |'Active' |'Closed' |'Archived' |'ClosedDueToInactivity'; 
export interface FundDetailsFull {
    entryFee: number;
    exitFee: number;
    managementFee: number;
    currentAssets: Array<FundAssetPartWithIcon>;
    statistic: FundStatistic;
    personalFundDetails: PersonalFundDetailsFull;
    id: string;
    logo: string;
    url: string;
    color: string;
    description: string;
    title: string;
    ipfsHash: string;
    creationDate: Date;
    status: FundDetailsFullStatusEnum;
    manager: ProfilePublic;
}

export type FundDetailsFullStatusEnum = 'None' |'Pending' |'ErrorCreating' |'Active' |'Closed' |'Archived' |'ClosedDueToInactivity'; 
export interface FundDetailsListStatistic {
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    profitPercent: number;
    drawdownPercent: number;
    investorsCount: number;
}
export interface FundFacet {
    sorting: FundFacetSortingEnum;
    id: string;
    title: string;
    description: string;
    logo: string;
    url: string;
    sortType: FundFacetSortTypeEnum;
    timeframe: FundFacetTimeframeEnum;
}

export type FundFacetSortingEnum = 'ByProfitAsc' |'ByProfitDesc' |'ByDrawdownAsc' |'ByDrawdownDesc' |'ByInvestorsAsc' |'ByInvestorsDesc' |'ByNewAsc' |'ByNewDesc' |'ByTitleAsc' |'ByTitleDesc' |'ByBalanceAsc' |'ByBalanceDesc'; 
export type FundFacetSortTypeEnum = 'New' |'Top' |'WeeklyTop' |'Popular' |'ToLevelUp' |'MostReliable'; 
export type FundFacetTimeframeEnum = 'Day' |'Week' |'Month' |'ThreeMonths' |'Year' |'AllTime'; 
export interface FundFilters {
    assets: Array<PlatformAsset>;
}
export interface FundInvestInfo {
    title: string;
    availableInWallet: number;
    minInvestmentAmount: number;
    entryFee: number;
    gvCommission: number;
    rate: number;
    isOwnProgram: boolean;
}
export interface FundNotificationSettingList {
    assetId: string;
    title: string;
    url: string;
    logo: string;
    color: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface FundProfitChart {
    totalUsdProfit: number;
    timeframeUsdProfit: number;
    rebalances: number;
    creationDate: Date;
    profitPercent: number;
    equityChart: Array<ChartSimple>;
    balance: number;
    investors: number;
    profitChangePercent: number;
    sharpeRatio: number;
    sortinoRatio: number;
    calmarRatio: number;
    maxDrawdown: number;
    totalGvtProfit: number;
    timeframeGvtProfit: number;
    rate: number;
}
export interface FundSets {
    sets: Array<FundFacet>;
    favoritesCount: number;
}
export interface FundStatistic {
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    profitPercent: number;
    drawdownPercent: number;
    investorsCount: number;
    startDate: Date;
    startBalance: number;
    investedAmount: number;
    rebalancingCount: number;
}
export interface FundWithdrawInfo {
    exitFee: number;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface FundsList {
    funds: Array<FundDetails>;
    total: number;
}
export interface GeeTestDetails {
}
export interface GeeTestResult {
}
export interface IOsAppVersion {
    minVersion: string;
    lastVersion: string;
}
export interface InternalTransferRequest {
    sourceId: string;
    sourceType: InternalTransferRequestSourceTypeEnum;
    destinationId: string;
    destinationType: InternalTransferRequestDestinationTypeEnum;
    amount: number;
    transferAll: boolean;
}

export type InternalTransferRequestSourceTypeEnum = 'Undefined' |'Wallet' |'CopyTradingAccount' |'GenesisVisionPlatform' |'SignalProviderSettings' |'Program' |'Fund'; 
export type InternalTransferRequestDestinationTypeEnum = 'Undefined' |'Wallet' |'CopyTradingAccount' |'GenesisVisionPlatform' |'SignalProviderSettings' |'Program' |'Fund'; 
export interface LevelInfo {
    level: number;
    investmentLimit: number;
}
export interface LevelUpData {
    level: number;
    total: number;
    totalOwn: number;
    quota: number;
    targetProfit: number;
}
export interface LevelUpSummary {
    levelData: Array<LevelUpData>;
}
export interface LevelsParamsInfo {
    minAvailableToInvest: number;
    maxAvailableToInvest: number;
    unverifiedAvailableToInvest: number;
    genesisRatioMin: number;
    genesisRatioMax: number;
    genesisRatioHighRisk: number;
    volumeScaleMin: number;
    volumeScaleMax: number;
    programAgeMax: number;
    ageByVolumeMax: number;
    investmentScaleMin: number;
    investmentScaleMax: number;
    investmentScaleHighRisk: number;
}
export interface LoginViewModel {
    password: string;
    rememberMe: boolean;
    twoFactorCode: string;
    recoveryCode: string;
    client: string;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ManagerAssets {
    programs: Array<ManagerSimpleProgram>;
    funds: Array<ManagerSimpleFund>;
}
export interface ManagerDashboard {
    profile: ManagerProfileDetails;
    requests: ProgramRequest;
    events: ManagerPortfolioEvents;
    allAssets: Array<AssetSelection>;
    programChart: ProgramProfitChart;
    fundChart: FundProfitChart;
}
export interface ManagerFundWithdrawInfo {
    withheldInvestment: number;
    exitFee: number;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ManagerNotificationSettingList {
    managerId: string;
    url: string;
    username: string;
    avatar: string;
    about: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface ManagerOverview {
}
export interface ManagerPortfolioEvent {
    assetId: string;
    date: Date;
    title: string;
    value: number;
    feeValue: number;
    profitPercent: number;
    currency: ManagerPortfolioEventCurrencyEnum;
    type: ManagerPortfolioEventTypeEnum;
    programType: ManagerPortfolioEventProgramTypeEnum;
    logo: string;
    color: string;
    description: string;
    url: string;
    periodNumber: number;
}

export type ManagerPortfolioEventCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type ManagerPortfolioEventTypeEnum = 'All' |'AssetStarted' |'ProgramPeriodStarts' |'ProgramPeriodEnds' |'InvestorInvest' |'InvestorWithdraw' |'ManagerInvest' |'ManagerWithdraw' |'AssetFinished' |'EntranceFee' |'ExitFee' |'ProgramStopOut' |'ProgramManagerTradingFeeAccrual' |'ProgramSignalSubscribe' |'ProgramBrokerChanged'; 
export type ManagerPortfolioEventProgramTypeEnum = 'Program' |'Fund'; 
export interface ManagerPortfolioEvents {
    events: Array<ManagerPortfolioEvent>;
    total: number;
}
export interface ManagerProfile {
    id: string;
    username: string;
    about: string;
    avatar: string;
    regDate: Date;
    assets: Array<string>;
    url: string;
    socialLinks: Array<SocialLinkViewModel>;
}
export interface ManagerProfileDetails {
    managerProfile: ManagerProfile;
    overview: ManagerOverview;
    programsCount: number;
    fundsCount: number;
}
export interface ManagerProgramCreateResult {
    programId: string;
    twoFactorRequired: boolean;
    twoFactor: TwoFactorAuthenticator;
}
export interface ManagerProgramWithdrawInfo {
    withheldInvestment: number;
    periodEnds: Date;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ManagerSimpleFund {
    id: string;
    title: string;
    color: string;
    logo: string;
    url: string;
}
export interface ManagerSimpleProgram {
    level: number;
    levelProgress: number;
    id: string;
    title: string;
    color: string;
    logo: string;
    url: string;
}
export interface ManagersList {
    managers: Array<ManagerProfile>;
    total: number;
}
export interface MigrationRequest {
    dateCreate: Date;
    newLeverage: number;
    newBroker: Broker;
}
export interface MultiWalletExternalTransaction {
    id: string;
    currency: MultiWalletExternalTransactionCurrencyEnum;
    logo: string;
    date: Date;
    amount: number;
    type: MultiWalletExternalTransactionTypeEnum;
    status: string;
    isEnableActions: boolean;
    statusUrl: string;
}

export type MultiWalletExternalTransactionCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type MultiWalletExternalTransactionTypeEnum = 'All' |'Deposit' |'Withdrawal'; 
export interface MultiWalletExternalTransactionsViewModel {
    transactions: Array<MultiWalletExternalTransaction>;
    total: number;
}
export interface MultiWalletFilters {
    transactionType: Array<string>;
    externalTransactionType: Array<string>;
}
export interface MultiWalletTransaction {
    id: string;
    currencyFrom: MultiWalletTransactionCurrencyFromEnum;
    currencyTo: MultiWalletTransactionCurrencyToEnum;
    type: MultiWalletTransactionTypeEnum;
    date: Date;
    status: MultiWalletTransactionStatusEnum;
    logoFrom: string;
    logoTo: string;
    description: string;
    amount: number;
    amountTo: number;
}

export type MultiWalletTransactionCurrencyFromEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type MultiWalletTransactionCurrencyToEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type MultiWalletTransactionTypeEnum = 'All' |'Investment' |'Converting' |'Withdrawal' |'Close' |'Open' |'Fee' |'Profits' |'SubscribeSignal' |'ReceiveSignal' |'DepositSignal' |'WithdrawalSignal' |'Platform'; 
export type MultiWalletTransactionStatusEnum = 'Done' |'Pending' |'Canceled' |'Error'; 
export interface MultiWalletTransactionsViewModel {
    transactions: Array<MultiWalletTransaction>;
    total: number;
}
export interface NewFundRequest {
    exitFee: number;
    managementFee: number;
    assets: Array<FundAssetPart>;
    title: string;
    description: string;
    logo: string;
    entryFee: number;
    depositAmount: number;
    depositWalletId: string;
}
export interface NewProgramRequest {
    currency: NewProgramRequestCurrencyEnum;
    periodLength: number;
    successFee: number;
    stopOutLevel: number;
    leverage: number;
    brokerAccountTypeId: string;
    signalSuccessFee: number;
    signalVolumeFee: number;
    isSignalProgram: boolean;
    investmentLimit: number;
    title: string;
    description: string;
    logo: string;
    entryFee: number;
    depositAmount: number;
    depositWalletId: string;
}

export type NewProgramRequestCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface NotificationList {
    notifications: Array<NotificationViewModel>;
    total: number;
}
export interface NotificationSettingList {
    settingsGeneral: Array<NotificationSettingViewModel>;
    settingsProgram: Array<ProgramNotificationSettingList>;
    settingsFund: Array<FundNotificationSettingList>;
    settingsManager: Array<ManagerNotificationSettingList>;
}
export interface NotificationSettingViewModel {
    id: string;
    isEnabled: boolean;
    assetId: string;
    managerId: string;
    type: NotificationSettingViewModelTypeEnum;
    conditionType: NotificationSettingViewModelConditionTypeEnum;
    conditionAmount: number;
}

export type NotificationSettingViewModelTypeEnum = 'PlatformNewsAndUpdates' |'PlatformEmergency' |'PlatformOther' |'ProfileUpdated' |'ProfilePwdUpdated' |'ProfileVerification' |'Profile2FA' |'ProfileSecurity' |'TradingAccountPwdUpdated' |'ProgramNewsAndUpdates' |'ProgramEndOfPeriod' |'ProgramCondition' |'ProgramExceedInvestmentLimit' |'FundNewsAndUpdates' |'FundEndOfPeriod' |'FundRebalancing' |'ManagerNewProgram' |'Signals'; 
export type NotificationSettingViewModelConditionTypeEnum = 'Empty' |'Profit' |'Level' |'AvailableToInvest'; 
export interface NotificationViewModel {
    id: string;
    text: string;
    date: Date;
    type: NotificationViewModelTypeEnum;
    assetId: string;
    managerId: string;
    logo: string;
    url: string;
    color: string;
    isUnread: boolean;
    assetType: NotificationViewModelAssetTypeEnum;
}

export type NotificationViewModelTypeEnum = 'PlatformNewsAndUpdates' |'PlatformEmergency' |'PlatformOther' |'ProfileUpdated' |'ProfilePwdUpdated' |'ProfileVerification' |'Profile2FA' |'ProfileSecurity' |'TradingAccountPwdUpdated' |'ProgramNewsAndUpdates' |'ProgramEndOfPeriod' |'ProgramCondition' |'ProgramExceedInvestmentLimit' |'FundNewsAndUpdates' |'FundEndOfPeriod' |'FundRebalancing' |'ManagerNewProgram' |'Signals'; 
export type NotificationViewModelAssetTypeEnum = 'Program' |'Fund'; 
export interface OrderModel {
    id: string;
    login: string;
    ticket: string;
    symbol: string;
    volume: number;
    profit: number;
    direction: OrderModelDirectionEnum;
    date: Date;
    price: number;
    priceCurrent: number;
    entry: OrderModelEntryEnum;
    baseVolume: number;
    originalCommission: number;
    originalCommissionCurrency: string;
    commission: number;
    swap: number;
    showOriginalCommission: boolean;
    signalData: OrderModelSignalData;
}

export type OrderModelDirectionEnum = 'Buy' |'Sell' |'Balance' |'Credit' |'Undefined'; 
export type OrderModelEntryEnum = 'In' |'Out' |'InOut' |'OutBy'; 
export interface OrderModelSignalData {
    masters: Array<SignalDataMaster>;
}
export interface OrderProgramData {
    title: string;
    level: number;
    levelProgress: number;
    color: string;
    url: string;
    logo: string;
}
export interface OrderSignalFee {
    amount: number;
    currency: OrderSignalFeeCurrencyEnum;
    type: OrderSignalFeeTypeEnum;
}

export type OrderSignalFeeCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type OrderSignalFeeTypeEnum = 'Undefined' |'GvProgramEntry' |'GvProgramSuccess' |'GvFundEntry' |'GvGmGvtHolderFee' |'ManagerProgramEntry' |'ManagerProgramSuccess' |'ManagerFundEntry' |'ManagerFundExit' |'GvWithdrawal' |'ManagerSignalMasterSuccessFee' |'ManagerSignalMasterVolumeFee' |'GvSignalSuccessFee'; 
export interface OrderSignalModel {
    providers: Array<OrderSignalProgramInfo>;
    totalCommission: number;
    totalCommissionByType: Array<FeeDetails>;
    tradingAccountId: string;
    currency: OrderSignalModelCurrencyEnum;
    id: string;
    login: string;
    ticket: string;
    symbol: string;
    volume: number;
    profit: number;
    direction: OrderSignalModelDirectionEnum;
    date: Date;
    price: number;
    priceCurrent: number;
    entry: OrderSignalModelEntryEnum;
    baseVolume: number;
    originalCommission: number;
    originalCommissionCurrency: string;
    commission: number;
    swap: number;
    showOriginalCommission: boolean;
    signalData: OrderModelSignalData;
}

export type OrderSignalModelCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type OrderSignalModelDirectionEnum = 'Buy' |'Sell' |'Balance' |'Credit' |'Undefined'; 
export type OrderSignalModelEntryEnum = 'In' |'Out' |'InOut' |'OutBy'; 
export interface OrderSignalProgramInfo {
    manager: ProfilePublic;
    program: OrderProgramData;
    programId: string;
    volume: number;
    priceOpenAvg: number;
    profit: number;
    firstOrderDate: Date;
    fees: Array<OrderSignalFee>;
}
export interface OtherAssetsValue {
    amount: number;
    value: number;
    changePercent: number;
    changeValue: number;
}
export interface PasswordModel {
    password: string;
}
export interface PeriodDate {
    dateFrom: Date;
    dateTo: Date;
}
export interface PersonalFundDetailsFull {
    withdrawPercent: number;
    canReallocate: boolean;
    availableReallocationPercents: number;
    nextReallocationPercents: Date;
    isFavorite: boolean;
    isInvested: boolean;
    isOwnProgram: boolean;
    canCloseProgram: boolean;
    canCloseAsset: boolean;
    isFinishing: boolean;
    canInvest: boolean;
    canWithdraw: boolean;
    canClosePeriod: boolean;
    hasNotifications: boolean;
    value: number;
    profit: number;
    invested: number;
    pendingInput: number;
    pendingOutput: number;
    pendingOutputIsWithdrawAll: boolean;
    status: PersonalFundDetailsFullStatusEnum;
}

export type PersonalFundDetailsFullStatusEnum = 'Pending' |'Active' |'Investing' |'Withdrawing' |'Ended'; 
export interface PersonalProgramDetailsFull {
    isReinvest: boolean;
    gvtValue: number;
    showTwoFactorButton: boolean;
    signalSubscription: SignalSubscription;
    login: string;
    notificationAvailableToInvestId: string;
    canMakeSignalProvider: boolean;
    canChangePassword: boolean;
    migration: MigrationRequest;
    isFavorite: boolean;
    isInvested: boolean;
    isOwnProgram: boolean;
    canCloseProgram: boolean;
    canCloseAsset: boolean;
    isFinishing: boolean;
    canInvest: boolean;
    canWithdraw: boolean;
    canClosePeriod: boolean;
    hasNotifications: boolean;
    value: number;
    profit: number;
    invested: number;
    pendingInput: number;
    pendingOutput: number;
    pendingOutputIsWithdrawAll: boolean;
    status: PersonalProgramDetailsFullStatusEnum;
}

export type PersonalProgramDetailsFullStatusEnum = 'Pending' |'Active' |'Investing' |'Withdrawing' |'Ended'; 
export interface PersonalSignalDetailsFull {
    subscriptionDate: Date;
    tradesCount: number;
    signalSubscription: SignalSubscription;
    profit: number;
    volume: number;
    isFavorite: boolean;
    isInvested: boolean;
    status: PersonalSignalDetailsFullStatusEnum;
    signalAccountId: string;
}

export type PersonalSignalDetailsFullStatusEnum = 'Active' |'Ended'; 
export interface PlatformAsset {
    id: string;
    name: string;
    asset: string;
    description: string;
    icon: string;
    color: string;
}
export interface PlatformAssets {
    assets: Array<PlatformAsset>;
}
export interface PlatformCurrency {
    name: string;
    rateToGvt: number;
}
export interface PlatformInfo {
    iOSVersion: IOsAppVersion;
    androidVersion: AndroidAppVersion;
    programsFacets: Array<ProgramFacet>;
    fundsFacets: Array<FundFacet>;
    programsInfo: ProgramsInfo;
    currencies: Array<string>;
    programCurrencies: Array<string>;
    platformCurrencies: Array<PlatformCurrency>;
    enums: Enums;
}
export interface PlatformStatistic {
    managers: number;
    investors: number;
    profitWeek: number;
    investmentAmount: number;
    totalInvestorsProfit: number;
    totalProfit: number;
}
export interface PowDetails {
    secureAlgorithm: PowDetailsSecureAlgorithmEnum;
    difficulty: number;
    nonce: string;
}

export type PowDetailsSecureAlgorithmEnum = 'Sha256'; 
export interface PowResult {
    prefix: string;
}
export interface ProfileFullViewModel {
    id: string;
    email: string;
    firstName: string;
    middleName: string;
    lastName: string;
    country: string;
    city: string;
    address: string;
    phone: string;
    phoneNumberConfirmed: boolean;
    birthday: Date;
    gender: boolean;
    avatar: string;
    about: string;
    userName: string;
    index: string;
    citizenship: string;
    refUrl: string;
    verificationStatus: ProfileFullViewModelVerificationStatusEnum;
}

export type ProfileFullViewModelVerificationStatusEnum = 'NotVerified' |'Verified' |'UnderReview' |'Rejected'; 
export interface ProfileHeaderViewModel {
    id: string;
    name: string;
    email: string;
    avatar: string;
    userType: ProfileHeaderViewModelUserTypeEnum;
    notificationsCount: number;
    favoritesCount: number;
    kycConfirmed: boolean;
    allowForex: boolean;
    isTwoFactorEnabled: boolean;
    isNewUser: boolean;
    totalBalanceGvt: number;
    investedGvt: number;
    availableGvt: number;
    totalBalance: number;
    invested: number;
    available: number;
    pending: number;
}

export type ProfileHeaderViewModelUserTypeEnum = 'Investor' |'Manager'; 
export interface ProfilePublic {
    id: string;
    username: string;
    avatar: string;
    registrationDate: Date;
    url: string;
    socialLinks: Array<SocialLinkViewModel>;
}
export interface ProgramBalanceChart {
    programCurrencyBalance: number;
    programCurrency: ProgramBalanceChartProgramCurrencyEnum;
    balanceChart: Array<ProgramBalanceChartElement>;
    gvtBalance: number;
}

export type ProgramBalanceChartProgramCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface ProgramBalanceChartElement {
    profit: number;
    date: Date;
    managerFunds: number;
    investorsFunds: number;
}
export interface ProgramDetails {
    currency: ProgramDetailsCurrencyEnum;
    level: number;
    levelProgress: number;
    periodDuration: number;
    stopOutLevel: number;
    periodStarts: Date;
    periodEnds: Date;
    availableInvestment: number;
    availableInvestmentBase: number;
    availableInvestmentLimit: number;
    dashboardAssetsDetails: DashboardProgramDetails;
    statistic: ProgramDetailsListStatistic;
    rating: ProgramDetailsRating;
    personalDetails: PersonalProgramDetailsFull;
    tags: Array<ProgramTag>;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: ProgramDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}

export type ProgramDetailsCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type ProgramDetailsStatusEnum = 'None' |'Pending' |'ErrorCreating' |'Active' |'Closed' |'Archived' |'ClosedDueToInactivity'; 
export interface ProgramDetailsFull {
    currency: ProgramDetailsFullCurrencyEnum;
    level: number;
    levelProgress: number;
    periodDuration: number;
    periodStarts: Date;
    periodEnds: Date;
    entryFee: number;
    entryFeeSelected: number;
    entryFeeCurrent: number;
    successFee: number;
    successFeeSelected: number;
    successFeeCurrent: number;
    stopOutLevel: number;
    stopOutLevelSelected: number;
    stopOutLevelCurrent: number;
    isReinvesting: boolean;
    isSignalProgram: boolean;
    signalSuccessFee: number;
    signalVolumeFee: number;
    leverageMin: number;
    leverageMax: number;
    ageDays: number;
    genesisRatio: number;
    investmentScale: number;
    volumeScale: number;
    availableInvestment: number;
    availableInvestmentBase: number;
    availableInvestmentLimit: number;
    totalAvailableInvestment: number;
    brokerDetails: BrokerDetails;
    statistic: ProgramStatistic;
    rating: ProgramDetailsRating;
    personalProgramDetails: PersonalProgramDetailsFull;
    tags: Array<ProgramTag>;
    id: string;
    logo: string;
    url: string;
    color: string;
    description: string;
    title: string;
    ipfsHash: string;
    creationDate: Date;
    status: ProgramDetailsFullStatusEnum;
    manager: ProfilePublic;
}

export type ProgramDetailsFullCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type ProgramDetailsFullStatusEnum = 'None' |'Pending' |'ErrorCreating' |'Active' |'Closed' |'Archived' |'ClosedDueToInactivity'; 
export interface ProgramDetailsListStatistic {
    balanceBase: AmountWithCurrency;
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    currentValue: number;
    profitPercent: number;
    profitValue: number;
    drawdownPercent: number;
    investorsCount: number;
    tradesCount: number;
}
export interface ProgramDetailsRating {
    rating: number;
    profit: number;
    canLevelUp: boolean;
    topPercent: number;
}
export interface ProgramFacet {
    sorting: ProgramFacetSortingEnum;
    id: string;
    title: string;
    description: string;
    logo: string;
    url: string;
    sortType: ProgramFacetSortTypeEnum;
    timeframe: ProgramFacetTimeframeEnum;
}

export type ProgramFacetSortingEnum = 'ByLevelAsc' |'ByLevelDesc' |'ByProfitAsc' |'ByProfitDesc' |'ByDrawdownAsc' |'ByDrawdownDesc' |'ByTradesAsc' |'ByTradesDesc' |'ByInvestorsAsc' |'ByInvestorsDesc' |'ByNewDesc' |'ByNewAsc' |'ByEndOfPeriodAsc' |'ByEndOfPeriodDesc' |'ByTitleAsc' |'ByTitleDesc' |'ByBalanceAsc' |'ByBalanceDesc' |'ByCurrDesc' |'ByCurrAsc' |'ByLevelProgressDesc' |'ByLevelProgressAsc'; 
export type ProgramFacetSortTypeEnum = 'New' |'Top' |'WeeklyTop' |'Popular' |'ToLevelUp' |'MostReliable'; 
export type ProgramFacetTimeframeEnum = 'Day' |'Week' |'Month' |'ThreeMonths' |'Year' |'AllTime'; 
export interface ProgramFilters {
    programTags: Array<ProgramTag>;
    actionType: Array<string>;
    customNotificationType: Array<string>;
    managerNotificationType: AssetEvent;
    investorNotificationType: AssetEvent;
}
export interface ProgramInfo {
    title: string;
}
export interface ProgramInvestInfo {
    periodEnds: Date;
    availableToInvest: number;
    availableToInvestBase: number;
    title: string;
    availableInWallet: number;
    minInvestmentAmount: number;
    entryFee: number;
    gvCommission: number;
    rate: number;
    isOwnProgram: boolean;
}
export interface ProgramLevelInfo {
    isKycPassed: boolean;
    level: number;
    levelProgressPercent: number;
    genesisRatio: number;
    programAge: number;
    weightedVolumeScale: number;
    managerBalance: number;
    investmentScale: number;
    totalAvailableToInvest: number;
}
export interface ProgramMinimumDeposit {
    minimumDepositsAmount: { [key: string]: number; };
}
export interface ProgramNotificationSettingList {
    level: number;
    levelProgress: number;
    settingsCustom: Array<NotificationSettingViewModel>;
    assetId: string;
    title: string;
    url: string;
    logo: string;
    color: string;
    settingsGeneral: Array<NotificationSettingViewModel>;
}
export interface ProgramPeriodViewModel {
    dateFrom: Date;
    dateTo: Date;
    status: ProgramPeriodViewModelStatusEnum;
    number: number;
    profit: number;
    balance: number;
    investors: number;
    managerStatistic: FinancialStatistic;
}

export type ProgramPeriodViewModelStatusEnum = 'Planned' |'InProccess' |'Closed'; 
export interface ProgramPeriodsViewModel {
    periods: Array<ProgramPeriodViewModel>;
    total: number;
}
export interface ProgramProfitChart {
    totalProgramCurrencyProfit: number;
    timeframeProgramCurrencyProfit: number;
    programCurrency: ProgramProfitChartProgramCurrencyEnum;
    trades: number;
    successTradesPercent: number;
    profitFactor: number;
    pnLChart: Array<ChartSimple>;
    periods: Array<PeriodDate>;
    lastPeriodStarts: Date;
    lastPeriodEnds: Date;
    tradingVolume: number;
    equityChart: Array<ChartSimple>;
    balance: number;
    investors: number;
    profitChangePercent: number;
    sharpeRatio: number;
    sortinoRatio: number;
    calmarRatio: number;
    maxDrawdown: number;
    totalGvtProfit: number;
    timeframeGvtProfit: number;
    rate: number;
}

export type ProgramProfitChartProgramCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface ProgramPwdUpdate {
    password: string;
    twoFactorCode: string;
}
export interface ProgramRequest {
    id: string;
    programId: string;
    date: Date;
    value: number;
    valueGvt: number;
    withdrawAll: boolean;
    feeEntry: number;
    feeExit: number;
    currency: ProgramRequestCurrencyEnum;
    fundWithdrawPercent: number;
    type: ProgramRequestTypeEnum;
    status: ProgramRequestStatusEnum;
    logo: string;
    title: string;
    color: string;
    canCancelRequest: boolean;
    programType: ProgramRequestProgramTypeEnum;
}

export type ProgramRequestCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type ProgramRequestTypeEnum = 'Invest' |'Withdrawal'; 
export type ProgramRequestStatusEnum = 'New' |'Executed' |'Cancelled'; 
export type ProgramRequestProgramTypeEnum = 'Program' |'Fund'; 
export interface ProgramRequests {
    requests: Array<ProgramRequest>;
    total: number;
    totalValue: number;
}
export interface ProgramSets {
    sets: Array<ProgramFacet>;
    favoritesCount: number;
}
export interface ProgramStatistic {
    balanceBase: AmountWithCurrency;
    balanceGVT: AmountWithCurrency;
    balanceSecondary: AmountWithCurrency;
    currentValue: number;
    profitPercent: number;
    profitValue: number;
    drawdownPercent: number;
    investorsCount: number;
    hasNotifications: boolean;
    startDate: Date;
    startBalance: number;
    startCurrency: ProgramStatisticStartCurrencyEnum;
    investedAmount: number;
    investedCurrency: ProgramStatisticInvestedCurrencyEnum;
    tradesCount: number;
    tradesSuccessCount: number;
    profitFactorPercent: number;
    sharpeRatioPercent: number;
}

export type ProgramStatisticStartCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type ProgramStatisticInvestedCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface ProgramTag {
    name: string;
    color: string;
}
export interface ProgramTransactionDetails {
    id: string;
    managerName: string;
    programType: ProgramTransactionDetailsProgramTypeEnum;
    successFeeCurrency: ProgramTransactionDetailsSuccessFeeCurrencyEnum;
    logo: string;
    title: string;
    entryFee: number;
    entryFeePercent: number;
    successFee: number;
    successFeePercent: number;
    level: number;
    levelProgress: number;
    exitFee: number;
    exitFeePercent: number;
    color: string;
}

export type ProgramTransactionDetailsProgramTypeEnum = 'Program' |'Fund'; 
export type ProgramTransactionDetailsSuccessFeeCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface ProgramUpdate {
    title: string;
    description: string;
    logo: string;
    stopOutLevel: number;
    investmentLimit: number;
}
export interface ProgramWithdrawInfo {
    periodEnds: Date;
    title: string;
    availableToWithdraw: number;
    rate: number;
}
export interface ProgramsInfo {
    managerProgramInvestment: number;
    managerProgramInvestmentUSD: number;
    managerProgramInvestmentUSDT: number;
    managerProgramInvestmentBTC: number;
    managerProgramInvestmentETH: number;
    managerMaxEntryFee: number;
    managerMaxSuccessFee: number;
    managerFundInvestment: number;
    managerMaxExitFee: number;
    managerMaxSignalVolumeFee: number;
    managerMinSignalVolumeFee: number;
    managerMaxSignalSuccessFee: number;
    managerMinSignalSuccessFee: number;
    periods: Array<number>;
}
export interface ProgramsLevelsInfo {
    levels: Array<LevelInfo>;
}
export interface ProgramsList {
    programs: Array<ProgramDetails>;
    total: number;
}
export interface RateItem {
    currency: RateItemCurrencyEnum;
    rate: number;
}

export type RateItemCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface RatesModel {
    rates: RatesModelRates;
}
export interface RatesModelRates {
    undefined: Array<RateItem>;
    GVT: Array<RateItem>;
    ETH: Array<RateItem>;
    BTC: Array<RateItem>;
    ADA: Array<RateItem>;
    USDT: Array<RateItem>;
    XRP: Array<RateItem>;
    BCH: Array<RateItem>;
    LTC: Array<RateItem>;
    DOGE: Array<RateItem>;
    BNB: Array<RateItem>;
    USD: Array<RateItem>;
    EUR: Array<RateItem>;
}
export interface ReallocationModel {
    date: Date;
    parts: Array<FundAssetPartWithIcon>;
}
export interface ReallocationsViewModel {
    reallocations: Array<ReallocationModel>;
    total: number;
}
export interface RecoveryCode {
    code: string;
    isActive: boolean;
}
export interface RecoveryCodesViewModel {
    codes: Array<RecoveryCode>;
    authToken: string;
}
export interface RegisterInvestorViewModel {
    password: string;
    confirmPassword: string;
    refCode: string;
    isAuto: boolean;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface RegisterManagerViewModel {
    userName: string;
    password: string;
    confirmPassword: string;
    refCode: string;
    isAuto: boolean;
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ResendConfirmationViewModel {
    email: string;
    captchaCheckResult: CaptchaCheckResult;
}
export interface ResetPasswordViewModel {
    userId: string;
    code: string;
    password: string;
    confirmPassword: string;
}
export interface SearchViewModel {
    programs: ProgramsList;
    funds: FundsList;
    managers: ManagersList;
}
export interface SignalDataMaster {
    login: string;
    share: number;
}
export interface SignalDetails {
    statistic: ProgramDetailsListStatistic;
    personalDetails: PersonalSignalDetailsFull;
    currency: SignalDetailsCurrencyEnum;
    level: number;
    levelProgress: number;
    tags: Array<ProgramTag>;
    subscribers: number;
    id: string;
    logo: string;
    url: string;
    color: string;
    title: string;
    description: string;
    status: SignalDetailsStatusEnum;
    creationDate: Date;
    manager: ProfilePublic;
    chart: Array<ChartSimple>;
}

export type SignalDetailsCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type SignalDetailsStatusEnum = 'None' |'Pending' |'ErrorCreating' |'Active' |'Closed' |'Archived' |'ClosedDueToInactivity'; 
export interface SignalFee {
    title: string;
    type: SignalFeeTypeEnum;
    value: number;
    currency: SignalFeeCurrencyEnum;
}

export type SignalFeeTypeEnum = 'Undefined' |'GvProgramEntry' |'GvProgramSuccess' |'GvFundEntry' |'GvGmGvtHolderFee' |'ManagerProgramEntry' |'ManagerProgramSuccess' |'ManagerFundEntry' |'ManagerFundExit' |'GvWithdrawal' |'ManagerSignalMasterSuccessFee' |'ManagerSignalMasterVolumeFee' |'GvSignalSuccessFee'; 
export type SignalFeeCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface SignalProviderSubscribers {
    subscribers: Array<SignalSubscriber>;
    total: number;
}
export interface SignalSubscriber {
    number: number;
    trades: number;
    profit: number;
    volume: number;
    subscriptionDate: Date;
    unsubscriptionDate: Date;
    status: SignalSubscriberStatusEnum;
    totalCommissionAmount: number;
    totalCommissionCurrency: SignalSubscriberTotalCommissionCurrencyEnum;
    totalSuccessFeeAmount: number;
    totalSuccessFeeCurrency: SignalSubscriberTotalSuccessFeeCurrencyEnum;
    totalVolumeFeeAmount: number;
    totalVolumeFeeCurrency: SignalSubscriberTotalVolumeFeeCurrencyEnum;
}

export type SignalSubscriberStatusEnum = 'Active' |'Ended'; 
export type SignalSubscriberTotalCommissionCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type SignalSubscriberTotalSuccessFeeCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type SignalSubscriberTotalVolumeFeeCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface SignalSubscription {
    hasSignalAccount: boolean;
    hasActiveSubscription: boolean;
    mode: SignalSubscriptionModeEnum;
    percent: number;
    openTolerancePercent: number;
    fixedVolume: number;
    fixedCurrency: SignalSubscriptionFixedCurrencyEnum;
    totalProfit: number;
    totalVolume: number;
}

export type SignalSubscriptionModeEnum = 'ByBalance' |'Percent' |'Fixed'; 
export type SignalSubscriptionFixedCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface SignalTradingEvent {
    date: Date;
    message: string;
}
export interface SignalTradingEvents {
    events: Array<SignalTradingEvent>;
    total: number;
}
export interface SignalsList {
    programs: Array<SignalDetails>;
    total: number;
}
export interface SocialLinkViewModel {
    url: string;
    logo: string;
    name: string;
    value: string;
    type: SocialLinkViewModelTypeEnum;
}

export type SocialLinkViewModelTypeEnum = 'Undefined' |'Twitter' |'Telegram' |'Facebook' |'LinkedIn' |'Youtube' |'WeChat' |'Email'; 
export interface SocialLinksViewModel {
    socialLinks: Array<SocialLinkViewModel>;
}
export interface TradesSignalViewModel {
    showSwaps: boolean;
    showTickets: boolean;
    trades: Array<OrderSignalModel>;
    total: number;
}
export interface TradesViewModel {
    showSwaps: boolean;
    showTickets: boolean;
    trades: Array<OrderModel>;
    total: number;
}
export interface TransactionDetails {
    type: TransactionDetailsTypeEnum;
    programDetails: ProgramTransactionDetails;
    convertingDetails: ConvertingDetails;
    externalTransactionDetails: ExternalTransactionDetails;
    status: TransactionDetailsStatusEnum;
    signalFees: Array<SignalFee>;
    currency: TransactionDetailsCurrencyEnum;
    currencyName: string;
    currencyLogo: string;
    gvCommission: number;
    gvCommissionCurrency: TransactionDetailsGvCommissionCurrencyEnum;
    gvCommissionPercent: number;
    amount: number;
}

export type TransactionDetailsTypeEnum = 'Investing' |'Withdrawal' |'ExternalWithdrawal' |'ExternalDeposit' |'Converting' |'Open' |'Close' |'Profit' |'PlatformFee' |'SubscribeSignal' |'ReceiveSignal' |'DepositSignal' |'WithdrawalSignal' |'Platform'; 
export type TransactionDetailsStatusEnum = 'Done' |'Pending' |'Canceled' |'Error'; 
export type TransactionDetailsCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type TransactionDetailsGvCommissionCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface TwoFactorAuthenticator {
    sharedKey: string;
    authenticatorUri: string;
}
export interface TwoFactorAuthenticatorConfirm {
    code: string;
    sharedKey: string;
    password: string;
}
export interface TwoFactorCodeModel {
    twoFactorCode: string;
    password: string;
}
export interface TwoFactorStatus {
    twoFactorEnabled: boolean;
}
export interface UpdatePersonalDetailViewModel {
    firstName: string;
    middleName: string;
    lastName: string;
    birthday: Date;
    citizenship: string;
    gender: boolean;
    documentId: string;
    phoneNumber: string;
    country: string;
    city: string;
    address: string;
    index: string;
}
export interface UpdateProfileViewModel {
    userName: string;
    about: string;
}
export interface UpdateSocialLinkViewModel {
    type: UpdateSocialLinkViewModelTypeEnum;
    value: string;
}

export type UpdateSocialLinkViewModelTypeEnum = 'Undefined' |'Twitter' |'Telegram' |'Facebook' |'LinkedIn' |'Youtube' |'WeChat' |'Email'; 
export interface UploadResult {
    id: string;
}
export interface UserCommissionData {
    isPayingCommissionInGvt: boolean;
    gvtHolderTradingFee: number;
    gvtHolderDiscount: number;
    regularTradingFee: number;
    regularDiscount: number;
}
export interface ValueChartBar {
    value: number;
    date: Date;
    topAssets: Array<AssetsValue>;
    otherAssetsValue: OtherAssetsValue;
}
export interface WalletBaseData {
    id: string;
    title: string;
    logo: string;
    currency: WalletBaseDataCurrencyEnum;
    available: number;
    rate: number;
}

export type WalletBaseDataCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletData {
    id: string;
    title: string;
    logo: string;
    rateToGVT: number;
    isDepositEnabled: boolean;
    isWithdrawalEnabled: boolean;
    withdrawalCommission: number;
    depositAddress: string;
    currency: WalletDataCurrencyEnum;
    available: number;
    invested: number;
    pending: number;
    total: number;
    currencyCcy: WalletDataCurrencyCcyEnum;
    availableCcy: number;
    investedCcy: number;
    pendingCcy: number;
    totalCcy: number;
}

export type WalletDataCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type WalletDataCurrencyCcyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletInfo {
    currency: WalletInfoCurrencyEnum;
    address: string;
    rateToGVT: number;
    description: string;
    logo: string;
    isDepositEnabled: boolean;
}

export type WalletInfoCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletMultiAvailable {
    wallets: Array<WalletBaseData>;
}
export interface WalletMultiSummary {
    grandTotal: WalletsGrandTotal;
    wallets: Array<WalletData>;
    payFeesWithGvt: boolean;
}
export interface WalletSummary {
    totalBalanceGVT: number;
    totalBalanceCurrency: number;
    investedGVT: number;
    investedCurrency: number;
    availableGVT: number;
    availableCurrency: number;
}
export interface WalletTransaction {
    id: string;
    amount: number;
    amountConverted: number;
    date: Date;
    number: number;
    sourceId: string;
    sourceType: WalletTransactionSourceTypeEnum;
    sourceCurrency: WalletTransactionSourceCurrencyEnum;
    sourceProgramInfo: ProgramInfo;
    sourceBlockchainInfo: BlockchainInfo;
    sourceWithdrawalInfo: WithdrawalInfo;
    action: WalletTransactionActionEnum;
    information: string;
    destinationId: string;
    destinationType: WalletTransactionDestinationTypeEnum;
    destinationCurrency: WalletTransactionDestinationCurrencyEnum;
    destinationProgramInfo: ProgramInfo;
    destinationBlockchainInfo: BlockchainInfo;
    destinationWithdrawalInfo: WithdrawalInfo;
}

export type WalletTransactionSourceTypeEnum = 'Wallet' |'Program' |'Fund' |'ProgramRequest' |'FundRequest' |'WithdrawalRequest' |'PaymentTransaction' |'Blockchain' |'GenesisVisionPlatform' |'SignalMasterSetting' |'SignalTradingAccount'; 
export type WalletTransactionSourceCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type WalletTransactionActionEnum = 'Transfer' |'ProgramOpen' |'ProgramProfit' |'ProgramInvest' |'ProgramWithdrawal' |'ProgramRefundPartialExecution' |'ProgramRefundClose' |'ProgramRefundStopOut' |'ProgramRequestInvest' |'ProgramRequestWithdrawal' |'ProgramRequestCancel' |'PayingTradingFee' |'SignalSubscriberPayingFee' |'SignalProviderReceiveFee'; 
export type WalletTransactionDestinationTypeEnum = 'Wallet' |'Program' |'Fund' |'ProgramRequest' |'FundRequest' |'WithdrawalRequest' |'PaymentTransaction' |'Blockchain' |'GenesisVisionPlatform' |'SignalMasterSetting' |'SignalTradingAccount'; 
export type WalletTransactionDestinationCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletTransactionsViewModel {
    transactions: Array<WalletTransaction>;
    total: number;
}
export interface WalletWithdrawalInfo {
    currency: WalletWithdrawalInfoCurrencyEnum;
    description: string;
    logo: string;
    commission: number;
    rateToGvt: number;
    availableToWithdrawal: number;
}

export type WalletWithdrawalInfoCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletsGrandTotal {
    currency: WalletsGrandTotalCurrencyEnum;
    available: number;
    invested: number;
    pending: number;
    total: number;
    currencyCcy: WalletsGrandTotalCurrencyCcyEnum;
    availableCcy: number;
    investedCcy: number;
    pendingCcy: number;
    totalCcy: number;
}

export type WalletsGrandTotalCurrencyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export type WalletsGrandTotalCurrencyCcyEnum = 'Undefined' |'GVT' |'ETH' |'BTC' |'ADA' |'USDT' |'XRP' |'BCH' |'LTC' |'DOGE' |'BNB' |'USD' |'EUR'; 
export interface WalletsInfo {
    wallets: Array<WalletInfo>;
}
export interface WithdrawalInfo {
    wallet: string;
    status: WithdrawalInfoStatusEnum;
    canResendEmail: boolean;
    canCancelRequest: boolean;
}

export type WithdrawalInfoStatusEnum = 'New' |'InProcess' |'Done' |'Error' |'Rejected' |'Cancelled'; 
export interface WithdrawalSummary {
    availableToWithdrawal: number;
    wallets: Array<WalletWithdrawalInfo>;
}


export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faConfirmPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorAuthenticatorConfirm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faCreatePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faCreatePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faDisablePost.');
            }
            const localVarPath = `/v1.0/auth/2fa/disable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorCodeModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faGet.');
            }
            const localVarPath = `/v1.0/auth/2fa`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesNewPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10Auth2faRecoverycodesPost.');
            }
            const localVarPath = `/v1.0/auth/2fa/recoverycodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPasswordChangePost.');
            }
            const localVarPath = `/v1.0/auth/password/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangePasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/forgot/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/forgot/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ForgotPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/password/reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPhoneCodePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPhoneCodePost.');
            }
            const localVarPath = `/v1.0/auth/phone/code`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthPhoneVerifyPost(authorization: string, code?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthPhoneVerifyPost.');
            }
            const localVarPath = `/v1.0/auth/phone/verify`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/resendconfirmationlink`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResendConfirmationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSigninInvestorPost(model?: LoginViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signin/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSigninManagerPost(model?: LoginViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signin/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupConfirmPost(userId?: string, code?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterInvestorViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/auth/signup/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterManagerViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthTokenDevicesLogoutPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthTokenDevicesLogoutPost.');
            }
            const localVarPath = `/v1.0/auth/token/devices/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10AuthTokenUpdatePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10AuthTokenUpdatePost.');
            }
            const localVarPath = `/v1.0/auth/token/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const AuthApiFp = function(configuration?: Configuration) {
    return {
        v10Auth2faConfirmPost(authorization: string, model?: TwoFactorAuthenticatorConfirm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faConfirmPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<RecoveryCodesViewModel>(response));
            };
        },
        v10Auth2faCreatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faCreatePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TwoFactorAuthenticator>(response));
            };
        },
        v10Auth2faDisablePost(authorization: string, model?: TwoFactorCodeModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faDisablePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10Auth2faGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorStatus> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TwoFactorStatus>(response));
            };
        },
        v10Auth2faRecoverycodesNewPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesNewPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<RecoveryCodesViewModel>(response));
            };
        },
        v10Auth2faRecoverycodesPost(authorization: string, model?: PasswordModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecoveryCodesViewModel> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10Auth2faRecoverycodesPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<RecoveryCodesViewModel>(response));
            };
        },
        v10AuthPasswordChangePost(authorization: string, model?: ChangePasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordChangePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthPasswordForgotInvestorPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthPasswordForgotManagerPost(model?: ForgotPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordForgotManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthPasswordResetPost(model?: ResetPasswordViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPasswordResetPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthPhoneCodePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneCodePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<number>(response));
            };
        },
        v10AuthPhoneVerifyPost(authorization: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthPhoneVerifyPost(authorization, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthResendconfirmationlinkPost(model?: ResendConfirmationViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthResendconfirmationlinkPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthSigninInvestorPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthSigninManagerPost(model?: LoginViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSigninManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthSignupConfirmPost(userId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupConfirmPost(userId, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthSignupInvestorPost(model?: RegisterInvestorViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupInvestorPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthSignupManagerPost(model?: RegisterManagerViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthSignupManagerPost(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10AuthTokenDevicesLogoutPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenDevicesLogoutPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10AuthTokenUpdatePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).v10AuthTokenUpdatePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
    }
};

export class AuthApi extends BaseAPI {
    public v10Auth2faConfirmPost(
    authorization: string,
    options: {
        model?: TwoFactorAuthenticatorConfirm
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10Auth2faConfirmPost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10Auth2faCreatePost(
    authorization: string,
    init?: RequestInit) {
        return AuthApiFp(this.configuration).v10Auth2faCreatePost(authorization, init)(this.fetch, this.basePath);
    }

    public v10Auth2faDisablePost(
    authorization: string,
    options: {
        model?: TwoFactorCodeModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10Auth2faDisablePost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10Auth2faGet(
    authorization: string,
    init?: RequestInit) {
        return AuthApiFp(this.configuration).v10Auth2faGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10Auth2faRecoverycodesNewPost(
    authorization: string,
    options: {
        model?: PasswordModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesNewPost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10Auth2faRecoverycodesPost(
    authorization: string,
    options: {
        model?: PasswordModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10Auth2faRecoverycodesPost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10AuthPasswordChangePost(
    authorization: string,
    options: {
        model?: ChangePasswordViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordChangePost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10AuthPasswordForgotInvestorPost(
    options: {
        model?: ForgotPasswordViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordForgotInvestorPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthPasswordForgotManagerPost(
    options: {
        model?: ForgotPasswordViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordForgotManagerPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthPasswordResetPost(
    options: {
        model?: ResetPasswordViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthPasswordResetPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthPhoneCodePost(
    authorization: string,
    init?: RequestInit) {
        return AuthApiFp(this.configuration).v10AuthPhoneCodePost(authorization, init)(this.fetch, this.basePath);
    }

    public v10AuthPhoneVerifyPost(
    authorization: string,
    options: {
        code?: string
    } = {},
    init?: RequestInit) {
	      const {
	        code
	      } = options;
        return AuthApiFp(this.configuration).v10AuthPhoneVerifyPost(authorization, code, init)(this.fetch, this.basePath);
    }

    public v10AuthResendconfirmationlinkPost(
    options: {
        model?: ResendConfirmationViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthResendconfirmationlinkPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthSigninInvestorPost(
    options: {
        model?: LoginViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthSigninInvestorPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthSigninManagerPost(
    options: {
        model?: LoginViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthSigninManagerPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthSignupConfirmPost(
    options: {
        userId?: string,
        code?: string
    } = {},
    init?: RequestInit) {
	      const {
	        userId,
	        code
	      } = options;
        return AuthApiFp(this.configuration).v10AuthSignupConfirmPost(userId, code, init)(this.fetch, this.basePath);
    }

    public v10AuthSignupInvestorPost(
    options: {
        model?: RegisterInvestorViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthSignupInvestorPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthSignupManagerPost(
    options: {
        model?: RegisterManagerViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return AuthApiFp(this.configuration).v10AuthSignupManagerPost(model, init)(this.fetch, this.basePath);
    }

    public v10AuthTokenDevicesLogoutPost(
    authorization: string,
    init?: RequestInit) {
        return AuthApiFp(this.configuration).v10AuthTokenDevicesLogoutPost(authorization, init)(this.fetch, this.basePath);
    }

    public v10AuthTokenUpdatePost(
    authorization: string,
    init?: RequestInit) {
        return AuthApiFp(this.configuration).v10AuthTokenUpdatePost(authorization, init)(this.fetch, this.basePath);
    }

}


export const BrokersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10BrokersByProgramIdGet(programId: string, options: any = {}): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling v10BrokersByProgramIdGet.');
            }
            const localVarPath = `/v1.0/brokers/{programId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10BrokersGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/brokers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const BrokersApiFp = function(configuration?: Configuration) {
    return {
        v10BrokersByProgramIdGet(programId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersProgramInfo> {
            const localVarFetchArgs = BrokersApiFetchParamCreator(configuration).v10BrokersByProgramIdGet(programId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<BrokersProgramInfo>(response));
            };
        },
        v10BrokersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokersInfo> {
            const localVarFetchArgs = BrokersApiFetchParamCreator(configuration).v10BrokersGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<BrokersInfo>(response));
            };
        },
    }
};

export class BrokersApi extends BaseAPI {
    public v10BrokersByProgramIdGet(
    programId: string,
    init?: RequestInit) {
        return BrokersApiFp(this.configuration).v10BrokersByProgramIdGet(programId, init)(this.fetch, this.basePath);
    }

    public v10BrokersGet(
    init?: RequestInit) {
        return BrokersApiFp(this.configuration).v10BrokersGet(init)(this.fetch, this.basePath);
    }

}


export const FileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10FileByIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FileByIdGet.');
            }
            const localVarPath = `/v1.0/file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FileDocumentUploadPost.');
            }
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile','Required parameter uploadedFile was null or undefined when calling v10FileDocumentUploadPost.');
            }
            const localVarPath = `/v1.0/file/document/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FileUploadPost(uploadedFile: any, authorization?: string, options: any = {}): FetchArgs {
            // verify required parameter 'uploadedFile' is not null or undefined
            if (uploadedFile === null || uploadedFile === undefined) {
                throw new RequiredError('uploadedFile','Required parameter uploadedFile was null or undefined when calling v10FileUploadPost.');
            }
            const localVarPath = `/v1.0/file/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (uploadedFile !== undefined) {
                localVarFormParams.set('uploadedFile', uploadedFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const FileApiFp = function(configuration?: Configuration) {
    return {
        v10FileByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileByIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10FileDocumentUploadPost(authorization: string, uploadedFile: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileDocumentUploadPost(authorization, uploadedFile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<UploadResult>(response));
            };
        },
        v10FileUploadPost(uploadedFile: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadResult> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).v10FileUploadPost(uploadedFile, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<UploadResult>(response));
            };
        },
    }
};

export class FileApi extends BaseAPI {
    public v10FileByIdGet(
    id: string,
    init?: RequestInit) {
        return FileApiFp(this.configuration).v10FileByIdGet(id, init)(this.fetch, this.basePath);
    }

    public v10FileDocumentUploadPost(
    authorization: string,
    uploadedFile: any,
    init?: RequestInit) {
        return FileApiFp(this.configuration).v10FileDocumentUploadPost(authorization, uploadedFile, init)(this.fetch, this.basePath);
    }

    public v10FileUploadPost(
    uploadedFile: any,
    options: {
        authorization?: string
    } = {},
    init?: RequestInit) {
	      const {
	        authorization
	      } = options;
        return FileApiFp(this.configuration).v10FileUploadPost(uploadedFile, authorization, init)(this.fetch, this.basePath);
    }

}


export const FundsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10FundsAssetsGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/funds/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdAssetsGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdAssetsGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/assets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdFavoriteAddPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/funds/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdGet.');
            }
            const localVarPath = `/v1.0/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsByIdReallocationsGet(id: string, dateFrom?: Date, dateTo?: Date, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10FundsByIdReallocationsGet.');
            }
            const localVarPath = `/v1.0/funds/{id}/reallocations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, assets?: Array<string>, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, status?: Array<string>, skip?: number, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (assets) {
                localVarQueryParameter['Assets'] = assets;
            }

            if (statisticDateFrom !== undefined) {
                if (typeof statisticDateFrom === "string") {
                    localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
                } else {
                    localVarQueryParameter['StatisticDateFrom'] = (statisticDateFrom as Date).toISOString();
                }
            }

            if (statisticDateTo !== undefined) {
                if (typeof statisticDateTo === "string") {
                    localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
                } else {
                    localVarQueryParameter['StatisticDateTo'] = (statisticDateTo as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }

            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }

            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }

            if (hasInvestorsForAll !== undefined) {
                localVarQueryParameter['HasInvestorsForAll'] = hasInvestorsForAll;
            }

            if (hasInvestorsForClosed !== undefined) {
                localVarQueryParameter['HasInvestorsForClosed'] = hasInvestorsForClosed;
            }

            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10FundsSetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10FundsSetsGet.');
            }
            const localVarPath = `/v1.0/funds/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const FundsApiFp = function(configuration?: Configuration) {
    return {
        v10FundsAssetsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformAssets> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsAssetsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<PlatformAssets>(response));
            };
        },
        v10FundsByIdAssetsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundAssetsListInfo> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdAssetsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundAssetsListInfo>(response));
            };
        },
        v10FundsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundBalanceChart> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundBalanceChart>(response));
            };
        },
        v10FundsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundProfitChart> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundProfitChart>(response));
            };
        },
        v10FundsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteAddPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10FundsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10FundsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundDetailsFull> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdGet(id, authorization, currencySecondary, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundDetailsFull>(response));
            };
        },
        v10FundsByIdReallocationsGet(id: string, dateFrom?: Date, dateTo?: Date, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReallocationsViewModel> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ReallocationsViewModel>(response));
            };
        },
        v10FundsGet(authorization?: string, sorting?: string, currencySecondary?: string, assets?: Array<string>, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, status?: Array<string>, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundsList>(response));
            };
        },
        v10FundsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundSets> {
            const localVarFetchArgs = FundsApiFetchParamCreator(configuration).v10FundsSetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundSets>(response));
            };
        },
    }
};

export class FundsApi extends BaseAPI {
    public v10FundsAssetsGet(
    init?: RequestInit) {
        return FundsApiFp(this.configuration).v10FundsAssetsGet(init)(this.fetch, this.basePath);
    }

    public v10FundsByIdAssetsGet(
    id: string,
    init?: RequestInit) {
        return FundsApiFp(this.configuration).v10FundsByIdAssetsGet(id, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdChartsBalanceGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        maxPointCount?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        maxPointCount
	      } = options;
        return FundsApiFp(this.configuration).v10FundsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdChartsProfitGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        maxPointCount?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        maxPointCount
	      } = options;
        return FundsApiFp(this.configuration).v10FundsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdFavoriteAddPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteAddPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdFavoriteRemovePost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return FundsApiFp(this.configuration).v10FundsByIdFavoriteRemovePost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdGet(
    id: string,
    options: {
        authorization?: string,
        currencySecondary?: string
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        currencySecondary
	      } = options;
        return FundsApiFp(this.configuration).v10FundsByIdGet(id, authorization, currencySecondary, init)(this.fetch, this.basePath);
    }

    public v10FundsByIdReallocationsGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        skip,
	        take
	      } = options;
        return FundsApiFp(this.configuration).v10FundsByIdReallocationsGet(id, dateFrom, dateTo, skip, take, init)(this.fetch, this.basePath);
    }

    public v10FundsGet(
    options: {
        authorization?: string,
        sorting?: string,
        currencySecondary?: string,
        assets?: Array<string>,
        statisticDateFrom?: Date,
        statisticDateTo?: Date,
        chartPointsCount?: number,
        mask?: string,
        facetId?: string,
        isFavorite?: boolean,
        isEnabled?: boolean,
        hasInvestorsForAll?: boolean,
        hasInvestorsForClosed?: boolean,
        ids?: Array<string>,
        managerId?: string,
        programManagerId?: string,
        status?: Array<string>,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        sorting,
	        currencySecondary,
	        assets,
	        statisticDateFrom,
	        statisticDateTo,
	        chartPointsCount,
	        mask,
	        facetId,
	        isFavorite,
	        isEnabled,
	        hasInvestorsForAll,
	        hasInvestorsForClosed,
	        ids,
	        managerId,
	        programManagerId,
	        status,
	        skip,
	        take
	      } = options;
        return FundsApiFp(this.configuration).v10FundsGet(authorization, sorting, currencySecondary, assets, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10FundsSetsGet(
    authorization: string,
    init?: RequestInit) {
        return FundsApiFp(this.configuration).v10FundsSetsGet(authorization, init)(this.fetch, this.basePath);
    }

}


export const InvestorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent','Required parameter percent was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorFundsGet.');
            }
            const localVarPath = `/v1.0/investor/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }

            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorGet.');
            }
            const localVarPath = `/v1.0/investor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chartCurrency !== undefined) {
                localVarQueryParameter['chartCurrency'] = chartCurrency;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }

            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }

            if (eventsTake !== undefined) {
                localVarQueryParameter['eventsTake'] = eventsTake;
            }

            if (requestsSkip !== undefined) {
                localVarQueryParameter['requestsSkip'] = requestsSkip;
            }

            if (requestsTake !== undefined) {
                localVarQueryParameter['requestsTake'] = requestsTake;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorPortfolioChartGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/chart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (balancePoints !== undefined) {
                localVarQueryParameter['BalancePoints'] = balancePoints;
            }

            if (programsPoints !== undefined) {
                localVarQueryParameter['ProgramsPoints'] = programsPoints;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorPortfolioEventsGet.');
            }
            const localVarPath = `/v1.0/investor/portfolio/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/off`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/reinvest/on`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, withdrawAll?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiByAmountPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/multi/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withdrawAll !== undefined) {
                localVarQueryParameter['withdrawAll'] = withdrawAll;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsByIdWithdrawMultiPost(id: string, authorization: string, amount?: number, withdrawAll?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawMultiPost.');
            }
            const localVarPath = `/v1.0/investor/programs/{id}/withdraw/multi`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (withdrawAll !== undefined) {
                localVarQueryParameter['withdrawAll'] = withdrawAll;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsGet.');
            }
            const localVarPath = `/v1.0/investor/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }

            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/investor/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/investor/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10InvestorSignalsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10InvestorSignalsGet.');
            }
            const localVarPath = `/v1.0/investor/signals`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }

            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const InvestorApiFp = function(configuration?: Configuration) {
    return {
        v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundInvestInfo>(response));
            };
        },
        v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundWithdrawInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundWithdrawInfo>(response));
            };
        },
        v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundsList>(response));
            };
        },
        v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardSummary> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<DashboardSummary>(response));
            };
        },
        v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardChartValue> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<DashboardChartValue>(response));
            };
        },
        v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardPortfolioEvents> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<DashboardPortfolioEvents>(response));
            };
        },
        v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramInvestInfo>(response));
            };
        },
        v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramWithdrawInfo> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramWithdrawInfo>(response));
            };
        },
        v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, withdrawAll?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsByIdWithdrawMultiPost(id: string, authorization: string, amount?: number, withdrawAll?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramsList>(response));
            };
        },
        v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10InvestorSignalsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalsList> {
            const localVarFetchArgs = InvestorApiFetchParamCreator(configuration).v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<SignalsList>(response));
            };
        },
    }
};

export class InvestorApi extends BaseAPI {
    public v10InvestorFundsByIdInvestByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10InvestorFundsByIdInvestInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorFundsByIdRequestsBySkipByTakeGet(
    id: string,
    skip: number,
    take: number,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorFundsByIdWithdrawByPercentPost(
    id: string,
    percent: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorFundsGet(
    authorization: string,
    options: {
        sorting?: string,
        from?: Date,
        to?: Date,
        chartPointsCount?: number,
        currencySecondary?: string,
        actionStatus?: string,
        dashboardActionStatus?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        from,
	        to,
	        chartPointsCount,
	        currencySecondary,
	        actionStatus,
	        dashboardActionStatus,
	        skip,
	        take
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }

    public v10InvestorGet(
    authorization: string,
    options: {
        chartCurrency?: string,
        from?: Date,
        to?: Date,
        balancePoints?: number,
        programsPoints?: number,
        eventsTake?: number,
        requestsSkip?: number,
        requestsTake?: number
    } = {},
    init?: RequestInit) {
	      const {
	        chartCurrency,
	        from,
	        to,
	        balancePoints,
	        programsPoints,
	        eventsTake,
	        requestsSkip,
	        requestsTake
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorGet(authorization, chartCurrency, from, to, balancePoints, programsPoints, eventsTake, requestsSkip, requestsTake, init)(this.fetch, this.basePath);
    }

    public v10InvestorPortfolioChartGet(
    authorization: string,
    options: {
        currency?: string,
        from?: Date,
        to?: Date,
        balancePoints?: number,
        programsPoints?: number
    } = {},
    init?: RequestInit) {
	      const {
	        currency,
	        from,
	        to,
	        balancePoints,
	        programsPoints
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorPortfolioChartGet(authorization, currency, from, to, balancePoints, programsPoints, init)(this.fetch, this.basePath);
    }

    public v10InvestorPortfolioEventsGet(
    authorization: string,
    options: {
        assetId?: string,
        from?: Date,
        to?: Date,
        type?: string,
        assetType?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        assetId,
	        from,
	        to,
	        type,
	        assetType,
	        skip,
	        take
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorPortfolioEventsGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdInvestByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdReinvestOffPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOffPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdReinvestOnPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdReinvestOnPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(
    id: string,
    skip: number,
    take: number,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdWithdrawByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdWithdrawMultiByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    options: {
        withdrawAll?: boolean
    } = {},
    init?: RequestInit) {
	      const {
	        withdrawAll
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, withdrawAll, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsByIdWithdrawMultiPost(
    id: string,
    authorization: string,
    options: {
        amount?: number,
        withdrawAll?: boolean
    } = {},
    init?: RequestInit) {
	      const {
	        amount,
	        withdrawAll
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsByIdWithdrawMultiPost(id, authorization, amount, withdrawAll, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsGet(
    authorization: string,
    options: {
        sorting?: string,
        from?: Date,
        to?: Date,
        chartPointsCount?: number,
        currencySecondary?: string,
        actionStatus?: string,
        dashboardActionStatus?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        from,
	        to,
	        chartPointsCount,
	        currencySecondary,
	        actionStatus,
	        dashboardActionStatus,
	        skip,
	        take
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }

    public v10InvestorProgramsRequestsByIdCancelPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorProgramsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorRequestsBySkipByTakeGet(
    skip: number,
    take: number,
    authorization: string,
    init?: RequestInit) {
        return InvestorApiFp(this.configuration).v10InvestorRequestsBySkipByTakeGet(skip, take, authorization, init)(this.fetch, this.basePath);
    }

    public v10InvestorSignalsGet(
    authorization: string,
    options: {
        sorting?: string,
        from?: Date,
        to?: Date,
        chartPointsCount?: number,
        currencySecondary?: string,
        actionStatus?: string,
        dashboardActionStatus?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        from,
	        to,
	        chartPointsCount,
	        currencySecondary,
	        actionStatus,
	        dashboardActionStatus,
	        skip,
	        take
	      } = options;
        return InvestorApiFp(this.configuration).v10InvestorSignalsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }

}


export const ManagerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10ManagerAssetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerAssetsGet.');
            }
            const localVarPath = `/v1.0/manager/assets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerByIdDetailsGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerByIdDetailsGet.');
            }
            const localVarPath = `/v1.0/manager/{id}/details`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerByIdGet(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerByIdGet.');
            }
            const localVarPath = `/v1.0/manager/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerEventsGet.');
            }
            const localVarPath = `/v1.0/manager/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/assets/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;FundAssetPart&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(assets || {}) : (assets || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'percent' is not null or undefined
            if (percent === null || percent === undefined) {
                throw new RequiredError('percent','Required parameter percent was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/{percent}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"percent"}}`, encodeURIComponent(String(percent)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/funds/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/funds/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewFundRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsGet.');
            }
            const localVarPath = `/v1.0/manager/funds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }

            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsInvestmentAmountGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/funds/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/funds/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerGet.');
            }
            const localVarPath = `/v1.0/manager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerPrograms2faConfirmPost(authorization: string, programId?: string, code?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerPrograms2faConfirmPost.');
            }
            const localVarPath = `/v1.0/manager/programs/2fa/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerPrograms2faGetGet(authorization: string, programId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerPrograms2faGetGet.');
            }
            const localVarPath = `/v1.0/manager/programs/2fa/get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsBrokerChangeCancelPost(authorization: string, programId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsBrokerChangeCancelPost.');
            }
            const localVarPath = `/v1.0/manager/programs/broker/change/cancel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsBrokerChangePost(authorization: string, request?: ChangeBrokerProgramRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsBrokerChangePost.');
            }
            const localVarPath = `/v1.0/manager/programs/broker/change`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeBrokerProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (twoFactorCode !== undefined) {
                localVarQueryParameter['twoFactorCode'] = twoFactorCode;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/invest/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdLevelsInfoGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdLevelsInfoGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdLevelsInfoGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/levels/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdPasswordChangePost(id: string, authorization: string, model?: ProgramPwdUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdPasswordChangePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPasswordChangePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/password/change`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProgramPwdUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/period/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/requests/{skip}/{take}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProgramUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/info/{currency}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawMultiByAmountPost.');
            }
            const localVarPath = `/v1.0/manager/programs/{id}/withdraw/multi/{amount}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsCreatePost.');
            }
            const localVarPath = `/v1.0/manager/programs/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewProgramRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsGet.');
            }
            const localVarPath = `/v1.0/manager/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (actionStatus !== undefined) {
                localVarQueryParameter['ActionStatus'] = actionStatus;
            }

            if (dashboardActionStatus !== undefined) {
                localVarQueryParameter['DashboardActionStatus'] = dashboardActionStatus;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsInvestmentAmountGet(authorization: string, brokerTradingAccount?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsInvestmentAmountGet.');
            }
            const localVarPath = `/v1.0/manager/programs/investment/amount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (brokerTradingAccount !== undefined) {
                localVarQueryParameter['brokerTradingAccount'] = brokerTradingAccount;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
            }
            const localVarPath = `/v1.0/manager/programs/requests/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, assetType?: string, options: any = {}): FetchArgs {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
            }
            const localVarPath = `/v1.0/manager/requests/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetType !== undefined) {
                localVarQueryParameter['assetType'] = assetType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerSignalCreatePost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerSignalCreatePost.');
            }
            const localVarPath = `/v1.0/manager/signal/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['ProgramId'] = programId;
            }

            if (volumeFee !== undefined) {
                localVarQueryParameter['VolumeFee'] = volumeFee;
            }

            if (successFee !== undefined) {
                localVarQueryParameter['SuccessFee'] = successFee;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ManagerSignalEditPost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ManagerSignalEditPost.');
            }
            const localVarPath = `/v1.0/manager/signal/edit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['ProgramId'] = programId;
            }

            if (volumeFee !== undefined) {
                localVarQueryParameter['VolumeFee'] = volumeFee;
            }

            if (successFee !== undefined) {
                localVarQueryParameter['SuccessFee'] = successFee;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const ManagerApiFp = function(configuration?: Configuration) {
    return {
        v10ManagerAssetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerAssets> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerAssetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerAssets>(response));
            };
        },
        v10ManagerByIdDetailsGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfileDetails> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdDetailsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerProfileDetails>(response));
            };
        },
        v10ManagerByIdGet(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProfile> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerByIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerProfile>(response));
            };
        },
        v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerPortfolioEvents> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerPortfolioEvents>(response));
            };
        },
        v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundInvestInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundInvestInfo>(response));
            };
        },
        v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerFundWithdrawInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerFundWithdrawInfo>(response));
            };
        },
        v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsCreatePost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundsList> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundsList>(response));
            };
        },
        v10ManagerFundsInvestmentAmountGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsInvestmentAmountGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<number>(response));
            };
        },
        v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerDashboard> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerDashboard>(response));
            };
        },
        v10ManagerPrograms2faConfirmPost(authorization: string, programId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerPrograms2faConfirmPost(authorization, programId, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerPrograms2faGetGet(authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TwoFactorAuthenticator> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerPrograms2faGetGet(authorization, programId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TwoFactorAuthenticator>(response));
            };
        },
        v10ManagerProgramsBrokerChangeCancelPost(authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsBrokerChangePost(authorization: string, request?: ChangeBrokerProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsBrokerChangePost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramInvestInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramInvestInfo>(response));
            };
        },
        v10ManagerProgramsByIdLevelsInfoGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramLevelInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdLevelsInfoGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramLevelInfo>(response));
            };
        },
        v10ManagerProgramsByIdPasswordChangePost(id: string, authorization: string, model?: ProgramPwdUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramWithdrawInfo> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerProgramWithdrawInfo>(response));
            };
        },
        v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: string, amount: number, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerProgramCreateResult> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsCreatePost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerProgramCreateResult>(response));
            };
        },
        v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, actionStatus?: string, dashboardActionStatus?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramsList>(response));
            };
        },
        v10ManagerProgramsInvestmentAmountGet(authorization: string, brokerTradingAccount?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramMinimumDeposit> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramMinimumDeposit>(response));
            };
        },
        v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, assetType?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramRequests> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramRequests>(response));
            };
        },
        v10ManagerSignalCreatePost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ManagerSignalEditPost(authorization: string, programId?: string, volumeFee?: number, successFee?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
    }
};

export class ManagerApi extends BaseAPI {
    public v10ManagerAssetsGet(
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerAssetsGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerByIdDetailsGet(
    id: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerByIdDetailsGet(id, init)(this.fetch, this.basePath);
    }

    public v10ManagerByIdGet(
    id: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerByIdGet(id, init)(this.fetch, this.basePath);
    }

    public v10ManagerEventsGet(
    authorization: string,
    options: {
        assetId?: string,
        from?: Date,
        to?: Date,
        type?: string,
        assetType?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        assetId,
	        from,
	        to,
	        type,
	        assetType,
	        skip,
	        take
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerEventsGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdAssetsUpdatePost(
    id: string,
    authorization: string,
    options: {
        assets?: Array<FundAssetPart>
    } = {},
    init?: RequestInit) {
	      const {
	        assets
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdAssetsUpdatePost(id, authorization, assets, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdClosePost(
    id: string,
    authorization: string,
    options: {
        twoFactorCode?: string
    } = {},
    init?: RequestInit) {
	      const {
	        twoFactorCode
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdClosePost(id, authorization, twoFactorCode, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdInvestByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdInvestInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdRequestsBySkipByTakeGet(
    id: string,
    skip: number,
    take: number,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdUpdatePost(
    id: string,
    authorization: string,
    options: {
        model?: ProgramUpdate
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdWithdrawByPercentPost(
    id: string,
    percent: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawByPercentPost(id, percent, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsCreatePost(
    authorization: string,
    options: {
        request?: NewFundRequest
    } = {},
    init?: RequestInit) {
	      const {
	        request
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsCreatePost(authorization, request, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsGet(
    authorization: string,
    options: {
        sorting?: string,
        from?: Date,
        to?: Date,
        chartPointsCount?: number,
        currencySecondary?: string,
        actionStatus?: string,
        dashboardActionStatus?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        from,
	        to,
	        chartPointsCount,
	        currencySecondary,
	        actionStatus,
	        dashboardActionStatus,
	        skip,
	        take
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerFundsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsInvestmentAmountGet(
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerFundsInvestmentAmountGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerFundsRequestsByIdCancelPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerFundsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerGet(
    authorization: string,
    options: {
        assetId?: string,
        from?: Date,
        to?: Date,
        type?: string,
        assetType?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        assetId,
	        from,
	        to,
	        type,
	        assetType,
	        skip,
	        take
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerGet(authorization, assetId, from, to, type, assetType, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ManagerPrograms2faConfirmPost(
    authorization: string,
    options: {
        programId?: string,
        code?: string
    } = {},
    init?: RequestInit) {
	      const {
	        programId,
	        code
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerPrograms2faConfirmPost(authorization, programId, code, init)(this.fetch, this.basePath);
    }

    public v10ManagerPrograms2faGetGet(
    authorization: string,
    options: {
        programId?: string
    } = {},
    init?: RequestInit) {
	      const {
	        programId
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerPrograms2faGetGet(authorization, programId, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsBrokerChangeCancelPost(
    authorization: string,
    options: {
        programId?: string
    } = {},
    init?: RequestInit) {
	      const {
	        programId
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsBrokerChangeCancelPost(authorization, programId, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsBrokerChangePost(
    authorization: string,
    options: {
        request?: ChangeBrokerProgramRequest
    } = {},
    init?: RequestInit) {
	      const {
	        request
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsBrokerChangePost(authorization, request, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdClosePost(
    id: string,
    authorization: string,
    options: {
        twoFactorCode?: string
    } = {},
    init?: RequestInit) {
	      const {
	        twoFactorCode
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdClosePost(id, authorization, twoFactorCode, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdInvestByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestByAmountPost(id, amount, authorization, currency, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdInvestInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdLevelsInfoGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdLevelsInfoGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdPasswordChangePost(
    id: string,
    authorization: string,
    options: {
        model?: ProgramPwdUpdate
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdPasswordChangePost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdPeriodClosePost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdPeriodClosePost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(
    id: string,
    skip: number,
    take: number,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdRequestsBySkipByTakeGet(id, skip, take, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdUpdatePost(
    id: string,
    authorization: string,
    options: {
        model?: ProgramUpdate
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdWithdrawByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(
    id: string,
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id, currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsByIdWithdrawMultiByAmountPost(
    id: string,
    amount: number,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsByIdWithdrawMultiByAmountPost(id, amount, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsCreatePost(
    authorization: string,
    options: {
        request?: NewProgramRequest
    } = {},
    init?: RequestInit) {
	      const {
	        request
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsCreatePost(authorization, request, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsGet(
    authorization: string,
    options: {
        sorting?: string,
        from?: Date,
        to?: Date,
        chartPointsCount?: number,
        currencySecondary?: string,
        actionStatus?: string,
        dashboardActionStatus?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        from,
	        to,
	        chartPointsCount,
	        currencySecondary,
	        actionStatus,
	        dashboardActionStatus,
	        skip,
	        take
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsGet(authorization, sorting, from, to, chartPointsCount, currencySecondary, actionStatus, dashboardActionStatus, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsInvestmentAmountGet(
    authorization: string,
    options: {
        brokerTradingAccount?: string
    } = {},
    init?: RequestInit) {
	      const {
	        brokerTradingAccount
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerProgramsInvestmentAmountGet(authorization, brokerTradingAccount, init)(this.fetch, this.basePath);
    }

    public v10ManagerProgramsRequestsByIdCancelPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ManagerApiFp(this.configuration).v10ManagerProgramsRequestsByIdCancelPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ManagerRequestsBySkipByTakeGet(
    skip: number,
    take: number,
    authorization: string,
    options: {
        assetType?: string
    } = {},
    init?: RequestInit) {
	      const {
	        assetType
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerRequestsBySkipByTakeGet(skip, take, authorization, assetType, init)(this.fetch, this.basePath);
    }

    public v10ManagerSignalCreatePost(
    authorization: string,
    options: {
        programId?: string,
        volumeFee?: number,
        successFee?: number
    } = {},
    init?: RequestInit) {
	      const {
	        programId,
	        volumeFee,
	        successFee
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerSignalCreatePost(authorization, programId, volumeFee, successFee, init)(this.fetch, this.basePath);
    }

    public v10ManagerSignalEditPost(
    authorization: string,
    options: {
        programId?: string,
        volumeFee?: number,
        successFee?: number
    } = {},
    init?: RequestInit) {
	      const {
	        programId,
	        volumeFee,
	        successFee
	      } = options;
        return ManagerApiFp(this.configuration).v10ManagerSignalEditPost(authorization, programId, volumeFee, successFee, init)(this.fetch, this.basePath);
    }

}


export const NotificationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10NotificationsByIdReadPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsByIdReadPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsByIdReadPost.');
            }
            const localVarPath = `/v1.0/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsGet(authorization: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsGet.');
            }
            const localVarPath = `/v1.0/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsNewGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsNewGet.');
            }
            const localVarPath = `/v1.0/notifications/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsAddPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (conditionType !== undefined) {
                localVarQueryParameter['ConditionType'] = conditionType;
            }

            if (conditionAmount !== undefined) {
                localVarQueryParameter['ConditionAmount'] = conditionAmount;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'enable' is not null or undefined
            if (enable === null || enable === undefined) {
                throw new RequiredError('enable','Required parameter enable was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsByIdByEnablePost.');
            }
            const localVarPath = `/v1.0/notifications/settings/{id}/{enable}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"enable"}}`, encodeURIComponent(String(enable)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsFundsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/funds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsGet.');
            }
            const localVarPath = `/v1.0/notifications/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsManagersByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/managers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/notifications/settings/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10NotificationsSettingsRemoveByIdPost.');
            }
            const localVarPath = `/v1.0/notifications/settings/remove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        v10NotificationsByIdReadPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsByIdReadPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10NotificationsGet(authorization: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsGet(authorization, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<NotificationList>(response));
            };
        },
        v10NotificationsNewGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsNewGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<number>(response));
            };
        },
        v10NotificationsSettingsAddPost(authorization: string, assetId?: string, managerId?: string, type?: string, conditionType?: string, conditionAmount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10NotificationsSettingsByIdByEnablePost(id: string, enable: boolean, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10NotificationsSettingsFundsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FundNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<FundNotificationSettingList>(response));
            };
        },
        v10NotificationsSettingsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<NotificationSettingList>(response));
            };
        },
        v10NotificationsSettingsManagersByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ManagerNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ManagerNotificationSettingList>(response));
            };
        },
        v10NotificationsSettingsProgramsByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramNotificationSettingList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramNotificationSettingList>(response));
            };
        },
        v10NotificationsSettingsRemoveByIdPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
    }
};

export class NotificationsApi extends BaseAPI {
    public v10NotificationsByIdReadPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsByIdReadPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsGet(
    authorization: string,
    options: {
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        skip,
	        take
	      } = options;
        return NotificationsApiFp(this.configuration).v10NotificationsGet(authorization, skip, take, init)(this.fetch, this.basePath);
    }

    public v10NotificationsNewGet(
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsNewGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsAddPost(
    authorization: string,
    options: {
        assetId?: string,
        managerId?: string,
        type?: string,
        conditionType?: string,
        conditionAmount?: number
    } = {},
    init?: RequestInit) {
	      const {
	        assetId,
	        managerId,
	        type,
	        conditionType,
	        conditionAmount
	      } = options;
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsAddPost(authorization, assetId, managerId, type, conditionType, conditionAmount, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsByIdByEnablePost(
    id: string,
    enable: boolean,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsByIdByEnablePost(id, enable, authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsFundsByIdGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsFundsByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsGet(
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsManagersByIdGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsManagersByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsProgramsByIdGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsProgramsByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10NotificationsSettingsRemoveByIdPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return NotificationsApiFp(this.configuration).v10NotificationsSettingsRemoveByIdPost(id, authorization, init)(this.fetch, this.basePath);
    }

}


export const PlatformApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10PlatformDatePost(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/date`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformInfoGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformLevelsGet(currency?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/levels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformLevelsParametersGet(currency?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/levels/parameters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformRiskcontrolGet(route: string, client?: string, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'route' is not null or undefined
            if (route === null || route === undefined) {
                throw new RequiredError('route','Required parameter route was null or undefined when calling v10PlatformRiskcontrolGet.');
            }
            const localVarPath = `/v1.0/platform/riskcontrol`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (route !== undefined) {
                localVarQueryParameter['Route'] = route;
            }

            if (client !== undefined) {
                localVarQueryParameter['Client'] = client;
            }

            if (version !== undefined) {
                localVarQueryParameter['Version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10PlatformStatisticGet(options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/platform/statistic`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const PlatformApiFp = function(configuration?: Configuration) {
    return {
        v10PlatformDatePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformDatePost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10PlatformInfoGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformInfo> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformInfoGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<PlatformInfo>(response));
            };
        },
        v10PlatformLevelsGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsLevelsInfo> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformLevelsGet(currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramsLevelsInfo>(response));
            };
        },
        v10PlatformLevelsParametersGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelsParamsInfo> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformLevelsParametersGet(currency, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<LevelsParamsInfo>(response));
            };
        },
        v10PlatformRiskcontrolGet(route: string, client?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CaptchaDetails> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformRiskcontrolGet(route, client, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<CaptchaDetails>(response));
            };
        },
        v10PlatformStatisticGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformStatistic> {
            const localVarFetchArgs = PlatformApiFetchParamCreator(configuration).v10PlatformStatisticGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<PlatformStatistic>(response));
            };
        },
    }
};

export class PlatformApi extends BaseAPI {
    public v10PlatformDatePost(
    init?: RequestInit) {
        return PlatformApiFp(this.configuration).v10PlatformDatePost(init)(this.fetch, this.basePath);
    }

    public v10PlatformInfoGet(
    init?: RequestInit) {
        return PlatformApiFp(this.configuration).v10PlatformInfoGet(init)(this.fetch, this.basePath);
    }

    public v10PlatformLevelsGet(
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return PlatformApiFp(this.configuration).v10PlatformLevelsGet(currency, init)(this.fetch, this.basePath);
    }

    public v10PlatformLevelsParametersGet(
    options: {
        currency?: string
    } = {},
    init?: RequestInit) {
	      const {
	        currency
	      } = options;
        return PlatformApiFp(this.configuration).v10PlatformLevelsParametersGet(currency, init)(this.fetch, this.basePath);
    }

    public v10PlatformRiskcontrolGet(
    route: string,
    options: {
        client?: string,
        version?: string
    } = {},
    init?: RequestInit) {
	      const {
	        client,
	        version
	      } = options;
        return PlatformApiFp(this.configuration).v10PlatformRiskcontrolGet(route, client, version, init)(this.fetch, this.basePath);
    }

    public v10PlatformStatisticGet(
    init?: RequestInit) {
        return PlatformApiFp(this.configuration).v10PlatformStatisticGet(init)(this.fetch, this.basePath);
    }

}


export const ProfileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10ProfileAvatarRemovePost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileAvatarRemovePost.');
            }
            const localVarPath = `/v1.0/profile/avatar/remove`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileAvatarUpdateByFileIdPost.');
            }
            const localVarPath = `/v1.0/profile/avatar/update/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileGet.');
            }
            const localVarPath = `/v1.0/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileHeaderGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileHeaderGet.');
            }
            const localVarPath = `/v1.0/profile/header`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfilePersonalUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/personal/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdatePersonalDetailViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfilePushTokenPost(authorization: string, token?: FcmTokenViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfilePushTokenPost.');
            }
            const localVarPath = `/v1.0/profile/push/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FcmTokenViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(token || {}) : (token || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileSociallinksGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileSociallinksGet.');
            }
            const localVarPath = `/v1.0/profile/sociallinks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileSociallinksUpdatePost(authorization: string, model?: UpdateSocialLinkViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileSociallinksUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/sociallinks/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateSocialLinkViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileUpdatePost.');
            }
            const localVarPath = `/v1.0/profile/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateProfileViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProfileVerificationTokenPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProfileVerificationTokenPost.');
            }
            const localVarPath = `/v1.0/profile/verification/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        v10ProfileAvatarRemovePost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarRemovePost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfileAvatarUpdateByFileIdPost(fileId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfileGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileFullViewModel> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProfileFullViewModel>(response));
            };
        },
        v10ProfileHeaderGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProfileHeaderViewModel> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileHeaderGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProfileHeaderViewModel>(response));
            };
        },
        v10ProfilePersonalUpdatePost(authorization: string, model?: UpdatePersonalDetailViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfilePersonalUpdatePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfilePushTokenPost(authorization: string, token?: FcmTokenViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfilePushTokenPost(authorization, token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfileSociallinksGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialLinksViewModel> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileSociallinksGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<SocialLinksViewModel>(response));
            };
        },
        v10ProfileSociallinksUpdatePost(authorization: string, model?: UpdateSocialLinkViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileSociallinksUpdatePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfileUpdatePost(authorization: string, model?: UpdateProfileViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileUpdatePost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProfileVerificationTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).v10ProfileVerificationTokenPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
    }
};

export class ProfileApi extends BaseAPI {
    public v10ProfileAvatarRemovePost(
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarRemovePost(authorization, init)(this.fetch, this.basePath);
    }

    public v10ProfileAvatarUpdateByFileIdPost(
    fileId: string,
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileAvatarUpdateByFileIdPost(fileId, authorization, init)(this.fetch, this.basePath);
    }

    public v10ProfileGet(
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ProfileHeaderGet(
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileHeaderGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ProfilePersonalUpdatePost(
    authorization: string,
    options: {
        model?: UpdatePersonalDetailViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ProfileApiFp(this.configuration).v10ProfilePersonalUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ProfilePushTokenPost(
    authorization: string,
    options: {
        token?: FcmTokenViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        token
	      } = options;
        return ProfileApiFp(this.configuration).v10ProfilePushTokenPost(authorization, token, init)(this.fetch, this.basePath);
    }

    public v10ProfileSociallinksGet(
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileSociallinksGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ProfileSociallinksUpdatePost(
    authorization: string,
    options: {
        model?: UpdateSocialLinkViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ProfileApiFp(this.configuration).v10ProfileSociallinksUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ProfileUpdatePost(
    authorization: string,
    options: {
        model?: UpdateProfileViewModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return ProfileApiFp(this.configuration).v10ProfileUpdatePost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10ProfileVerificationTokenPost(
    authorization: string,
    init?: RequestInit) {
        return ProfileApiFp(this.configuration).v10ProfileVerificationTokenPost(authorization, init)(this.fetch, this.basePath);
    }

}


export const ProgramsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdChartsBalanceGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdChartsProfitGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/charts/profit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (maxPointCount !== undefined) {
                localVarQueryParameter['MaxPointCount'] = maxPointCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteAddPost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdFavoriteRemovePost.');
            }
            const localVarPath = `/v1.0/programs/{id}/favorite/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdGet.');
            }
            const localVarPath = `/v1.0/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencySecondary !== undefined) {
                localVarQueryParameter['currencySecondary'] = currencySecondary;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsExportGet(id: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsExportGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }

            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsExportStatisticGet(id: string, authorization: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsExportStatisticGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdPeriodsExportStatisticGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods/export/statistic`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }

            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdPeriodsGet(id: string, authorization?: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdPeriodsGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/periods`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (numberMin !== undefined) {
                localVarQueryParameter['NumberMin'] = numberMin;
            }

            if (numberMax !== undefined) {
                localVarQueryParameter['NumberMax'] = numberMax;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdSubscribersGet(id: string, authorization: string, status?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdSubscribersGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsByIdSubscribersGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/subscribers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdTradesExportGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdTradesExportGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdTradesGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsByIdTradesOpenGet(id: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10ProgramsByIdTradesOpenGet.');
            }
            const localVarPath = `/v1.0/programs/{id}/trades/open`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, levelsSet?: Array<number>, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, tags?: Array<string>, isSignal?: boolean, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, status?: Array<string>, skip?: number, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (levelMin !== undefined) {
                localVarQueryParameter['LevelMin'] = levelMin;
            }

            if (levelMax !== undefined) {
                localVarQueryParameter['LevelMax'] = levelMax;
            }

            if (levelsSet) {
                localVarQueryParameter['LevelsSet'] = levelsSet;
            }

            if (profitAvgMin !== undefined) {
                localVarQueryParameter['ProfitAvgMin'] = profitAvgMin;
            }

            if (profitAvgMax !== undefined) {
                localVarQueryParameter['ProfitAvgMax'] = profitAvgMax;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (programCurrency !== undefined) {
                localVarQueryParameter['ProgramCurrency'] = programCurrency;
            }

            if (currencySecondary !== undefined) {
                localVarQueryParameter['CurrencySecondary'] = currencySecondary;
            }

            if (levelUpFrom !== undefined) {
                localVarQueryParameter['LevelUpFrom'] = levelUpFrom;
            }

            if (tags) {
                localVarQueryParameter['Tags'] = tags;
            }

            if (isSignal !== undefined) {
                localVarQueryParameter['IsSignal'] = isSignal;
            }

            if (statisticDateFrom !== undefined) {
                if (typeof statisticDateFrom === "string") {
                    localVarQueryParameter['StatisticDateFrom'] = statisticDateFrom;
                } else {
                    localVarQueryParameter['StatisticDateFrom'] = (statisticDateFrom as Date).toISOString();
                }
            }

            if (statisticDateTo !== undefined) {
                if (typeof statisticDateTo === "string") {
                    localVarQueryParameter['StatisticDateTo'] = statisticDateTo;
                } else {
                    localVarQueryParameter['StatisticDateTo'] = (statisticDateTo as Date).toISOString();
                }
            }

            if (chartPointsCount !== undefined) {
                localVarQueryParameter['ChartPointsCount'] = chartPointsCount;
            }

            if (mask !== undefined) {
                localVarQueryParameter['Mask'] = mask;
            }

            if (facetId !== undefined) {
                localVarQueryParameter['FacetId'] = facetId;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }

            if (isEnabled !== undefined) {
                localVarQueryParameter['IsEnabled'] = isEnabled;
            }

            if (hasInvestorsForAll !== undefined) {
                localVarQueryParameter['HasInvestorsForAll'] = hasInvestorsForAll;
            }

            if (hasInvestorsForClosed !== undefined) {
                localVarQueryParameter['HasInvestorsForClosed'] = hasInvestorsForClosed;
            }

            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (managerId !== undefined) {
                localVarQueryParameter['ManagerId'] = managerId;
            }

            if (programManagerId !== undefined) {
                localVarQueryParameter['ProgramManagerId'] = programManagerId;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsLevelupSummaryGet(authorization?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/programs/levelup/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10ProgramsSetsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10ProgramsSetsGet.');
            }
            const localVarPath = `/v1.0/programs/sets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const ProgramsApiFp = function(configuration?: Configuration) {
    return {
        v10ProgramsByIdChartsBalanceGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramBalanceChart> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramBalanceChart>(response));
            };
        },
        v10ProgramsByIdChartsProfitGet(id: string, dateFrom?: Date, dateTo?: Date, maxPointCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramProfitChart> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramProfitChart>(response));
            };
        },
        v10ProgramsByIdFavoriteAddPost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProgramsByIdFavoriteRemovePost(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10ProgramsByIdGet(id: string, authorization?: string, currencySecondary?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramDetailsFull> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramDetailsFull>(response));
            };
        },
        v10ProgramsByIdPeriodsExportGet(id: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10ProgramsByIdPeriodsExportStatisticGet(id: string, authorization: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10ProgramsByIdPeriodsGet(id: string, authorization?: string, dateFrom?: Date, dateTo?: Date, numberMin?: number, numberMax?: number, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramPeriodsViewModel> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramPeriodsViewModel>(response));
            };
        },
        v10ProgramsByIdSubscribersGet(id: string, authorization: string, status?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalProviderSubscribers> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<SignalProviderSubscribers>(response));
            };
        },
        v10ProgramsByIdTradesExportGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesExportGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<string>(response));
            };
        },
        v10ProgramsByIdTradesGet(id: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TradesViewModel>(response));
            };
        },
        v10ProgramsByIdTradesOpenGet(id: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesViewModel> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TradesViewModel>(response));
            };
        },
        v10ProgramsGet(authorization?: string, levelMin?: number, levelMax?: number, levelsSet?: Array<number>, profitAvgMin?: number, profitAvgMax?: number, sorting?: string, programCurrency?: string, currencySecondary?: string, levelUpFrom?: number, tags?: Array<string>, isSignal?: boolean, statisticDateFrom?: Date, statisticDateTo?: Date, chartPointsCount?: number, mask?: string, facetId?: string, isFavorite?: boolean, isEnabled?: boolean, hasInvestorsForAll?: boolean, hasInvestorsForClosed?: boolean, ids?: Array<string>, managerId?: string, programManagerId?: string, status?: Array<string>, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramsList> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramsList>(response));
            };
        },
        v10ProgramsLevelupSummaryGet(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LevelUpSummary> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsLevelupSummaryGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<LevelUpSummary>(response));
            };
        },
        v10ProgramsSetsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProgramSets> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).v10ProgramsSetsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<ProgramSets>(response));
            };
        },
    }
};

export class ProgramsApi extends BaseAPI {
    public v10ProgramsByIdChartsBalanceGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        maxPointCount?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        maxPointCount
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsBalanceGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdChartsProfitGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        maxPointCount?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        maxPointCount
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdChartsProfitGet(id, dateFrom, dateTo, maxPointCount, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdFavoriteAddPost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteAddPost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdFavoriteRemovePost(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return ProgramsApiFp(this.configuration).v10ProgramsByIdFavoriteRemovePost(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdGet(
    id: string,
    options: {
        authorization?: string,
        currencySecondary?: string
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        currencySecondary
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdGet(id, authorization, currencySecondary, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdPeriodsExportGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        numberMin?: number,
        numberMax?: number,
        status?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        numberMin,
	        numberMax,
	        status,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsExportGet(id, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdPeriodsExportStatisticGet(
    id: string,
    authorization: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        numberMin?: number,
        numberMax?: number,
        status?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        numberMin,
	        numberMax,
	        status,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsExportStatisticGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdPeriodsGet(
    id: string,
    options: {
        authorization?: string,
        dateFrom?: Date,
        dateTo?: Date,
        numberMin?: number,
        numberMax?: number,
        status?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        dateFrom,
	        dateTo,
	        numberMin,
	        numberMax,
	        status,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdPeriodsGet(id, authorization, dateFrom, dateTo, numberMin, numberMax, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdSubscribersGet(
    id: string,
    authorization: string,
    options: {
        status?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        status,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdSubscribersGet(id, authorization, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdTradesExportGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        symbol?: string,
        sorting?: string,
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        symbol,
	        sorting,
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesExportGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdTradesGet(
    id: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        symbol?: string,
        sorting?: string,
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        symbol,
	        sorting,
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesGet(id, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsByIdTradesOpenGet(
    id: string,
    options: {
        sorting?: string,
        symbol?: string,
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        symbol,
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsByIdTradesOpenGet(id, sorting, symbol, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsGet(
    options: {
        authorization?: string,
        levelMin?: number,
        levelMax?: number,
        levelsSet?: Array<number>,
        profitAvgMin?: number,
        profitAvgMax?: number,
        sorting?: string,
        programCurrency?: string,
        currencySecondary?: string,
        levelUpFrom?: number,
        tags?: Array<string>,
        isSignal?: boolean,
        statisticDateFrom?: Date,
        statisticDateTo?: Date,
        chartPointsCount?: number,
        mask?: string,
        facetId?: string,
        isFavorite?: boolean,
        isEnabled?: boolean,
        hasInvestorsForAll?: boolean,
        hasInvestorsForClosed?: boolean,
        ids?: Array<string>,
        managerId?: string,
        programManagerId?: string,
        status?: Array<string>,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        levelMin,
	        levelMax,
	        levelsSet,
	        profitAvgMin,
	        profitAvgMax,
	        sorting,
	        programCurrency,
	        currencySecondary,
	        levelUpFrom,
	        tags,
	        isSignal,
	        statisticDateFrom,
	        statisticDateTo,
	        chartPointsCount,
	        mask,
	        facetId,
	        isFavorite,
	        isEnabled,
	        hasInvestorsForAll,
	        hasInvestorsForClosed,
	        ids,
	        managerId,
	        programManagerId,
	        status,
	        skip,
	        take
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsGet(authorization, levelMin, levelMax, levelsSet, profitAvgMin, profitAvgMax, sorting, programCurrency, currencySecondary, levelUpFrom, tags, isSignal, statisticDateFrom, statisticDateTo, chartPointsCount, mask, facetId, isFavorite, isEnabled, hasInvestorsForAll, hasInvestorsForClosed, ids, managerId, programManagerId, status, skip, take, init)(this.fetch, this.basePath);
    }

    public v10ProgramsLevelupSummaryGet(
    options: {
        authorization?: string
    } = {},
    init?: RequestInit) {
	      const {
	        authorization
	      } = options;
        return ProgramsApiFp(this.configuration).v10ProgramsLevelupSummaryGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10ProgramsSetsGet(
    authorization: string,
    init?: RequestInit) {
        return ProgramsApiFp(this.configuration).v10ProgramsSetsGet(authorization, init)(this.fetch, this.basePath);
    }

}


export const RateApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options: any = {}): FetchArgs {
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange','Required parameter exchange was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling v10RateByExchangeByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{exchange}/{from}/{to}`
                .replace(`{${"exchange"}}`, encodeURIComponent(String(exchange)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10RateByFromByToGet(from: string, to: string, options: any = {}): FetchArgs {
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling v10RateByFromByToGet.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling v10RateByFromByToGet.');
            }
            const localVarPath = `/v1.0/rate/{from}/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10RateGet(from?: Array<string>, to?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/rate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from) {
                localVarQueryParameter['from'] = from;
            }

            if (to) {
                localVarQueryParameter['to'] = to;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const RateApiFp = function(configuration?: Configuration) {
    return {
        v10RateByExchangeByFromByToGet(exchange: string, from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByExchangeByFromByToGet(exchange, from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<number>(response));
            };
        },
        v10RateByFromByToGet(from: string, to: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateByFromByToGet(from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<number>(response));
            };
        },
        v10RateGet(from?: Array<string>, to?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatesModel> {
            const localVarFetchArgs = RateApiFetchParamCreator(configuration).v10RateGet(from, to, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<RatesModel>(response));
            };
        },
    }
};

export class RateApi extends BaseAPI {
    public v10RateByExchangeByFromByToGet(
    exchange: string,
    from: string,
    to: string,
    init?: RequestInit) {
        return RateApiFp(this.configuration).v10RateByExchangeByFromByToGet(exchange, from, to, init)(this.fetch, this.basePath);
    }

    public v10RateByFromByToGet(
    from: string,
    to: string,
    init?: RequestInit) {
        return RateApiFp(this.configuration).v10RateByFromByToGet(from, to, init)(this.fetch, this.basePath);
    }

    public v10RateGet(
    options: {
        from?: Array<string>,
        to?: Array<string>
    } = {},
    init?: RequestInit) {
	      const {
	        from,
	        to
	      } = options;
        return RateApiFp(this.configuration).v10RateGet(from, to, init)(this.fetch, this.basePath);
    }

}


export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10SearchGet(authorization?: string, mask?: string, take?: number, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mask !== undefined) {
                localVarQueryParameter['mask'] = mask;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const SearchApiFp = function(configuration?: Configuration) {
    return {
        v10SearchGet(authorization?: string, mask?: string, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchViewModel> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).v10SearchGet(authorization, mask, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<SearchViewModel>(response));
            };
        },
    }
};

export class SearchApi extends BaseAPI {
    public v10SearchGet(
    options: {
        authorization?: string,
        mask?: string,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        authorization,
	        mask,
	        take
	      } = options;
        return SearchApiFp(this.configuration).v10SearchGet(authorization, mask, take, init)(this.fetch, this.basePath);
    }

}


export const SignalApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10SignalAccountsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalAccountsGet.');
            }
            const localVarPath = `/v1.0/signal/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalAttachByIdInfoGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10SignalAttachByIdInfoGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalAttachByIdInfoGet.');
            }
            const localVarPath = `/v1.0/signal/attach/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalAttachByIdPost(id: string, authorization: string, model?: AttachToSignalProvider, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10SignalAttachByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalAttachByIdPost.');
            }
            const localVarPath = `/v1.0/signal/attach/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AttachToSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalByIdUpdatePost(id: string, authorization: string, model?: AttachToSignalProvider, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10SignalByIdUpdatePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalByIdUpdatePost.');
            }
            const localVarPath = `/v1.0/signal/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AttachToSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalDetachByIdPost(id: string, authorization: string, model?: DetachFromSignalProvider, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10SignalDetachByIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalDetachByIdPost.');
            }
            const localVarPath = `/v1.0/signal/detach/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DetachFromSignalProvider" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesByIdClosePost(id: string, authorization: string, programId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10SignalTradesByIdClosePost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalTradesByIdClosePost.');
            }
            const localVarPath = `/v1.0/signal/trades/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['programId'] = programId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesGet(authorization: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalTradesGet.');
            }
            const localVarPath = `/v1.0/signal/trades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                if (typeof dateFrom === "string") {
                    localVarQueryParameter['DateFrom'] = dateFrom;
                } else {
                    localVarQueryParameter['DateFrom'] = (dateFrom as Date).toISOString();
                }
            }

            if (dateTo !== undefined) {
                if (typeof dateTo === "string") {
                    localVarQueryParameter['DateTo'] = dateTo;
                } else {
                    localVarQueryParameter['DateTo'] = (dateTo as Date).toISOString();
                }
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesLogGet(authorization: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalTradesLogGet.');
            }
            const localVarPath = `/v1.0/signal/trades/log`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10SignalTradesOpenGet(authorization: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10SignalTradesOpenGet.');
            }
            const localVarPath = `/v1.0/signal/trades/open`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['Symbol'] = symbol;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['AccountId'] = accountId;
            }

            if (accountCurrency !== undefined) {
                localVarQueryParameter['AccountCurrency'] = accountCurrency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const SignalApiFp = function(configuration?: Configuration) {
    return {
        v10SignalAccountsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CopyTradingAccountsList> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAccountsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<CopyTradingAccountsList>(response));
            };
        },
        v10SignalAttachByIdInfoGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AttachToSignalProviderInfo> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAttachByIdInfoGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<AttachToSignalProviderInfo>(response));
            };
        },
        v10SignalAttachByIdPost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalAttachByIdPost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10SignalByIdUpdatePost(id: string, authorization: string, model?: AttachToSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalByIdUpdatePost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10SignalDetachByIdPost(id: string, authorization: string, model?: DetachFromSignalProvider, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalDetachByIdPost(id, authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10SignalTradesByIdClosePost(id: string, authorization: string, programId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesByIdClosePost(id, authorization, programId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10SignalTradesGet(authorization: string, dateFrom?: Date, dateTo?: Date, symbol?: string, sorting?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesSignalViewModel> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TradesSignalViewModel>(response));
            };
        },
        v10SignalTradesLogGet(authorization: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignalTradingEvents> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<SignalTradingEvents>(response));
            };
        },
        v10SignalTradesOpenGet(authorization: string, sorting?: string, symbol?: string, accountId?: string, accountCurrency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradesSignalViewModel> {
            const localVarFetchArgs = SignalApiFetchParamCreator(configuration).v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TradesSignalViewModel>(response));
            };
        },
    }
};

export class SignalApi extends BaseAPI {
    public v10SignalAccountsGet(
    authorization: string,
    init?: RequestInit) {
        return SignalApiFp(this.configuration).v10SignalAccountsGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10SignalAttachByIdInfoGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return SignalApiFp(this.configuration).v10SignalAttachByIdInfoGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10SignalAttachByIdPost(
    id: string,
    authorization: string,
    options: {
        model?: AttachToSignalProvider
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return SignalApiFp(this.configuration).v10SignalAttachByIdPost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10SignalByIdUpdatePost(
    id: string,
    authorization: string,
    options: {
        model?: AttachToSignalProvider
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return SignalApiFp(this.configuration).v10SignalByIdUpdatePost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10SignalDetachByIdPost(
    id: string,
    authorization: string,
    options: {
        model?: DetachFromSignalProvider
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return SignalApiFp(this.configuration).v10SignalDetachByIdPost(id, authorization, model, init)(this.fetch, this.basePath);
    }

    public v10SignalTradesByIdClosePost(
    id: string,
    authorization: string,
    options: {
        programId?: string
    } = {},
    init?: RequestInit) {
	      const {
	        programId
	      } = options;
        return SignalApiFp(this.configuration).v10SignalTradesByIdClosePost(id, authorization, programId, init)(this.fetch, this.basePath);
    }

    public v10SignalTradesGet(
    authorization: string,
    options: {
        dateFrom?: Date,
        dateTo?: Date,
        symbol?: string,
        sorting?: string,
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        dateFrom,
	        dateTo,
	        symbol,
	        sorting,
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return SignalApiFp(this.configuration).v10SignalTradesGet(authorization, dateFrom, dateTo, symbol, sorting, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10SignalTradesLogGet(
    authorization: string,
    options: {
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return SignalApiFp(this.configuration).v10SignalTradesLogGet(authorization, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10SignalTradesOpenGet(
    authorization: string,
    options: {
        sorting?: string,
        symbol?: string,
        accountId?: string,
        accountCurrency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        sorting,
	        symbol,
	        accountId,
	        accountCurrency,
	        skip,
	        take
	      } = options;
        return SignalApiFp(this.configuration).v10SignalTradesOpenGet(authorization, sorting, symbol, accountId, accountCurrency, skip, take, init)(this.fetch, this.basePath);
    }

}


export const WalletApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        v10WalletAddressesByCurrencyGet(currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10WalletAddressesByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletAddressesByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/addresses/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletAddressesGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletAddressesGet.');
            }
            const localVarPath = `/v1.0/wallet/addresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletByCurrencyGet(currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10WalletByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletFeeGvtholdingGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletFeeGvtholdingGet.');
            }
            const localVarPath = `/v1.0/wallet/fee/gvtholding`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiByCurrencyAvailableGet(currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10WalletMultiByCurrencyAvailableGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletMultiByCurrencyAvailableGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/{currency}/available`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiByCurrencyGet(currency: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling v10WalletMultiByCurrencyGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletMultiByCurrencyGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiTransactionsExternalGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletMultiTransactionsExternalGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/transactions/external`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (currency !== undefined) {
                localVarQueryParameter['Currency'] = currency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletMultiTransactionsGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletMultiTransactionsGet.');
            }
            const localVarPath = `/v1.0/wallet/multi/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (currency !== undefined) {
                localVarQueryParameter['Currency'] = currency;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletPaygvtfeeOffPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletPaygvtfeeOffPost.');
            }
            const localVarPath = `/v1.0/wallet/paygvtfee/off`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletPaygvtfeeOnPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletPaygvtfeeOnPost.');
            }
            const localVarPath = `/v1.0/wallet/paygvtfee/on`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransactionByIdGet(id: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling v10WalletTransactionByIdGet.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletTransactionByIdGet.');
            }
            const localVarPath = `/v1.0/wallet/transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, wallet?: string, skip?: number, take?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletTransactionsGet.');
            }
            const localVarPath = `/v1.0/wallet/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['AssetId'] = assetId;
            }

            if (from !== undefined) {
                if (typeof from === "string") {
                    localVarQueryParameter['From'] = from;
                } else {
                    localVarQueryParameter['From'] = (from as Date).toISOString();
                }
            }

            if (to !== undefined) {
                if (typeof to === "string") {
                    localVarQueryParameter['To'] = to;
                } else {
                    localVarQueryParameter['To'] = (to as Date).toISOString();
                }
            }

            if (assetType !== undefined) {
                localVarQueryParameter['AssetType'] = assetType;
            }

            if (txAction !== undefined) {
                localVarQueryParameter['TxAction'] = txAction;
            }

            if (wallet !== undefined) {
                localVarQueryParameter['Wallet'] = wallet;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletTransferPost(authorization: string, request?: InternalTransferRequest, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletTransferPost.');
            }
            const localVarPath = `/v1.0/wallet/transfer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InternalTransferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawInfoGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawInfoGet.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestCancelByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/cancel/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1.0/wallet/withdraw/request/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestNewPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateWithdrawalRequestModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling v10WalletWithdrawRequestResendByTxIdPost.');
            }
            const localVarPath = `/v1.0/wallet/withdraw/request/resend/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export const WalletApiFp = function(configuration?: Configuration) {
    return {
        v10WalletAddressesByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletInfo> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletAddressesByCurrencyGet(currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletInfo>(response));
            };
        },
        v10WalletAddressesGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletsInfo> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletAddressesGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletsInfo>(response));
            };
        },
        v10WalletByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletSummary> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletByCurrencyGet(currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletSummary>(response));
            };
        },
        v10WalletFeeGvtholdingGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserCommissionData> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletFeeGvtholdingGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<UserCommissionData>(response));
            };
        },
        v10WalletMultiByCurrencyAvailableGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletMultiAvailable> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiByCurrencyAvailableGet(currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletMultiAvailable>(response));
            };
        },
        v10WalletMultiByCurrencyGet(currency: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletMultiSummary> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiByCurrencyGet(currency, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletMultiSummary>(response));
            };
        },
        v10WalletMultiTransactionsExternalGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MultiWalletExternalTransactionsViewModel> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<MultiWalletExternalTransactionsViewModel>(response));
            };
        },
        v10WalletMultiTransactionsGet(authorization: string, from?: Date, to?: Date, type?: string, currency?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MultiWalletTransactionsViewModel> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<MultiWalletTransactionsViewModel>(response));
            };
        },
        v10WalletPaygvtfeeOffPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletPaygvtfeeOffPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletPaygvtfeeOnPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletPaygvtfeeOnPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletTransactionByIdGet(id: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionDetails> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionByIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<TransactionDetails>(response));
            };
        },
        v10WalletTransactionsGet(authorization: string, assetId?: string, from?: Date, to?: Date, assetType?: string, txAction?: string, wallet?: string, skip?: number, take?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WalletTransactionsViewModel> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WalletTransactionsViewModel>(response));
            };
        },
        v10WalletTransferPost(authorization: string, request?: InternalTransferRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletTransferPost(authorization, request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletWithdrawInfoGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WithdrawalSummary> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawInfoGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<WithdrawalSummary>(response));
            };
        },
        v10WalletWithdrawRequestCancelByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletWithdrawRequestConfirmPost(requestId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletWithdrawRequestNewPost(authorization: string, model?: CreateWithdrawalRequestModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestNewPost(authorization, model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
        v10WalletWithdrawRequestResendByTxIdPost(txId: string, authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<void> {
            const localVarFetchArgs = WalletApiFetchParamCreator(configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => formatResponse<void>(response));
            };
        },
    }
};

export class WalletApi extends BaseAPI {
    public v10WalletAddressesByCurrencyGet(
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletAddressesByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletAddressesGet(
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletAddressesGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletByCurrencyGet(
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletFeeGvtholdingGet(
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletFeeGvtholdingGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletMultiByCurrencyAvailableGet(
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletMultiByCurrencyAvailableGet(currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletMultiByCurrencyGet(
    currency: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletMultiByCurrencyGet(currency, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletMultiTransactionsExternalGet(
    authorization: string,
    options: {
        from?: Date,
        to?: Date,
        type?: string,
        currency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        from,
	        to,
	        type,
	        currency,
	        skip,
	        take
	      } = options;
        return WalletApiFp(this.configuration).v10WalletMultiTransactionsExternalGet(authorization, from, to, type, currency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10WalletMultiTransactionsGet(
    authorization: string,
    options: {
        from?: Date,
        to?: Date,
        type?: string,
        currency?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        from,
	        to,
	        type,
	        currency,
	        skip,
	        take
	      } = options;
        return WalletApiFp(this.configuration).v10WalletMultiTransactionsGet(authorization, from, to, type, currency, skip, take, init)(this.fetch, this.basePath);
    }

    public v10WalletPaygvtfeeOffPost(
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletPaygvtfeeOffPost(authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletPaygvtfeeOnPost(
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletPaygvtfeeOnPost(authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletTransactionByIdGet(
    id: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletTransactionByIdGet(id, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletTransactionsGet(
    authorization: string,
    options: {
        assetId?: string,
        from?: Date,
        to?: Date,
        assetType?: string,
        txAction?: string,
        wallet?: string,
        skip?: number,
        take?: number
    } = {},
    init?: RequestInit) {
	      const {
	        assetId,
	        from,
	        to,
	        assetType,
	        txAction,
	        wallet,
	        skip,
	        take
	      } = options;
        return WalletApiFp(this.configuration).v10WalletTransactionsGet(authorization, assetId, from, to, assetType, txAction, wallet, skip, take, init)(this.fetch, this.basePath);
    }

    public v10WalletTransferPost(
    authorization: string,
    options: {
        request?: InternalTransferRequest
    } = {},
    init?: RequestInit) {
	      const {
	        request
	      } = options;
        return WalletApiFp(this.configuration).v10WalletTransferPost(authorization, request, init)(this.fetch, this.basePath);
    }

    public v10WalletWithdrawInfoGet(
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletWithdrawInfoGet(authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletWithdrawRequestCancelByTxIdPost(
    txId: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestCancelByTxIdPost(txId, authorization, init)(this.fetch, this.basePath);
    }

    public v10WalletWithdrawRequestConfirmPost(
    options: {
        requestId?: string,
        code?: string
    } = {},
    init?: RequestInit) {
	      const {
	        requestId,
	        code
	      } = options;
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestConfirmPost(requestId, code, init)(this.fetch, this.basePath);
    }

    public v10WalletWithdrawRequestNewPost(
    authorization: string,
    options: {
        model?: CreateWithdrawalRequestModel
    } = {},
    init?: RequestInit) {
	      const {
	        model
	      } = options;
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestNewPost(authorization, model, init)(this.fetch, this.basePath);
    }

    public v10WalletWithdrawRequestResendByTxIdPost(
    txId: string,
    authorization: string,
    init?: RequestInit) {
        return WalletApiFp(this.configuration).v10WalletWithdrawRequestResendByTxIdPost(txId, authorization, init)(this.fetch, this.basePath);
    }

}

