/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorViewModel from '../model/ErrorViewModel';
import FundNotificationSettingList from '../model/FundNotificationSettingList';
import ManagerNotificationSettingList from '../model/ManagerNotificationSettingList';
import NotificationList from '../model/NotificationList';
import NotificationSettingList from '../model/NotificationSettingList';
import ProgramNotificationSettingList from '../model/ProgramNotificationSettingList';

/**
* Notifications service.
* @class NotificationsApi
* @version v1.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @function NotificationsApi#constructor
    * @param {ApiClient} apiClient Optional API client implementation to use,
    * @return {NotificationsApi}
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


      addNotificationsSettingsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addNotificationsSettings");
      }


      let pathParams = {
      };
      let queryParams = {
        'AssetId': opts['assetId'],
        'ManagerId': opts['managerId'],
        'Type': opts['type'],
        'ConditionType': opts['conditionType'],
        'ConditionAmount': opts['conditionAmount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add new setting
     * @function NotificationsApi#addNotificationsSettings
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {String} [opts.assetId] 
     * @param {String} [opts.managerId] 
     * @param {String} [opts.type] 
     * @param {String} [opts.conditionType] 
     * @param {Number} [opts.conditionAmount] 
     * @return {CancelablePromise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      addNotificationsSettings(authorization, opts) {
      return this.addNotificationsSettingsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNewNotificationsCountWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNewNotificationsCount");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/v1.0/notifications/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unread notifications count
     * @function NotificationsApi#getNewNotificationsCount
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<'Number'>} a Promise, with an object containing data of type 'Number' and HTTP response
     */
      getNewNotificationsCount(authorization) {
      return this.getNewNotificationsCountWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNotificationsWithHttpInfo(authorization, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNotifications");
      }


      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = NotificationList;

      return this.apiClient.callApi(
        '/v1.0/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * User notifications
     * @function NotificationsApi#getNotifications
     * @param {String} authorization JWT access token
     * @param {Object} [opts] Optional parameters
     * @param {Number} [opts.skip] 
     * @param {Number} [opts.take] 
     * @return {CancelablePromise<NotificationList>} a Promise, with an object containing data of type NotificationList and HTTP response
     */
      getNotifications(authorization, opts) {
      return this.getNotificationsWithHttpInfo(authorization, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNotificationsFundSettingsWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotificationsFundSettings");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNotificationsFundSettings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FundNotificationSettingList;

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/funds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * User settings for fund
     * @function NotificationsApi#getNotificationsFundSettings
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<FundNotificationSettingList>} a Promise, with an object containing data of type FundNotificationSettingList and HTTP response
     */
      getNotificationsFundSettings(id, authorization) {
      return this.getNotificationsFundSettingsWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNotificationsManagerSettingsWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotificationsManagerSettings");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNotificationsManagerSettings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ManagerNotificationSettingList;

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * User settings for manager
     * @function NotificationsApi#getNotificationsManagerSettings
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ManagerNotificationSettingList>} a Promise, with an object containing data of type ManagerNotificationSettingList and HTTP response
     */
      getNotificationsManagerSettings(id, authorization) {
      return this.getNotificationsManagerSettingsWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNotificationsProgramSettingsWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotificationsProgramSettings");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNotificationsProgramSettings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ProgramNotificationSettingList;

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/programs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * User settings for program
     * @function NotificationsApi#getNotificationsProgramSettings
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<ProgramNotificationSettingList>} a Promise, with an object containing data of type ProgramNotificationSettingList and HTTP response
     */
      getNotificationsProgramSettings(id, authorization) {
      return this.getNotificationsProgramSettingsWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      getNotificationsSettingsWithHttpInfo(authorization) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getNotificationsSettings");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = NotificationSettingList;

      return this.apiClient.callApi(
        '/v1.0/notifications/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * User settings
     * @function NotificationsApi#getNotificationsSettings
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<NotificationSettingList>} a Promise, with an object containing data of type NotificationSettingList and HTTP response
     */
      getNotificationsSettings(authorization) {
      return this.getNotificationsSettingsWithHttpInfo(authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      readNotificationWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readNotification");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling readNotification");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/notifications/{id}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read notification
     * @function NotificationsApi#readNotification
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      readNotification(id, authorization) {
      return this.readNotificationWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      removeNotificationsSettingsWithHttpInfo(id, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeNotificationsSettings");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeNotificationsSettings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/remove/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove setting
     * @function NotificationsApi#removeNotificationsSettings
     * @param {String} id 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<any>} a Promise, with an object containing HTTP response
     */
      removeNotificationsSettings(id, authorization) {
      return this.removeNotificationsSettingsWithHttpInfo(id, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

      toggleNotificationSettingsWithHttpInfo(id, enable, authorization) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toggleNotificationSettings");
      }

      // verify the required parameter 'enable' is set
      if (enable === undefined || enable === null) {
        throw new Error("Missing the required parameter 'enable' when calling toggleNotificationSettings");
      }

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling toggleNotificationSettings");
      }


      let pathParams = {
        'id': id,
        'enable': enable
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v1.0/notifications/settings/{id}/{enable}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable/disable setting
     * @function NotificationsApi#toggleNotificationSettings
     * @param {String} id 
     * @param {Boolean} enable 
     * @param {String} authorization JWT access token
     * @return {CancelablePromise<'String'>} a Promise, with an object containing data of type 'String' and HTTP response
     */
      toggleNotificationSettings(id, enable, authorization) {
      return this.toggleNotificationSettingsWithHttpInfo(id, enable, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
