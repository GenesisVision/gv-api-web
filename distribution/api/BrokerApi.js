'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ore API v2
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: v2.0


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BrokerInitData = require('../model/BrokerInitData');

var _BrokerInitData2 = _interopRequireDefault(_BrokerInitData);

var _BrokerOefInitData = require('../model/BrokerOefInitData');

var _BrokerOefInitData2 = _interopRequireDefault(_BrokerOefInitData);

var _ChangePasswordViewModel = require('../model/ChangePasswordViewModel');

var _ChangePasswordViewModel2 = _interopRequireDefault(_ChangePasswordViewModel);

var _ClosePeriodData = require('../model/ClosePeriodData');

var _ClosePeriodData2 = _interopRequireDefault(_ClosePeriodData);

var _ErrorViewModel = require('../model/ErrorViewModel');

var _ErrorViewModel2 = _interopRequireDefault(_ErrorViewModel);

var _InvestmentProgramAccrual = require('../model/InvestmentProgramAccrual');

var _InvestmentProgramAccrual2 = _interopRequireDefault(_InvestmentProgramAccrual);

var _LoginViewModel = require('../model/LoginViewModel');

var _LoginViewModel2 = _interopRequireDefault(_LoginViewModel);

var _ManagerAccountOnlineInfo = require('../model/ManagerAccountOnlineInfo');

var _ManagerAccountOnlineInfo2 = _interopRequireDefault(_ManagerAccountOnlineInfo);

var _ManagerHistoryIpfsHash = require('../model/ManagerHistoryIpfsHash');

var _ManagerHistoryIpfsHash2 = _interopRequireDefault(_ManagerHistoryIpfsHash);

var _NewManager = require('../model/NewManager');

var _NewManager2 = _interopRequireDefault(_NewManager);

var _NewTradeEvent = require('../model/NewTradeEvent');

var _NewTradeEvent2 = _interopRequireDefault(_NewTradeEvent);

var _StartValues = require('../model/StartValues');

var _StartValues2 = _interopRequireDefault(_StartValues);

var _UsersRealAssets = require('../model/UsersRealAssets');

var _UsersRealAssets2 = _interopRequireDefault(_UsersRealAssets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Broker service.
* @module api/BrokerApi
* @version v2.0
*/
var BrokerApi = function () {

  /**
  * Constructs a new BrokerApi. 
  * @alias module:api/BrokerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function BrokerApi(apiClient) {
    _classCallCheck(this, BrokerApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Create manager
   * @param {String} authorization JWT access token
   * @param {Object} opts Optional parameters
   * @param {module:model/NewManager} opts.request 
   * @param {String} opts.apiVersion 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
   */


  _createClass(BrokerApi, [{
    key: 'apiBrokerAccountCreatePostWithHttpInfo',
    value: function apiBrokerAccountCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountCreatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/account/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewManager} opts.request 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAccountCreatePost',
    value: function apiBrokerAccountCreatePost(authorization, opts) {
      return this.apiBrokerAccountCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAccountOefCreatePostWithHttpInfo',
    value: function apiBrokerAccountOefCreatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAccountOefCreatePost");
      }

      var pathParams = {};
      var queryParams = {
        'requestId': opts['requestId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/account/oef/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create OEF manager
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAccountOefCreatePost',
    value: function apiBrokerAccountOefCreatePost(authorization, opts) {
      return this.apiBrokerAccountOefCreatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerAuthChangePasswordPostWithHttpInfo',
    value: function apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthChangePasswordPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/auth/changePassword', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Change password
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerAuthChangePasswordPost',
    value: function apiBrokerAuthChangePasswordPost(authorization, opts) {
      return this.apiBrokerAuthChangePasswordPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthConfirmEmailPostWithHttpInfo',
    value: function apiBrokerAuthConfirmEmailPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/confirmEmail', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Confirm email after registration
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthConfirmEmailPost',
    value: function apiBrokerAuthConfirmEmailPost(opts) {
      return this.apiBrokerAuthConfirmEmailPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthSignInPostWithHttpInfo',
    value: function apiBrokerAuthSignInPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['model'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/signIn', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Authorize
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthSignInPost',
    value: function apiBrokerAuthSignInPost(opts) {
      return this.apiBrokerAuthSignInPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerAuthUpdateTokenGetWithHttpInfo',
    value: function apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerAuthUpdateTokenGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/auth/updateToken', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update auth token
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerAuthUpdateTokenGet',
    value: function apiBrokerAuthUpdateTokenGet(authorization, opts) {
      return this.apiBrokerAuthUpdateTokenGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */

  }, {
    key: 'apiBrokerFreeaddressesGetWithHttpInfo',
    value: function apiBrokerFreeaddressesGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerFreeaddressesGet");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ['String'];

      return this.apiClient.callApi('/api/broker/freeaddresses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */

  }, {
    key: 'apiBrokerFreeaddressesGet',
    value: function apiBrokerFreeaddressesGet(authorization, opts) {
      return this.apiBrokerFreeaddressesGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerInitData} and HTTP response
     */

  }, {
    key: 'apiBrokerInitDataGetWithHttpInfo',
    value: function apiBrokerInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerInitDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokerInitData2.default;

      return this.apiClient.callApi('/api/broker/initData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get broker initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerInitData}
     */

  }, {
    key: 'apiBrokerInitDataGet',
    value: function apiBrokerInitDataGet(authorization, opts) {
      return this.apiBrokerInitDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo',
    value: function apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accounts'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerManagersAccountsOnlineInfoUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/managersAccounts/onlineInfo/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Upload accounts online info
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ManagerAccountOnlineInfo>} opts.accounts 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerManagersAccountsOnlineInfoUpdatePost',
    value: function apiBrokerManagersAccountsOnlineInfoUpdatePost(authorization, opts) {
      return this.apiBrokerManagersAccountsOnlineInfoUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersRealAssets} and HTTP response
     */

  }, {
    key: 'apiBrokerOefGetRealAssetsGetWithHttpInfo',
    value: function apiBrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefGetRealAssetsGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _UsersRealAssets2.default;

      return this.apiClient.callApi('/api/broker/oef/getRealAssets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get real assets distribution for broker&#39;s clients
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersRealAssets}
     */

  }, {
    key: 'apiBrokerOefGetRealAssetsGet',
    value: function apiBrokerOefGetRealAssetsGet(authorization, opts) {
      return this.apiBrokerOefGetRealAssetsGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrokerOefInitData} and HTTP response
     */

  }, {
    key: 'apiBrokerOefInitDataGetWithHttpInfo',
    value: function apiBrokerOefInitDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefInitDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _BrokerOefInitData2.default;

      return this.apiClient.callApi('/api/broker/oef/initData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get broker OEF initial data
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrokerOefInitData}
     */

  }, {
    key: 'apiBrokerOefInitDataGet',
    value: function apiBrokerOefInitDataGet(authorization, opts) {
      return this.apiBrokerOefInitDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerOefSetRealAssetsPostWithHttpInfo',
    value: function apiBrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['assets'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerOefSetRealAssetsPost");
      }

      var pathParams = {};
      var queryParams = {
        'brokerTradeServerId': opts['brokerTradeServerId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/oef/setRealAssets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update real assets distribution
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.brokerTradeServerId 
     * @param {module:model/UsersRealAssets} opts.assets 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerOefSetRealAssetsPost',
    value: function apiBrokerOefSetRealAssetsPost(authorization, opts) {
      return this.apiBrokerOefSetRealAssetsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodAccrueProfitsPostWithHttpInfo',
    value: function apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['accrual'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodAccrueProfitsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/accrueProfits', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Accrue investors&#39; profits
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestmentProgramAccrual} opts.accrual 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodAccrueProfitsPost',
    value: function apiBrokerPeriodAccrueProfitsPost(authorization, opts) {
      return this.apiBrokerPeriodAccrueProfitsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodClosePostWithHttpInfo',
    value: function apiBrokerPeriodClosePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodClosePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'currentBalance': opts['currentBalance']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/close', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.currentBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodClosePost',
    value: function apiBrokerPeriodClosePost(authorization, opts) {
      return this.apiBrokerPeriodClosePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodOefApplyAssetPartsPostWithHttpInfo',
    value: function apiBrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefApplyAssetPartsPost");
      }

      var pathParams = {};
      var queryParams = {
        'assetsRequestId': opts['assetsRequestId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/oef/applyAssetParts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Apply new requested assets parts
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetsRequestId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodOefApplyAssetPartsPost',
    value: function apiBrokerPeriodOefApplyAssetPartsPost(authorization, opts) {
      return this.apiBrokerPeriodOefApplyAssetPartsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodOefProcessClosingProgramPostWithHttpInfo',
    value: function apiBrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefProcessClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/oef/processClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodOefProcessClosingProgramPost',
    value: function apiBrokerPeriodOefProcessClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodOefProcessClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo',
    value: function apiBrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodOefProcessForceClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/oef/processForceClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Force close OEF investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodOefProcessForceClosingProgramPost',
    value: function apiBrokerPeriodOefProcessForceClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodOefProcessForceClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodProcessClosingProgramPostWithHttpInfo',
    value: function apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessClosingProgramPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'managerBalance': opts['managerBalance']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/processClosingProgram', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Close investment program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.managerBalance 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodProcessClosingProgramPost',
    value: function apiBrokerPeriodProcessClosingProgramPost(authorization, opts) {
      return this.apiBrokerPeriodProcessClosingProgramPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */

  }, {
    key: 'apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo',
    value: function apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodProcessInvestmentRequestsPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = 'String';

      return this.apiClient.callApi('/api/broker/period/processInvestmentRequests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Process investment requests
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */

  }, {
    key: 'apiBrokerPeriodProcessInvestmentRequestsPost',
    value: function apiBrokerPeriodProcessInvestmentRequestsPost(authorization, opts) {
      return this.apiBrokerPeriodProcessInvestmentRequestsPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo',
    value: function apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodReevaluateManagerTokenPost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'investorLossShare': opts['investorLossShare']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/reevaluateManagerToken', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager token initial price/total supply after loss
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Number} opts.investorLossShare 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodReevaluateManagerTokenPost',
    value: function apiBrokerPeriodReevaluateManagerTokenPost(authorization, opts) {
      return this.apiBrokerPeriodReevaluateManagerTokenPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodSetStartValuesPostWithHttpInfo',
    value: function apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['model'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodSetStartValuesPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/setStartValues', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Set investment period start balance, manager share, manager balance
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/StartValues} opts.model 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodSetStartValuesPost',
    value: function apiBrokerPeriodSetStartValuesPost(authorization, opts) {
      return this.apiBrokerPeriodSetStartValuesPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerPeriodTerminatePostWithHttpInfo',
    value: function apiBrokerPeriodTerminatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodTerminatePost");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/period/terminate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Terminate program
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerPeriodTerminatePost',
    value: function apiBrokerPeriodTerminatePost(authorization, opts) {
      return this.apiBrokerPeriodTerminatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosePeriodData} and HTTP response
     */

  }, {
    key: 'apiBrokerPeriodlosingDataGetWithHttpInfo',
    value: function apiBrokerPeriodlosingDataGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerPeriodlosingDataGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _ClosePeriodData2.default;

      return this.apiClient.callApi('/api/broker/period/сlosingData', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get data for closing investment period
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosePeriodData}
     */

  }, {
    key: 'apiBrokerPeriodlosingDataGet',
    value: function apiBrokerPeriodlosingDataGet(authorization, opts) {
      return this.apiBrokerPeriodlosingDataGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */

  }, {
    key: 'apiBrokerTradehistoryGetWithHttpInfo',
    value: function apiBrokerTradehistoryGetWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradehistoryGet");
      }

      var pathParams = {};
      var queryParams = {
        'investmentProgramId': opts['investmentProgramId'],
        'start': opts['start'],
        'end': opts['end']
      };
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = ['String'];

      return this.apiClient.callApi('/api/broker/tradehistory', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.investmentProgramId 
     * @param {Date} opts.start 
     * @param {Date} opts.end 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */

  }, {
    key: 'apiBrokerTradehistoryGet',
    value: function apiBrokerTradehistoryGet(authorization, opts) {
      return this.apiBrokerTradehistoryGetWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerTradesIpfsHashUpdatePostWithHttpInfo',
    value: function apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesIpfsHashUpdatePost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/trades/ipfsHash/update', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update manager history ipfs hash
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/ManagerHistoryIpfsHash} opts.data 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerTradesIpfsHashUpdatePost',
    value: function apiBrokerTradesIpfsHashUpdatePost(authorization, opts) {
      return this.apiBrokerTradesIpfsHashUpdatePostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'apiBrokerTradesNewPostWithHttpInfo',
    value: function apiBrokerTradesNewPostWithHttpInfo(authorization, opts) {
      opts = opts || {};
      var postBody = opts['tradeEvent'];

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling apiBrokerTradesNewPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': authorization,
        'api-version': opts['apiVersion']
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi('/api/broker/trades/new', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * New trade event
     * @param {String} authorization JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/NewTradeEvent} opts.tradeEvent 
     * @param {String} opts.apiVersion 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'apiBrokerTradesNewPost',
    value: function apiBrokerTradesNewPost(authorization, opts) {
      return this.apiBrokerTradesNewPostWithHttpInfo(authorization, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return BrokerApi;
}();

exports.default = BrokerApi;